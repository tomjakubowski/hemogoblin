/* automatically generated by rust-bindgen 0.72.1 */

pub const OB_FMT_64: &[u8; 3] = b"ll\0";
pub const OB_FMT_SIZE: &[u8; 2] = b"z\0";
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const OB_INT8_MAX: u32 = 127;
pub const OB_INT8_MIN: i32 = -128;
pub const OB_INT16_MAX: u32 = 32767;
pub const OB_INT16_MIN: i32 = -32768;
pub const OB_INT32_MAX: u32 = 2147483647;
pub const OB_INT32_MIN: i32 = -2147483648;
pub const OB_FMT_RETORT: &[u8; 3] = b"ll\0";
pub const OB_MIN_ERRNO: u32 = 1;
pub const OB_MAX_ERRNO: u32 = 999;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_VISIONOS: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_5: u32 = 101405;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_12_4: u32 = 120400;
pub const __MAC_12_5: u32 = 120500;
pub const __MAC_12_6: u32 = 120600;
pub const __MAC_12_7: u32 = 120700;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __MAC_13_2: u32 = 130200;
pub const __MAC_13_3: u32 = 130300;
pub const __MAC_13_4: u32 = 130400;
pub const __MAC_13_5: u32 = 130500;
pub const __MAC_13_6: u32 = 130600;
pub const __MAC_14_0: u32 = 140000;
pub const __MAC_14_1: u32 = 140100;
pub const __MAC_14_2: u32 = 140200;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_4: u32 = 140400;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_15_5: u32 = 150500;
pub const __IPHONE_15_6: u32 = 150600;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __IPHONE_16_3: u32 = 160300;
pub const __IPHONE_16_4: u32 = 160400;
pub const __IPHONE_16_5: u32 = 160500;
pub const __IPHONE_16_6: u32 = 160600;
pub const __IPHONE_16_7: u32 = 160700;
pub const __IPHONE_17_0: u32 = 170000;
pub const __IPHONE_17_1: u32 = 170100;
pub const __IPHONE_17_2: u32 = 170200;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_8_6: u32 = 80600;
pub const __WATCHOS_8_7: u32 = 80700;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const __WATCHOS_9_3: u32 = 90300;
pub const __WATCHOS_9_4: u32 = 90400;
pub const __WATCHOS_9_5: u32 = 90500;
pub const __WATCHOS_9_6: u32 = 90600;
pub const __WATCHOS_10_0: u32 = 100000;
pub const __WATCHOS_10_1: u32 = 100100;
pub const __WATCHOS_10_2: u32 = 100200;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_15_5: u32 = 150500;
pub const __TVOS_15_6: u32 = 150600;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __TVOS_16_3: u32 = 160300;
pub const __TVOS_16_4: u32 = 160400;
pub const __TVOS_16_5: u32 = 160500;
pub const __TVOS_16_6: u32 = 160600;
pub const __TVOS_17_0: u32 = 170000;
pub const __TVOS_17_1: u32 = 170100;
pub const __TVOS_17_2: u32 = 170200;
pub const __BRIDGEOS_2_0: u32 = 20000;
pub const __BRIDGEOS_3_0: u32 = 30000;
pub const __BRIDGEOS_3_1: u32 = 30100;
pub const __BRIDGEOS_3_4: u32 = 30400;
pub const __BRIDGEOS_4_0: u32 = 40000;
pub const __BRIDGEOS_4_1: u32 = 40100;
pub const __BRIDGEOS_5_0: u32 = 50000;
pub const __BRIDGEOS_5_1: u32 = 50100;
pub const __BRIDGEOS_5_3: u32 = 50300;
pub const __BRIDGEOS_6_0: u32 = 60000;
pub const __BRIDGEOS_6_2: u32 = 60200;
pub const __BRIDGEOS_6_4: u32 = 60400;
pub const __BRIDGEOS_6_5: u32 = 60500;
pub const __BRIDGEOS_6_6: u32 = 60600;
pub const __BRIDGEOS_7_0: u32 = 70000;
pub const __BRIDGEOS_7_1: u32 = 70100;
pub const __BRIDGEOS_7_2: u32 = 70200;
pub const __BRIDGEOS_7_3: u32 = 70300;
pub const __BRIDGEOS_7_4: u32 = 70400;
pub const __BRIDGEOS_7_6: u32 = 70600;
pub const __BRIDGEOS_8_0: u32 = 80000;
pub const __BRIDGEOS_8_1: u32 = 80100;
pub const __BRIDGEOS_8_2: u32 = 80200;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __DRIVERKIT_22_0: u32 = 220000;
pub const __DRIVERKIT_22_4: u32 = 220400;
pub const __DRIVERKIT_22_5: u32 = 220500;
pub const __DRIVERKIT_22_6: u32 = 220600;
pub const __DRIVERKIT_23_0: u32 = 230000;
pub const __DRIVERKIT_23_1: u32 = 230100;
pub const __DRIVERKIT_23_2: u32 = 230200;
pub const __VISIONOS_1_0: u32 = 10000;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_5: u32 = 101405;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_15_4: u32 = 101504;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_VERSION_11_3: u32 = 110300;
pub const MAC_OS_VERSION_11_4: u32 = 110400;
pub const MAC_OS_VERSION_11_5: u32 = 110500;
pub const MAC_OS_VERSION_11_6: u32 = 110600;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_12_1: u32 = 120100;
pub const MAC_OS_VERSION_12_2: u32 = 120200;
pub const MAC_OS_VERSION_12_3: u32 = 120300;
pub const MAC_OS_VERSION_12_4: u32 = 120400;
pub const MAC_OS_VERSION_12_5: u32 = 120500;
pub const MAC_OS_VERSION_12_6: u32 = 120600;
pub const MAC_OS_VERSION_12_7: u32 = 120700;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const MAC_OS_VERSION_13_1: u32 = 130100;
pub const MAC_OS_VERSION_13_2: u32 = 130200;
pub const MAC_OS_VERSION_13_3: u32 = 130300;
pub const MAC_OS_VERSION_13_4: u32 = 130400;
pub const MAC_OS_VERSION_13_5: u32 = 130500;
pub const MAC_OS_VERSION_13_6: u32 = 130600;
pub const MAC_OS_VERSION_14_0: u32 = 140000;
pub const MAC_OS_VERSION_14_1: u32 = 140100;
pub const MAC_OS_VERSION_14_2: u32 = 140200;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 140200;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const __HAS_FIXED_CHK_PROTOTYPES: u32 = 1;
pub const OB_HEX_LINE_LEN: u32 = 69;
pub const POOL_WAIT_FOREVER: i32 = -1;
pub const POOL_NO_WAIT: u32 = 0;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const RENAME_RESERVED1: u32 = 8;
pub const RENAME_NOFOLLOW_ANY: u32 = 16;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_HOLE: u32 = 3;
pub const SEEK_DATA: u32 = 4;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &[u8; 10] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const L_ctermid: u32 = 1024;
pub type int8 = ::std::os::raw::c_schar;
pub type unt8 = ::std::os::raw::c_uchar;
pub type int16 = ::std::os::raw::c_short;
pub type unt16 = ::std::os::raw::c_ushort;
pub type int32 = ::std::os::raw::c_int;
pub type unt32 = ::std::os::raw::c_uint;
pub type int64 = ::std::os::raw::c_longlong;
pub type unt64 = ::std::os::raw::c_ulonglong;
pub type float32 = f32;
pub type float64 = f64;
pub type byte = unt8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct int8c {
    pub re: int8,
    pub im: int8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of int8c"][::std::mem::size_of::<int8c>() - 2usize];
    ["Alignment of int8c"][::std::mem::align_of::<int8c>() - 1usize];
    ["Offset of field: int8c::re"][::std::mem::offset_of!(int8c, re) - 0usize];
    ["Offset of field: int8c::im"][::std::mem::offset_of!(int8c, im) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unt8c {
    pub re: unt8,
    pub im: unt8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of unt8c"][::std::mem::size_of::<unt8c>() - 2usize];
    ["Alignment of unt8c"][::std::mem::align_of::<unt8c>() - 1usize];
    ["Offset of field: unt8c::re"][::std::mem::offset_of!(unt8c, re) - 0usize];
    ["Offset of field: unt8c::im"][::std::mem::offset_of!(unt8c, im) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct int16c {
    pub re: int16,
    pub im: int16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of int16c"][::std::mem::size_of::<int16c>() - 4usize];
    ["Alignment of int16c"][::std::mem::align_of::<int16c>() - 2usize];
    ["Offset of field: int16c::re"][::std::mem::offset_of!(int16c, re) - 0usize];
    ["Offset of field: int16c::im"][::std::mem::offset_of!(int16c, im) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unt16c {
    pub re: unt16,
    pub im: unt16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of unt16c"][::std::mem::size_of::<unt16c>() - 4usize];
    ["Alignment of unt16c"][::std::mem::align_of::<unt16c>() - 2usize];
    ["Offset of field: unt16c::re"][::std::mem::offset_of!(unt16c, re) - 0usize];
    ["Offset of field: unt16c::im"][::std::mem::offset_of!(unt16c, im) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct int32c {
    pub re: int32,
    pub im: int32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of int32c"][::std::mem::size_of::<int32c>() - 8usize];
    ["Alignment of int32c"][::std::mem::align_of::<int32c>() - 4usize];
    ["Offset of field: int32c::re"][::std::mem::offset_of!(int32c, re) - 0usize];
    ["Offset of field: int32c::im"][::std::mem::offset_of!(int32c, im) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unt32c {
    pub re: unt32,
    pub im: unt32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of unt32c"][::std::mem::size_of::<unt32c>() - 8usize];
    ["Alignment of unt32c"][::std::mem::align_of::<unt32c>() - 4usize];
    ["Offset of field: unt32c::re"][::std::mem::offset_of!(unt32c, re) - 0usize];
    ["Offset of field: unt32c::im"][::std::mem::offset_of!(unt32c, im) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct int64c {
    pub re: int64,
    pub im: int64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of int64c"][::std::mem::size_of::<int64c>() - 16usize];
    ["Alignment of int64c"][::std::mem::align_of::<int64c>() - 8usize];
    ["Offset of field: int64c::re"][::std::mem::offset_of!(int64c, re) - 0usize];
    ["Offset of field: int64c::im"][::std::mem::offset_of!(int64c, im) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unt64c {
    pub re: unt64,
    pub im: unt64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of unt64c"][::std::mem::size_of::<unt64c>() - 16usize];
    ["Alignment of unt64c"][::std::mem::align_of::<unt64c>() - 8usize];
    ["Offset of field: unt64c::re"][::std::mem::offset_of!(unt64c, re) - 0usize];
    ["Offset of field: unt64c::im"][::std::mem::offset_of!(unt64c, im) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct float32c {
    pub re: float32,
    pub im: float32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of float32c"][::std::mem::size_of::<float32c>() - 8usize];
    ["Alignment of float32c"][::std::mem::align_of::<float32c>() - 4usize];
    ["Offset of field: float32c::re"][::std::mem::offset_of!(float32c, re) - 0usize];
    ["Offset of field: float32c::im"][::std::mem::offset_of!(float32c, im) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct float64c {
    pub re: float64,
    pub im: float64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of float64c"][::std::mem::size_of::<float64c>() - 16usize];
    ["Alignment of float64c"][::std::mem::align_of::<float64c>() - 8usize];
    ["Offset of field: float64c::re"][::std::mem::offset_of!(float64c, re) - 0usize];
    ["Offset of field: float64c::im"][::std::mem::offset_of!(float64c, im) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v2int8 {
    pub x: int8,
    pub y: int8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v2int8"][::std::mem::size_of::<v2int8>() - 2usize];
    ["Alignment of v2int8"][::std::mem::align_of::<v2int8>() - 1usize];
    ["Offset of field: v2int8::x"][::std::mem::offset_of!(v2int8, x) - 0usize];
    ["Offset of field: v2int8::y"][::std::mem::offset_of!(v2int8, y) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v2unt8 {
    pub x: unt8,
    pub y: unt8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v2unt8"][::std::mem::size_of::<v2unt8>() - 2usize];
    ["Alignment of v2unt8"][::std::mem::align_of::<v2unt8>() - 1usize];
    ["Offset of field: v2unt8::x"][::std::mem::offset_of!(v2unt8, x) - 0usize];
    ["Offset of field: v2unt8::y"][::std::mem::offset_of!(v2unt8, y) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v2int16 {
    pub x: int16,
    pub y: int16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v2int16"][::std::mem::size_of::<v2int16>() - 4usize];
    ["Alignment of v2int16"][::std::mem::align_of::<v2int16>() - 2usize];
    ["Offset of field: v2int16::x"][::std::mem::offset_of!(v2int16, x) - 0usize];
    ["Offset of field: v2int16::y"][::std::mem::offset_of!(v2int16, y) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v2unt16 {
    pub x: unt16,
    pub y: unt16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v2unt16"][::std::mem::size_of::<v2unt16>() - 4usize];
    ["Alignment of v2unt16"][::std::mem::align_of::<v2unt16>() - 2usize];
    ["Offset of field: v2unt16::x"][::std::mem::offset_of!(v2unt16, x) - 0usize];
    ["Offset of field: v2unt16::y"][::std::mem::offset_of!(v2unt16, y) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v2int32 {
    pub x: int32,
    pub y: int32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v2int32"][::std::mem::size_of::<v2int32>() - 8usize];
    ["Alignment of v2int32"][::std::mem::align_of::<v2int32>() - 4usize];
    ["Offset of field: v2int32::x"][::std::mem::offset_of!(v2int32, x) - 0usize];
    ["Offset of field: v2int32::y"][::std::mem::offset_of!(v2int32, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v2unt32 {
    pub x: unt32,
    pub y: unt32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v2unt32"][::std::mem::size_of::<v2unt32>() - 8usize];
    ["Alignment of v2unt32"][::std::mem::align_of::<v2unt32>() - 4usize];
    ["Offset of field: v2unt32::x"][::std::mem::offset_of!(v2unt32, x) - 0usize];
    ["Offset of field: v2unt32::y"][::std::mem::offset_of!(v2unt32, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v2int64 {
    pub x: int64,
    pub y: int64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v2int64"][::std::mem::size_of::<v2int64>() - 16usize];
    ["Alignment of v2int64"][::std::mem::align_of::<v2int64>() - 8usize];
    ["Offset of field: v2int64::x"][::std::mem::offset_of!(v2int64, x) - 0usize];
    ["Offset of field: v2int64::y"][::std::mem::offset_of!(v2int64, y) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v2unt64 {
    pub x: unt64,
    pub y: unt64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v2unt64"][::std::mem::size_of::<v2unt64>() - 16usize];
    ["Alignment of v2unt64"][::std::mem::align_of::<v2unt64>() - 8usize];
    ["Offset of field: v2unt64::x"][::std::mem::offset_of!(v2unt64, x) - 0usize];
    ["Offset of field: v2unt64::y"][::std::mem::offset_of!(v2unt64, y) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v2float32 {
    pub x: float32,
    pub y: float32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v2float32"][::std::mem::size_of::<v2float32>() - 8usize];
    ["Alignment of v2float32"][::std::mem::align_of::<v2float32>() - 4usize];
    ["Offset of field: v2float32::x"][::std::mem::offset_of!(v2float32, x) - 0usize];
    ["Offset of field: v2float32::y"][::std::mem::offset_of!(v2float32, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v2float64 {
    pub x: float64,
    pub y: float64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v2float64"][::std::mem::size_of::<v2float64>() - 16usize];
    ["Alignment of v2float64"][::std::mem::align_of::<v2float64>() - 8usize];
    ["Offset of field: v2float64::x"][::std::mem::offset_of!(v2float64, x) - 0usize];
    ["Offset of field: v2float64::y"][::std::mem::offset_of!(v2float64, y) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v3int8 {
    pub x: int8,
    pub y: int8,
    pub z: int8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v3int8"][::std::mem::size_of::<v3int8>() - 3usize];
    ["Alignment of v3int8"][::std::mem::align_of::<v3int8>() - 1usize];
    ["Offset of field: v3int8::x"][::std::mem::offset_of!(v3int8, x) - 0usize];
    ["Offset of field: v3int8::y"][::std::mem::offset_of!(v3int8, y) - 1usize];
    ["Offset of field: v3int8::z"][::std::mem::offset_of!(v3int8, z) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v3unt8 {
    pub x: unt8,
    pub y: unt8,
    pub z: unt8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v3unt8"][::std::mem::size_of::<v3unt8>() - 3usize];
    ["Alignment of v3unt8"][::std::mem::align_of::<v3unt8>() - 1usize];
    ["Offset of field: v3unt8::x"][::std::mem::offset_of!(v3unt8, x) - 0usize];
    ["Offset of field: v3unt8::y"][::std::mem::offset_of!(v3unt8, y) - 1usize];
    ["Offset of field: v3unt8::z"][::std::mem::offset_of!(v3unt8, z) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v3int16 {
    pub x: int16,
    pub y: int16,
    pub z: int16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v3int16"][::std::mem::size_of::<v3int16>() - 6usize];
    ["Alignment of v3int16"][::std::mem::align_of::<v3int16>() - 2usize];
    ["Offset of field: v3int16::x"][::std::mem::offset_of!(v3int16, x) - 0usize];
    ["Offset of field: v3int16::y"][::std::mem::offset_of!(v3int16, y) - 2usize];
    ["Offset of field: v3int16::z"][::std::mem::offset_of!(v3int16, z) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v3unt16 {
    pub x: unt16,
    pub y: unt16,
    pub z: unt16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v3unt16"][::std::mem::size_of::<v3unt16>() - 6usize];
    ["Alignment of v3unt16"][::std::mem::align_of::<v3unt16>() - 2usize];
    ["Offset of field: v3unt16::x"][::std::mem::offset_of!(v3unt16, x) - 0usize];
    ["Offset of field: v3unt16::y"][::std::mem::offset_of!(v3unt16, y) - 2usize];
    ["Offset of field: v3unt16::z"][::std::mem::offset_of!(v3unt16, z) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v3int32 {
    pub x: int32,
    pub y: int32,
    pub z: int32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v3int32"][::std::mem::size_of::<v3int32>() - 12usize];
    ["Alignment of v3int32"][::std::mem::align_of::<v3int32>() - 4usize];
    ["Offset of field: v3int32::x"][::std::mem::offset_of!(v3int32, x) - 0usize];
    ["Offset of field: v3int32::y"][::std::mem::offset_of!(v3int32, y) - 4usize];
    ["Offset of field: v3int32::z"][::std::mem::offset_of!(v3int32, z) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v3unt32 {
    pub x: unt32,
    pub y: unt32,
    pub z: unt32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v3unt32"][::std::mem::size_of::<v3unt32>() - 12usize];
    ["Alignment of v3unt32"][::std::mem::align_of::<v3unt32>() - 4usize];
    ["Offset of field: v3unt32::x"][::std::mem::offset_of!(v3unt32, x) - 0usize];
    ["Offset of field: v3unt32::y"][::std::mem::offset_of!(v3unt32, y) - 4usize];
    ["Offset of field: v3unt32::z"][::std::mem::offset_of!(v3unt32, z) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v3int64 {
    pub x: int64,
    pub y: int64,
    pub z: int64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v3int64"][::std::mem::size_of::<v3int64>() - 24usize];
    ["Alignment of v3int64"][::std::mem::align_of::<v3int64>() - 8usize];
    ["Offset of field: v3int64::x"][::std::mem::offset_of!(v3int64, x) - 0usize];
    ["Offset of field: v3int64::y"][::std::mem::offset_of!(v3int64, y) - 8usize];
    ["Offset of field: v3int64::z"][::std::mem::offset_of!(v3int64, z) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v3unt64 {
    pub x: unt64,
    pub y: unt64,
    pub z: unt64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v3unt64"][::std::mem::size_of::<v3unt64>() - 24usize];
    ["Alignment of v3unt64"][::std::mem::align_of::<v3unt64>() - 8usize];
    ["Offset of field: v3unt64::x"][::std::mem::offset_of!(v3unt64, x) - 0usize];
    ["Offset of field: v3unt64::y"][::std::mem::offset_of!(v3unt64, y) - 8usize];
    ["Offset of field: v3unt64::z"][::std::mem::offset_of!(v3unt64, z) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v3float32 {
    pub x: float32,
    pub y: float32,
    pub z: float32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v3float32"][::std::mem::size_of::<v3float32>() - 12usize];
    ["Alignment of v3float32"][::std::mem::align_of::<v3float32>() - 4usize];
    ["Offset of field: v3float32::x"][::std::mem::offset_of!(v3float32, x) - 0usize];
    ["Offset of field: v3float32::y"][::std::mem::offset_of!(v3float32, y) - 4usize];
    ["Offset of field: v3float32::z"][::std::mem::offset_of!(v3float32, z) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v3float64 {
    pub x: float64,
    pub y: float64,
    pub z: float64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v3float64"][::std::mem::size_of::<v3float64>() - 24usize];
    ["Alignment of v3float64"][::std::mem::align_of::<v3float64>() - 8usize];
    ["Offset of field: v3float64::x"][::std::mem::offset_of!(v3float64, x) - 0usize];
    ["Offset of field: v3float64::y"][::std::mem::offset_of!(v3float64, y) - 8usize];
    ["Offset of field: v3float64::z"][::std::mem::offset_of!(v3float64, z) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4int8 {
    pub x: int8,
    pub y: int8,
    pub z: int8,
    pub w: int8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v4int8"][::std::mem::size_of::<v4int8>() - 4usize];
    ["Alignment of v4int8"][::std::mem::align_of::<v4int8>() - 1usize];
    ["Offset of field: v4int8::x"][::std::mem::offset_of!(v4int8, x) - 0usize];
    ["Offset of field: v4int8::y"][::std::mem::offset_of!(v4int8, y) - 1usize];
    ["Offset of field: v4int8::z"][::std::mem::offset_of!(v4int8, z) - 2usize];
    ["Offset of field: v4int8::w"][::std::mem::offset_of!(v4int8, w) - 3usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4unt8 {
    pub x: unt8,
    pub y: unt8,
    pub z: unt8,
    pub w: unt8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v4unt8"][::std::mem::size_of::<v4unt8>() - 4usize];
    ["Alignment of v4unt8"][::std::mem::align_of::<v4unt8>() - 1usize];
    ["Offset of field: v4unt8::x"][::std::mem::offset_of!(v4unt8, x) - 0usize];
    ["Offset of field: v4unt8::y"][::std::mem::offset_of!(v4unt8, y) - 1usize];
    ["Offset of field: v4unt8::z"][::std::mem::offset_of!(v4unt8, z) - 2usize];
    ["Offset of field: v4unt8::w"][::std::mem::offset_of!(v4unt8, w) - 3usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4int16 {
    pub x: int16,
    pub y: int16,
    pub z: int16,
    pub w: int16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v4int16"][::std::mem::size_of::<v4int16>() - 8usize];
    ["Alignment of v4int16"][::std::mem::align_of::<v4int16>() - 2usize];
    ["Offset of field: v4int16::x"][::std::mem::offset_of!(v4int16, x) - 0usize];
    ["Offset of field: v4int16::y"][::std::mem::offset_of!(v4int16, y) - 2usize];
    ["Offset of field: v4int16::z"][::std::mem::offset_of!(v4int16, z) - 4usize];
    ["Offset of field: v4int16::w"][::std::mem::offset_of!(v4int16, w) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4unt16 {
    pub x: unt16,
    pub y: unt16,
    pub z: unt16,
    pub w: unt16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v4unt16"][::std::mem::size_of::<v4unt16>() - 8usize];
    ["Alignment of v4unt16"][::std::mem::align_of::<v4unt16>() - 2usize];
    ["Offset of field: v4unt16::x"][::std::mem::offset_of!(v4unt16, x) - 0usize];
    ["Offset of field: v4unt16::y"][::std::mem::offset_of!(v4unt16, y) - 2usize];
    ["Offset of field: v4unt16::z"][::std::mem::offset_of!(v4unt16, z) - 4usize];
    ["Offset of field: v4unt16::w"][::std::mem::offset_of!(v4unt16, w) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4int32 {
    pub x: int32,
    pub y: int32,
    pub z: int32,
    pub w: int32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v4int32"][::std::mem::size_of::<v4int32>() - 16usize];
    ["Alignment of v4int32"][::std::mem::align_of::<v4int32>() - 4usize];
    ["Offset of field: v4int32::x"][::std::mem::offset_of!(v4int32, x) - 0usize];
    ["Offset of field: v4int32::y"][::std::mem::offset_of!(v4int32, y) - 4usize];
    ["Offset of field: v4int32::z"][::std::mem::offset_of!(v4int32, z) - 8usize];
    ["Offset of field: v4int32::w"][::std::mem::offset_of!(v4int32, w) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4unt32 {
    pub x: unt32,
    pub y: unt32,
    pub z: unt32,
    pub w: unt32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v4unt32"][::std::mem::size_of::<v4unt32>() - 16usize];
    ["Alignment of v4unt32"][::std::mem::align_of::<v4unt32>() - 4usize];
    ["Offset of field: v4unt32::x"][::std::mem::offset_of!(v4unt32, x) - 0usize];
    ["Offset of field: v4unt32::y"][::std::mem::offset_of!(v4unt32, y) - 4usize];
    ["Offset of field: v4unt32::z"][::std::mem::offset_of!(v4unt32, z) - 8usize];
    ["Offset of field: v4unt32::w"][::std::mem::offset_of!(v4unt32, w) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4int64 {
    pub x: int64,
    pub y: int64,
    pub z: int64,
    pub w: int64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v4int64"][::std::mem::size_of::<v4int64>() - 32usize];
    ["Alignment of v4int64"][::std::mem::align_of::<v4int64>() - 8usize];
    ["Offset of field: v4int64::x"][::std::mem::offset_of!(v4int64, x) - 0usize];
    ["Offset of field: v4int64::y"][::std::mem::offset_of!(v4int64, y) - 8usize];
    ["Offset of field: v4int64::z"][::std::mem::offset_of!(v4int64, z) - 16usize];
    ["Offset of field: v4int64::w"][::std::mem::offset_of!(v4int64, w) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4unt64 {
    pub x: unt64,
    pub y: unt64,
    pub z: unt64,
    pub w: unt64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v4unt64"][::std::mem::size_of::<v4unt64>() - 32usize];
    ["Alignment of v4unt64"][::std::mem::align_of::<v4unt64>() - 8usize];
    ["Offset of field: v4unt64::x"][::std::mem::offset_of!(v4unt64, x) - 0usize];
    ["Offset of field: v4unt64::y"][::std::mem::offset_of!(v4unt64, y) - 8usize];
    ["Offset of field: v4unt64::z"][::std::mem::offset_of!(v4unt64, z) - 16usize];
    ["Offset of field: v4unt64::w"][::std::mem::offset_of!(v4unt64, w) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4float32 {
    pub x: float32,
    pub y: float32,
    pub z: float32,
    pub w: float32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v4float32"][::std::mem::size_of::<v4float32>() - 16usize];
    ["Alignment of v4float32"][::std::mem::align_of::<v4float32>() - 4usize];
    ["Offset of field: v4float32::x"][::std::mem::offset_of!(v4float32, x) - 0usize];
    ["Offset of field: v4float32::y"][::std::mem::offset_of!(v4float32, y) - 4usize];
    ["Offset of field: v4float32::z"][::std::mem::offset_of!(v4float32, z) - 8usize];
    ["Offset of field: v4float32::w"][::std::mem::offset_of!(v4float32, w) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4float64 {
    pub x: float64,
    pub y: float64,
    pub z: float64,
    pub w: float64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v4float64"][::std::mem::size_of::<v4float64>() - 32usize];
    ["Alignment of v4float64"][::std::mem::align_of::<v4float64>() - 8usize];
    ["Offset of field: v4float64::x"][::std::mem::offset_of!(v4float64, x) - 0usize];
    ["Offset of field: v4float64::y"][::std::mem::offset_of!(v4float64, y) - 8usize];
    ["Offset of field: v4float64::z"][::std::mem::offset_of!(v4float64, z) - 16usize];
    ["Offset of field: v4float64::w"][::std::mem::offset_of!(v4float64, w) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v2int8c {
    pub x: int8c,
    pub y: int8c,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v2int8c"][::std::mem::size_of::<v2int8c>() - 4usize];
    ["Alignment of v2int8c"][::std::mem::align_of::<v2int8c>() - 1usize];
    ["Offset of field: v2int8c::x"][::std::mem::offset_of!(v2int8c, x) - 0usize];
    ["Offset of field: v2int8c::y"][::std::mem::offset_of!(v2int8c, y) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v2unt8c {
    pub x: unt8c,
    pub y: unt8c,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v2unt8c"][::std::mem::size_of::<v2unt8c>() - 4usize];
    ["Alignment of v2unt8c"][::std::mem::align_of::<v2unt8c>() - 1usize];
    ["Offset of field: v2unt8c::x"][::std::mem::offset_of!(v2unt8c, x) - 0usize];
    ["Offset of field: v2unt8c::y"][::std::mem::offset_of!(v2unt8c, y) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v2int16c {
    pub x: int16c,
    pub y: int16c,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v2int16c"][::std::mem::size_of::<v2int16c>() - 8usize];
    ["Alignment of v2int16c"][::std::mem::align_of::<v2int16c>() - 2usize];
    ["Offset of field: v2int16c::x"][::std::mem::offset_of!(v2int16c, x) - 0usize];
    ["Offset of field: v2int16c::y"][::std::mem::offset_of!(v2int16c, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v2unt16c {
    pub x: unt16c,
    pub y: unt16c,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v2unt16c"][::std::mem::size_of::<v2unt16c>() - 8usize];
    ["Alignment of v2unt16c"][::std::mem::align_of::<v2unt16c>() - 2usize];
    ["Offset of field: v2unt16c::x"][::std::mem::offset_of!(v2unt16c, x) - 0usize];
    ["Offset of field: v2unt16c::y"][::std::mem::offset_of!(v2unt16c, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v2int32c {
    pub x: int32c,
    pub y: int32c,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v2int32c"][::std::mem::size_of::<v2int32c>() - 16usize];
    ["Alignment of v2int32c"][::std::mem::align_of::<v2int32c>() - 4usize];
    ["Offset of field: v2int32c::x"][::std::mem::offset_of!(v2int32c, x) - 0usize];
    ["Offset of field: v2int32c::y"][::std::mem::offset_of!(v2int32c, y) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v2unt32c {
    pub x: unt32c,
    pub y: unt32c,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v2unt32c"][::std::mem::size_of::<v2unt32c>() - 16usize];
    ["Alignment of v2unt32c"][::std::mem::align_of::<v2unt32c>() - 4usize];
    ["Offset of field: v2unt32c::x"][::std::mem::offset_of!(v2unt32c, x) - 0usize];
    ["Offset of field: v2unt32c::y"][::std::mem::offset_of!(v2unt32c, y) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v2int64c {
    pub x: int64c,
    pub y: int64c,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v2int64c"][::std::mem::size_of::<v2int64c>() - 32usize];
    ["Alignment of v2int64c"][::std::mem::align_of::<v2int64c>() - 8usize];
    ["Offset of field: v2int64c::x"][::std::mem::offset_of!(v2int64c, x) - 0usize];
    ["Offset of field: v2int64c::y"][::std::mem::offset_of!(v2int64c, y) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v2unt64c {
    pub x: unt64c,
    pub y: unt64c,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v2unt64c"][::std::mem::size_of::<v2unt64c>() - 32usize];
    ["Alignment of v2unt64c"][::std::mem::align_of::<v2unt64c>() - 8usize];
    ["Offset of field: v2unt64c::x"][::std::mem::offset_of!(v2unt64c, x) - 0usize];
    ["Offset of field: v2unt64c::y"][::std::mem::offset_of!(v2unt64c, y) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v2float32c {
    pub x: float32c,
    pub y: float32c,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v2float32c"][::std::mem::size_of::<v2float32c>() - 16usize];
    ["Alignment of v2float32c"][::std::mem::align_of::<v2float32c>() - 4usize];
    ["Offset of field: v2float32c::x"][::std::mem::offset_of!(v2float32c, x) - 0usize];
    ["Offset of field: v2float32c::y"][::std::mem::offset_of!(v2float32c, y) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v2float64c {
    pub x: float64c,
    pub y: float64c,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v2float64c"][::std::mem::size_of::<v2float64c>() - 32usize];
    ["Alignment of v2float64c"][::std::mem::align_of::<v2float64c>() - 8usize];
    ["Offset of field: v2float64c::x"][::std::mem::offset_of!(v2float64c, x) - 0usize];
    ["Offset of field: v2float64c::y"][::std::mem::offset_of!(v2float64c, y) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v3int8c {
    pub x: int8c,
    pub y: int8c,
    pub z: int8c,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v3int8c"][::std::mem::size_of::<v3int8c>() - 6usize];
    ["Alignment of v3int8c"][::std::mem::align_of::<v3int8c>() - 1usize];
    ["Offset of field: v3int8c::x"][::std::mem::offset_of!(v3int8c, x) - 0usize];
    ["Offset of field: v3int8c::y"][::std::mem::offset_of!(v3int8c, y) - 2usize];
    ["Offset of field: v3int8c::z"][::std::mem::offset_of!(v3int8c, z) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v3unt8c {
    pub x: unt8c,
    pub y: unt8c,
    pub z: unt8c,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v3unt8c"][::std::mem::size_of::<v3unt8c>() - 6usize];
    ["Alignment of v3unt8c"][::std::mem::align_of::<v3unt8c>() - 1usize];
    ["Offset of field: v3unt8c::x"][::std::mem::offset_of!(v3unt8c, x) - 0usize];
    ["Offset of field: v3unt8c::y"][::std::mem::offset_of!(v3unt8c, y) - 2usize];
    ["Offset of field: v3unt8c::z"][::std::mem::offset_of!(v3unt8c, z) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v3int16c {
    pub x: int16c,
    pub y: int16c,
    pub z: int16c,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v3int16c"][::std::mem::size_of::<v3int16c>() - 12usize];
    ["Alignment of v3int16c"][::std::mem::align_of::<v3int16c>() - 2usize];
    ["Offset of field: v3int16c::x"][::std::mem::offset_of!(v3int16c, x) - 0usize];
    ["Offset of field: v3int16c::y"][::std::mem::offset_of!(v3int16c, y) - 4usize];
    ["Offset of field: v3int16c::z"][::std::mem::offset_of!(v3int16c, z) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v3unt16c {
    pub x: unt16c,
    pub y: unt16c,
    pub z: unt16c,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v3unt16c"][::std::mem::size_of::<v3unt16c>() - 12usize];
    ["Alignment of v3unt16c"][::std::mem::align_of::<v3unt16c>() - 2usize];
    ["Offset of field: v3unt16c::x"][::std::mem::offset_of!(v3unt16c, x) - 0usize];
    ["Offset of field: v3unt16c::y"][::std::mem::offset_of!(v3unt16c, y) - 4usize];
    ["Offset of field: v3unt16c::z"][::std::mem::offset_of!(v3unt16c, z) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v3int32c {
    pub x: int32c,
    pub y: int32c,
    pub z: int32c,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v3int32c"][::std::mem::size_of::<v3int32c>() - 24usize];
    ["Alignment of v3int32c"][::std::mem::align_of::<v3int32c>() - 4usize];
    ["Offset of field: v3int32c::x"][::std::mem::offset_of!(v3int32c, x) - 0usize];
    ["Offset of field: v3int32c::y"][::std::mem::offset_of!(v3int32c, y) - 8usize];
    ["Offset of field: v3int32c::z"][::std::mem::offset_of!(v3int32c, z) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v3unt32c {
    pub x: unt32c,
    pub y: unt32c,
    pub z: unt32c,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v3unt32c"][::std::mem::size_of::<v3unt32c>() - 24usize];
    ["Alignment of v3unt32c"][::std::mem::align_of::<v3unt32c>() - 4usize];
    ["Offset of field: v3unt32c::x"][::std::mem::offset_of!(v3unt32c, x) - 0usize];
    ["Offset of field: v3unt32c::y"][::std::mem::offset_of!(v3unt32c, y) - 8usize];
    ["Offset of field: v3unt32c::z"][::std::mem::offset_of!(v3unt32c, z) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v3int64c {
    pub x: int64c,
    pub y: int64c,
    pub z: int64c,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v3int64c"][::std::mem::size_of::<v3int64c>() - 48usize];
    ["Alignment of v3int64c"][::std::mem::align_of::<v3int64c>() - 8usize];
    ["Offset of field: v3int64c::x"][::std::mem::offset_of!(v3int64c, x) - 0usize];
    ["Offset of field: v3int64c::y"][::std::mem::offset_of!(v3int64c, y) - 16usize];
    ["Offset of field: v3int64c::z"][::std::mem::offset_of!(v3int64c, z) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v3unt64c {
    pub x: unt64c,
    pub y: unt64c,
    pub z: unt64c,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v3unt64c"][::std::mem::size_of::<v3unt64c>() - 48usize];
    ["Alignment of v3unt64c"][::std::mem::align_of::<v3unt64c>() - 8usize];
    ["Offset of field: v3unt64c::x"][::std::mem::offset_of!(v3unt64c, x) - 0usize];
    ["Offset of field: v3unt64c::y"][::std::mem::offset_of!(v3unt64c, y) - 16usize];
    ["Offset of field: v3unt64c::z"][::std::mem::offset_of!(v3unt64c, z) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v3float32c {
    pub x: float32c,
    pub y: float32c,
    pub z: float32c,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v3float32c"][::std::mem::size_of::<v3float32c>() - 24usize];
    ["Alignment of v3float32c"][::std::mem::align_of::<v3float32c>() - 4usize];
    ["Offset of field: v3float32c::x"][::std::mem::offset_of!(v3float32c, x) - 0usize];
    ["Offset of field: v3float32c::y"][::std::mem::offset_of!(v3float32c, y) - 8usize];
    ["Offset of field: v3float32c::z"][::std::mem::offset_of!(v3float32c, z) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v3float64c {
    pub x: float64c,
    pub y: float64c,
    pub z: float64c,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v3float64c"][::std::mem::size_of::<v3float64c>() - 48usize];
    ["Alignment of v3float64c"][::std::mem::align_of::<v3float64c>() - 8usize];
    ["Offset of field: v3float64c::x"][::std::mem::offset_of!(v3float64c, x) - 0usize];
    ["Offset of field: v3float64c::y"][::std::mem::offset_of!(v3float64c, y) - 16usize];
    ["Offset of field: v3float64c::z"][::std::mem::offset_of!(v3float64c, z) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4int8c {
    pub x: int8c,
    pub y: int8c,
    pub z: int8c,
    pub w: int8c,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v4int8c"][::std::mem::size_of::<v4int8c>() - 8usize];
    ["Alignment of v4int8c"][::std::mem::align_of::<v4int8c>() - 1usize];
    ["Offset of field: v4int8c::x"][::std::mem::offset_of!(v4int8c, x) - 0usize];
    ["Offset of field: v4int8c::y"][::std::mem::offset_of!(v4int8c, y) - 2usize];
    ["Offset of field: v4int8c::z"][::std::mem::offset_of!(v4int8c, z) - 4usize];
    ["Offset of field: v4int8c::w"][::std::mem::offset_of!(v4int8c, w) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4unt8c {
    pub x: unt8c,
    pub y: unt8c,
    pub z: unt8c,
    pub w: unt8c,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v4unt8c"][::std::mem::size_of::<v4unt8c>() - 8usize];
    ["Alignment of v4unt8c"][::std::mem::align_of::<v4unt8c>() - 1usize];
    ["Offset of field: v4unt8c::x"][::std::mem::offset_of!(v4unt8c, x) - 0usize];
    ["Offset of field: v4unt8c::y"][::std::mem::offset_of!(v4unt8c, y) - 2usize];
    ["Offset of field: v4unt8c::z"][::std::mem::offset_of!(v4unt8c, z) - 4usize];
    ["Offset of field: v4unt8c::w"][::std::mem::offset_of!(v4unt8c, w) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4int16c {
    pub x: int16c,
    pub y: int16c,
    pub z: int16c,
    pub w: int16c,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v4int16c"][::std::mem::size_of::<v4int16c>() - 16usize];
    ["Alignment of v4int16c"][::std::mem::align_of::<v4int16c>() - 2usize];
    ["Offset of field: v4int16c::x"][::std::mem::offset_of!(v4int16c, x) - 0usize];
    ["Offset of field: v4int16c::y"][::std::mem::offset_of!(v4int16c, y) - 4usize];
    ["Offset of field: v4int16c::z"][::std::mem::offset_of!(v4int16c, z) - 8usize];
    ["Offset of field: v4int16c::w"][::std::mem::offset_of!(v4int16c, w) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4unt16c {
    pub x: unt16c,
    pub y: unt16c,
    pub z: unt16c,
    pub w: unt16c,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v4unt16c"][::std::mem::size_of::<v4unt16c>() - 16usize];
    ["Alignment of v4unt16c"][::std::mem::align_of::<v4unt16c>() - 2usize];
    ["Offset of field: v4unt16c::x"][::std::mem::offset_of!(v4unt16c, x) - 0usize];
    ["Offset of field: v4unt16c::y"][::std::mem::offset_of!(v4unt16c, y) - 4usize];
    ["Offset of field: v4unt16c::z"][::std::mem::offset_of!(v4unt16c, z) - 8usize];
    ["Offset of field: v4unt16c::w"][::std::mem::offset_of!(v4unt16c, w) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4int32c {
    pub x: int32c,
    pub y: int32c,
    pub z: int32c,
    pub w: int32c,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v4int32c"][::std::mem::size_of::<v4int32c>() - 32usize];
    ["Alignment of v4int32c"][::std::mem::align_of::<v4int32c>() - 4usize];
    ["Offset of field: v4int32c::x"][::std::mem::offset_of!(v4int32c, x) - 0usize];
    ["Offset of field: v4int32c::y"][::std::mem::offset_of!(v4int32c, y) - 8usize];
    ["Offset of field: v4int32c::z"][::std::mem::offset_of!(v4int32c, z) - 16usize];
    ["Offset of field: v4int32c::w"][::std::mem::offset_of!(v4int32c, w) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4unt32c {
    pub x: unt32c,
    pub y: unt32c,
    pub z: unt32c,
    pub w: unt32c,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v4unt32c"][::std::mem::size_of::<v4unt32c>() - 32usize];
    ["Alignment of v4unt32c"][::std::mem::align_of::<v4unt32c>() - 4usize];
    ["Offset of field: v4unt32c::x"][::std::mem::offset_of!(v4unt32c, x) - 0usize];
    ["Offset of field: v4unt32c::y"][::std::mem::offset_of!(v4unt32c, y) - 8usize];
    ["Offset of field: v4unt32c::z"][::std::mem::offset_of!(v4unt32c, z) - 16usize];
    ["Offset of field: v4unt32c::w"][::std::mem::offset_of!(v4unt32c, w) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4int64c {
    pub x: int64c,
    pub y: int64c,
    pub z: int64c,
    pub w: int64c,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v4int64c"][::std::mem::size_of::<v4int64c>() - 64usize];
    ["Alignment of v4int64c"][::std::mem::align_of::<v4int64c>() - 8usize];
    ["Offset of field: v4int64c::x"][::std::mem::offset_of!(v4int64c, x) - 0usize];
    ["Offset of field: v4int64c::y"][::std::mem::offset_of!(v4int64c, y) - 16usize];
    ["Offset of field: v4int64c::z"][::std::mem::offset_of!(v4int64c, z) - 32usize];
    ["Offset of field: v4int64c::w"][::std::mem::offset_of!(v4int64c, w) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4unt64c {
    pub x: unt64c,
    pub y: unt64c,
    pub z: unt64c,
    pub w: unt64c,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v4unt64c"][::std::mem::size_of::<v4unt64c>() - 64usize];
    ["Alignment of v4unt64c"][::std::mem::align_of::<v4unt64c>() - 8usize];
    ["Offset of field: v4unt64c::x"][::std::mem::offset_of!(v4unt64c, x) - 0usize];
    ["Offset of field: v4unt64c::y"][::std::mem::offset_of!(v4unt64c, y) - 16usize];
    ["Offset of field: v4unt64c::z"][::std::mem::offset_of!(v4unt64c, z) - 32usize];
    ["Offset of field: v4unt64c::w"][::std::mem::offset_of!(v4unt64c, w) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4float32c {
    pub x: float32c,
    pub y: float32c,
    pub z: float32c,
    pub w: float32c,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v4float32c"][::std::mem::size_of::<v4float32c>() - 32usize];
    ["Alignment of v4float32c"][::std::mem::align_of::<v4float32c>() - 4usize];
    ["Offset of field: v4float32c::x"][::std::mem::offset_of!(v4float32c, x) - 0usize];
    ["Offset of field: v4float32c::y"][::std::mem::offset_of!(v4float32c, y) - 8usize];
    ["Offset of field: v4float32c::z"][::std::mem::offset_of!(v4float32c, z) - 16usize];
    ["Offset of field: v4float32c::w"][::std::mem::offset_of!(v4float32c, w) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4float64c {
    pub x: float64c,
    pub y: float64c,
    pub z: float64c,
    pub w: float64c,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of v4float64c"][::std::mem::size_of::<v4float64c>() - 64usize];
    ["Alignment of v4float64c"][::std::mem::align_of::<v4float64c>() - 8usize];
    ["Offset of field: v4float64c::x"][::std::mem::offset_of!(v4float64c, x) - 0usize];
    ["Offset of field: v4float64c::y"][::std::mem::offset_of!(v4float64c, y) - 16usize];
    ["Offset of field: v4float64c::z"][::std::mem::offset_of!(v4float64c, z) - 32usize];
    ["Offset of field: v4float64c::w"][::std::mem::offset_of!(v4float64c, w) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m2int8 {
    pub __bindgen_anon_1: m2int8__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m2int8__bindgen_ty_1 {
    pub __bindgen_anon_1: m2int8__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m2int8__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m2int8__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m2int8__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2int8__bindgen_ty_1__bindgen_ty_1 {
    pub u0: int8,
    pub u1: [int8; 2usize],
    pub u2: int8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2int8__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m2int8__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of m2int8__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m2int8__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: m2int8__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m2int8__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m2int8__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m2int8__bindgen_ty_1__bindgen_ty_1, u1) - 1usize];
    ["Offset of field: m2int8__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m2int8__bindgen_ty_1__bindgen_ty_1, u2) - 3usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2int8__bindgen_ty_1__bindgen_ty_2 {
    pub a: int8,
    pub x: int8,
    pub y: int8,
    pub i: int8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2int8__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m2int8__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Alignment of m2int8__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m2int8__bindgen_ty_1__bindgen_ty_2>() - 1usize];
    ["Offset of field: m2int8__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m2int8__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m2int8__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m2int8__bindgen_ty_1__bindgen_ty_2, x) - 1usize];
    ["Offset of field: m2int8__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m2int8__bindgen_ty_1__bindgen_ty_2, y) - 2usize];
    ["Offset of field: m2int8__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m2int8__bindgen_ty_1__bindgen_ty_2, i) - 3usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2int8__bindgen_ty_1__bindgen_ty_3 {
    pub e: int8,
    pub e1: int8,
    pub e2: int8,
    pub e12: int8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2int8__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m2int8__bindgen_ty_1__bindgen_ty_3>() - 4usize];
    ["Alignment of m2int8__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m2int8__bindgen_ty_1__bindgen_ty_3>() - 1usize];
    ["Offset of field: m2int8__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m2int8__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m2int8__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m2int8__bindgen_ty_1__bindgen_ty_3, e1) - 1usize];
    ["Offset of field: m2int8__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m2int8__bindgen_ty_1__bindgen_ty_3, e2) - 2usize];
    ["Offset of field: m2int8__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m2int8__bindgen_ty_1__bindgen_ty_3, e12) - 3usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2int8__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [int8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2int8__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m2int8__bindgen_ty_1__bindgen_ty_4>() - 4usize];
    ["Alignment of m2int8__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m2int8__bindgen_ty_1__bindgen_ty_4>() - 1usize];
    ["Offset of field: m2int8__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m2int8__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2int8__bindgen_ty_1"][::std::mem::size_of::<m2int8__bindgen_ty_1>() - 4usize];
    ["Alignment of m2int8__bindgen_ty_1"][::std::mem::align_of::<m2int8__bindgen_ty_1>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2int8"][::std::mem::size_of::<m2int8>() - 4usize];
    ["Alignment of m2int8"][::std::mem::align_of::<m2int8>() - 1usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m3int8 {
    pub __bindgen_anon_1: m3int8__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m3int8__bindgen_ty_1 {
    pub __bindgen_anon_1: m3int8__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m3int8__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m3int8__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m3int8__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3int8__bindgen_ty_1__bindgen_ty_1 {
    pub u0: int8,
    pub u1: [int8; 3usize],
    pub u2: [int8; 3usize],
    pub u3: int8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3int8__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m3int8__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of m3int8__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m3int8__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: m3int8__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m3int8__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m3int8__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m3int8__bindgen_ty_1__bindgen_ty_1, u1) - 1usize];
    ["Offset of field: m3int8__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m3int8__bindgen_ty_1__bindgen_ty_1, u2) - 4usize];
    ["Offset of field: m3int8__bindgen_ty_1__bindgen_ty_1::u3"]
        [::std::mem::offset_of!(m3int8__bindgen_ty_1__bindgen_ty_1, u3) - 7usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3int8__bindgen_ty_1__bindgen_ty_2 {
    pub a: int8,
    pub x: int8,
    pub y: int8,
    pub z: int8,
    pub xy: int8,
    pub yz: int8,
    pub zx: int8,
    pub i: int8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3int8__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m3int8__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Alignment of m3int8__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m3int8__bindgen_ty_1__bindgen_ty_2>() - 1usize];
    ["Offset of field: m3int8__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m3int8__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m3int8__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m3int8__bindgen_ty_1__bindgen_ty_2, x) - 1usize];
    ["Offset of field: m3int8__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m3int8__bindgen_ty_1__bindgen_ty_2, y) - 2usize];
    ["Offset of field: m3int8__bindgen_ty_1__bindgen_ty_2::z"]
        [::std::mem::offset_of!(m3int8__bindgen_ty_1__bindgen_ty_2, z) - 3usize];
    ["Offset of field: m3int8__bindgen_ty_1__bindgen_ty_2::xy"]
        [::std::mem::offset_of!(m3int8__bindgen_ty_1__bindgen_ty_2, xy) - 4usize];
    ["Offset of field: m3int8__bindgen_ty_1__bindgen_ty_2::yz"]
        [::std::mem::offset_of!(m3int8__bindgen_ty_1__bindgen_ty_2, yz) - 5usize];
    ["Offset of field: m3int8__bindgen_ty_1__bindgen_ty_2::zx"]
        [::std::mem::offset_of!(m3int8__bindgen_ty_1__bindgen_ty_2, zx) - 6usize];
    ["Offset of field: m3int8__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m3int8__bindgen_ty_1__bindgen_ty_2, i) - 7usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3int8__bindgen_ty_1__bindgen_ty_3 {
    pub e: int8,
    pub e1: int8,
    pub e2: int8,
    pub e3: int8,
    pub e12: int8,
    pub e23: int8,
    pub e31: int8,
    pub e123: int8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3int8__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m3int8__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Alignment of m3int8__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m3int8__bindgen_ty_1__bindgen_ty_3>() - 1usize];
    ["Offset of field: m3int8__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m3int8__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m3int8__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m3int8__bindgen_ty_1__bindgen_ty_3, e1) - 1usize];
    ["Offset of field: m3int8__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m3int8__bindgen_ty_1__bindgen_ty_3, e2) - 2usize];
    ["Offset of field: m3int8__bindgen_ty_1__bindgen_ty_3::e3"]
        [::std::mem::offset_of!(m3int8__bindgen_ty_1__bindgen_ty_3, e3) - 3usize];
    ["Offset of field: m3int8__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m3int8__bindgen_ty_1__bindgen_ty_3, e12) - 4usize];
    ["Offset of field: m3int8__bindgen_ty_1__bindgen_ty_3::e23"]
        [::std::mem::offset_of!(m3int8__bindgen_ty_1__bindgen_ty_3, e23) - 5usize];
    ["Offset of field: m3int8__bindgen_ty_1__bindgen_ty_3::e31"]
        [::std::mem::offset_of!(m3int8__bindgen_ty_1__bindgen_ty_3, e31) - 6usize];
    ["Offset of field: m3int8__bindgen_ty_1__bindgen_ty_3::e123"]
        [::std::mem::offset_of!(m3int8__bindgen_ty_1__bindgen_ty_3, e123) - 7usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3int8__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [int8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3int8__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m3int8__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Alignment of m3int8__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m3int8__bindgen_ty_1__bindgen_ty_4>() - 1usize];
    ["Offset of field: m3int8__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m3int8__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3int8__bindgen_ty_1"][::std::mem::size_of::<m3int8__bindgen_ty_1>() - 8usize];
    ["Alignment of m3int8__bindgen_ty_1"][::std::mem::align_of::<m3int8__bindgen_ty_1>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3int8"][::std::mem::size_of::<m3int8>() - 8usize];
    ["Alignment of m3int8"][::std::mem::align_of::<m3int8>() - 1usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m4int8 {
    pub __bindgen_anon_1: m4int8__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m4int8__bindgen_ty_1 {
    pub __bindgen_anon_1: m4int8__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m4int8__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m4int8__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m4int8__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4int8__bindgen_ty_1__bindgen_ty_1 {
    pub u0: int8,
    pub u1: [int8; 4usize],
    pub u2: [int8; 6usize],
    pub u3: [int8; 4usize],
    pub u4: int8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4int8__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m4int8__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of m4int8__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m4int8__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_1, u1) - 1usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_1, u2) - 5usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_1::u3"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_1, u3) - 11usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_1::u4"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_1, u4) - 15usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4int8__bindgen_ty_1__bindgen_ty_2 {
    pub a: int8,
    pub x: int8,
    pub y: int8,
    pub z: int8,
    pub v: int8,
    pub xy: int8,
    pub yz: int8,
    pub zv: int8,
    pub vx: int8,
    pub xz: int8,
    pub yv: int8,
    pub xyz: int8,
    pub yzv: int8,
    pub zvx: int8,
    pub vxy: int8,
    pub i: int8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4int8__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m4int8__bindgen_ty_1__bindgen_ty_2>() - 16usize];
    ["Alignment of m4int8__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m4int8__bindgen_ty_1__bindgen_ty_2>() - 1usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_2, x) - 1usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_2, y) - 2usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_2::z"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_2, z) - 3usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_2::v"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_2, v) - 4usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_2::xy"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_2, xy) - 5usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_2::yz"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_2, yz) - 6usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_2::zv"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_2, zv) - 7usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_2::vx"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_2, vx) - 8usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_2::xz"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_2, xz) - 9usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_2::yv"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_2, yv) - 10usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_2::xyz"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_2, xyz) - 11usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_2::yzv"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_2, yzv) - 12usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_2::zvx"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_2, zvx) - 13usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_2::vxy"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_2, vxy) - 14usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_2, i) - 15usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4int8__bindgen_ty_1__bindgen_ty_3 {
    pub e: int8,
    pub e1: int8,
    pub e2: int8,
    pub e3: int8,
    pub e4: int8,
    pub e12: int8,
    pub e23: int8,
    pub e34: int8,
    pub e41: int8,
    pub e13: int8,
    pub e24: int8,
    pub e123: int8,
    pub e234: int8,
    pub e341: int8,
    pub e412: int8,
    pub e1234: int8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4int8__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m4int8__bindgen_ty_1__bindgen_ty_3>() - 16usize];
    ["Alignment of m4int8__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m4int8__bindgen_ty_1__bindgen_ty_3>() - 1usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_3, e1) - 1usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_3, e2) - 2usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_3::e3"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_3, e3) - 3usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_3::e4"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_3, e4) - 4usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_3, e12) - 5usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_3::e23"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_3, e23) - 6usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_3::e34"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_3, e34) - 7usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_3::e41"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_3, e41) - 8usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_3::e13"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_3, e13) - 9usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_3::e24"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_3, e24) - 10usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_3::e123"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_3, e123) - 11usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_3::e234"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_3, e234) - 12usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_3::e341"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_3, e341) - 13usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_3::e412"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_3, e412) - 14usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_3::e1234"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_3, e1234) - 15usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4int8__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [int8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4int8__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m4int8__bindgen_ty_1__bindgen_ty_4>() - 16usize];
    ["Alignment of m4int8__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m4int8__bindgen_ty_1__bindgen_ty_4>() - 1usize];
    ["Offset of field: m4int8__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m4int8__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4int8__bindgen_ty_1"][::std::mem::size_of::<m4int8__bindgen_ty_1>() - 16usize];
    ["Alignment of m4int8__bindgen_ty_1"][::std::mem::align_of::<m4int8__bindgen_ty_1>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4int8"][::std::mem::size_of::<m4int8>() - 16usize];
    ["Alignment of m4int8"][::std::mem::align_of::<m4int8>() - 1usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m5int8 {
    pub __bindgen_anon_1: m5int8__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m5int8__bindgen_ty_1 {
    pub __bindgen_anon_1: m5int8__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m5int8__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m5int8__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m5int8__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5int8__bindgen_ty_1__bindgen_ty_1 {
    pub u0: int8,
    pub u1: [int8; 5usize],
    pub u2: [int8; 10usize],
    pub u3: [int8; 10usize],
    pub u4: [int8; 5usize],
    pub u5: int8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5int8__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m5int8__bindgen_ty_1__bindgen_ty_1>() - 32usize];
    ["Alignment of m5int8__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m5int8__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_1, u1) - 1usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_1, u2) - 6usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_1::u3"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_1, u3) - 16usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_1::u4"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_1, u4) - 26usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_1::u5"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_1, u5) - 31usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5int8__bindgen_ty_1__bindgen_ty_2 {
    pub a: int8,
    pub x: int8,
    pub y: int8,
    pub z: int8,
    pub v: int8,
    pub w: int8,
    pub xy: int8,
    pub yz: int8,
    pub zv: int8,
    pub vw: int8,
    pub wx: int8,
    pub xz: int8,
    pub yv: int8,
    pub zw: int8,
    pub vx: int8,
    pub wy: int8,
    pub xyz: int8,
    pub yzv: int8,
    pub zvw: int8,
    pub vwx: int8,
    pub wxy: int8,
    pub xyv: int8,
    pub yzw: int8,
    pub zvx: int8,
    pub vwy: int8,
    pub wxz: int8,
    pub xyzv: int8,
    pub yzvw: int8,
    pub zvwx: int8,
    pub vwxy: int8,
    pub wxyz: int8,
    pub i: int8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5int8__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m5int8__bindgen_ty_1__bindgen_ty_2>() - 32usize];
    ["Alignment of m5int8__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m5int8__bindgen_ty_1__bindgen_ty_2>() - 1usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, x) - 1usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, y) - 2usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::z"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, z) - 3usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::v"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, v) - 4usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::w"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, w) - 5usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::xy"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, xy) - 6usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::yz"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, yz) - 7usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::zv"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, zv) - 8usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::vw"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, vw) - 9usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::wx"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, wx) - 10usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::xz"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, xz) - 11usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::yv"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, yv) - 12usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::zw"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, zw) - 13usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::vx"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, vx) - 14usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::wy"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, wy) - 15usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::xyz"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, xyz) - 16usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::yzv"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, yzv) - 17usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::zvw"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, zvw) - 18usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::vwx"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, vwx) - 19usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::wxy"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, wxy) - 20usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::xyv"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, xyv) - 21usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::yzw"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, yzw) - 22usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::zvx"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, zvx) - 23usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::vwy"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, vwy) - 24usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::wxz"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, wxz) - 25usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::xyzv"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, xyzv) - 26usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::yzvw"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, yzvw) - 27usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::zvwx"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, zvwx) - 28usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::vwxy"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, vwxy) - 29usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::wxyz"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, wxyz) - 30usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_2, i) - 31usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5int8__bindgen_ty_1__bindgen_ty_3 {
    pub e: int8,
    pub e1: int8,
    pub e2: int8,
    pub e3: int8,
    pub e4: int8,
    pub e5: int8,
    pub e12: int8,
    pub e23: int8,
    pub e34: int8,
    pub e45: int8,
    pub e51: int8,
    pub e13: int8,
    pub e24: int8,
    pub e35: int8,
    pub e41: int8,
    pub e52: int8,
    pub e123: int8,
    pub e234: int8,
    pub e345: int8,
    pub e451: int8,
    pub e512: int8,
    pub e124: int8,
    pub e235: int8,
    pub e341: int8,
    pub e452: int8,
    pub e513: int8,
    pub e1234: int8,
    pub e2345: int8,
    pub e3451: int8,
    pub e4512: int8,
    pub e5123: int8,
    pub e12345: int8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5int8__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m5int8__bindgen_ty_1__bindgen_ty_3>() - 32usize];
    ["Alignment of m5int8__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m5int8__bindgen_ty_1__bindgen_ty_3>() - 1usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e1) - 1usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e2) - 2usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e3"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e3) - 3usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e4"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e4) - 4usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e5"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e5) - 5usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e12) - 6usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e23"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e23) - 7usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e34"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e34) - 8usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e45"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e45) - 9usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e51"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e51) - 10usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e13"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e13) - 11usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e24"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e24) - 12usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e35"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e35) - 13usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e41"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e41) - 14usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e52"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e52) - 15usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e123"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e123) - 16usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e234"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e234) - 17usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e345"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e345) - 18usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e451"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e451) - 19usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e512"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e512) - 20usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e124"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e124) - 21usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e235"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e235) - 22usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e341"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e341) - 23usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e452"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e452) - 24usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e513"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e513) - 25usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e1234"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e1234) - 26usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e2345"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e2345) - 27usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e3451"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e3451) - 28usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e4512"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e4512) - 29usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e5123"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e5123) - 30usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_3::e12345"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_3, e12345) - 31usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5int8__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [int8; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5int8__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m5int8__bindgen_ty_1__bindgen_ty_4>() - 32usize];
    ["Alignment of m5int8__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m5int8__bindgen_ty_1__bindgen_ty_4>() - 1usize];
    ["Offset of field: m5int8__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m5int8__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5int8__bindgen_ty_1"][::std::mem::size_of::<m5int8__bindgen_ty_1>() - 32usize];
    ["Alignment of m5int8__bindgen_ty_1"][::std::mem::align_of::<m5int8__bindgen_ty_1>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5int8"][::std::mem::size_of::<m5int8>() - 32usize];
    ["Alignment of m5int8"][::std::mem::align_of::<m5int8>() - 1usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m2unt8 {
    pub __bindgen_anon_1: m2unt8__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m2unt8__bindgen_ty_1 {
    pub __bindgen_anon_1: m2unt8__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m2unt8__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m2unt8__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m2unt8__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2unt8__bindgen_ty_1__bindgen_ty_1 {
    pub u0: unt8,
    pub u1: [unt8; 2usize],
    pub u2: unt8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2unt8__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m2unt8__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of m2unt8__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m2unt8__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: m2unt8__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m2unt8__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m2unt8__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m2unt8__bindgen_ty_1__bindgen_ty_1, u1) - 1usize];
    ["Offset of field: m2unt8__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m2unt8__bindgen_ty_1__bindgen_ty_1, u2) - 3usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2unt8__bindgen_ty_1__bindgen_ty_2 {
    pub a: unt8,
    pub x: unt8,
    pub y: unt8,
    pub i: unt8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2unt8__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m2unt8__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Alignment of m2unt8__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m2unt8__bindgen_ty_1__bindgen_ty_2>() - 1usize];
    ["Offset of field: m2unt8__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m2unt8__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m2unt8__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m2unt8__bindgen_ty_1__bindgen_ty_2, x) - 1usize];
    ["Offset of field: m2unt8__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m2unt8__bindgen_ty_1__bindgen_ty_2, y) - 2usize];
    ["Offset of field: m2unt8__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m2unt8__bindgen_ty_1__bindgen_ty_2, i) - 3usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2unt8__bindgen_ty_1__bindgen_ty_3 {
    pub e: unt8,
    pub e1: unt8,
    pub e2: unt8,
    pub e12: unt8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2unt8__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m2unt8__bindgen_ty_1__bindgen_ty_3>() - 4usize];
    ["Alignment of m2unt8__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m2unt8__bindgen_ty_1__bindgen_ty_3>() - 1usize];
    ["Offset of field: m2unt8__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m2unt8__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m2unt8__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m2unt8__bindgen_ty_1__bindgen_ty_3, e1) - 1usize];
    ["Offset of field: m2unt8__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m2unt8__bindgen_ty_1__bindgen_ty_3, e2) - 2usize];
    ["Offset of field: m2unt8__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m2unt8__bindgen_ty_1__bindgen_ty_3, e12) - 3usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2unt8__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [unt8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2unt8__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m2unt8__bindgen_ty_1__bindgen_ty_4>() - 4usize];
    ["Alignment of m2unt8__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m2unt8__bindgen_ty_1__bindgen_ty_4>() - 1usize];
    ["Offset of field: m2unt8__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m2unt8__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2unt8__bindgen_ty_1"][::std::mem::size_of::<m2unt8__bindgen_ty_1>() - 4usize];
    ["Alignment of m2unt8__bindgen_ty_1"][::std::mem::align_of::<m2unt8__bindgen_ty_1>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2unt8"][::std::mem::size_of::<m2unt8>() - 4usize];
    ["Alignment of m2unt8"][::std::mem::align_of::<m2unt8>() - 1usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m3unt8 {
    pub __bindgen_anon_1: m3unt8__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m3unt8__bindgen_ty_1 {
    pub __bindgen_anon_1: m3unt8__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m3unt8__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m3unt8__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m3unt8__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3unt8__bindgen_ty_1__bindgen_ty_1 {
    pub u0: unt8,
    pub u1: [unt8; 3usize],
    pub u2: [unt8; 3usize],
    pub u3: unt8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3unt8__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m3unt8__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of m3unt8__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m3unt8__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: m3unt8__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m3unt8__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m3unt8__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m3unt8__bindgen_ty_1__bindgen_ty_1, u1) - 1usize];
    ["Offset of field: m3unt8__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m3unt8__bindgen_ty_1__bindgen_ty_1, u2) - 4usize];
    ["Offset of field: m3unt8__bindgen_ty_1__bindgen_ty_1::u3"]
        [::std::mem::offset_of!(m3unt8__bindgen_ty_1__bindgen_ty_1, u3) - 7usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3unt8__bindgen_ty_1__bindgen_ty_2 {
    pub a: unt8,
    pub x: unt8,
    pub y: unt8,
    pub z: unt8,
    pub xy: unt8,
    pub yz: unt8,
    pub zx: unt8,
    pub i: unt8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3unt8__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m3unt8__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Alignment of m3unt8__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m3unt8__bindgen_ty_1__bindgen_ty_2>() - 1usize];
    ["Offset of field: m3unt8__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m3unt8__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m3unt8__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m3unt8__bindgen_ty_1__bindgen_ty_2, x) - 1usize];
    ["Offset of field: m3unt8__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m3unt8__bindgen_ty_1__bindgen_ty_2, y) - 2usize];
    ["Offset of field: m3unt8__bindgen_ty_1__bindgen_ty_2::z"]
        [::std::mem::offset_of!(m3unt8__bindgen_ty_1__bindgen_ty_2, z) - 3usize];
    ["Offset of field: m3unt8__bindgen_ty_1__bindgen_ty_2::xy"]
        [::std::mem::offset_of!(m3unt8__bindgen_ty_1__bindgen_ty_2, xy) - 4usize];
    ["Offset of field: m3unt8__bindgen_ty_1__bindgen_ty_2::yz"]
        [::std::mem::offset_of!(m3unt8__bindgen_ty_1__bindgen_ty_2, yz) - 5usize];
    ["Offset of field: m3unt8__bindgen_ty_1__bindgen_ty_2::zx"]
        [::std::mem::offset_of!(m3unt8__bindgen_ty_1__bindgen_ty_2, zx) - 6usize];
    ["Offset of field: m3unt8__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m3unt8__bindgen_ty_1__bindgen_ty_2, i) - 7usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3unt8__bindgen_ty_1__bindgen_ty_3 {
    pub e: unt8,
    pub e1: unt8,
    pub e2: unt8,
    pub e3: unt8,
    pub e12: unt8,
    pub e23: unt8,
    pub e31: unt8,
    pub e123: unt8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3unt8__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m3unt8__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Alignment of m3unt8__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m3unt8__bindgen_ty_1__bindgen_ty_3>() - 1usize];
    ["Offset of field: m3unt8__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m3unt8__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m3unt8__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m3unt8__bindgen_ty_1__bindgen_ty_3, e1) - 1usize];
    ["Offset of field: m3unt8__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m3unt8__bindgen_ty_1__bindgen_ty_3, e2) - 2usize];
    ["Offset of field: m3unt8__bindgen_ty_1__bindgen_ty_3::e3"]
        [::std::mem::offset_of!(m3unt8__bindgen_ty_1__bindgen_ty_3, e3) - 3usize];
    ["Offset of field: m3unt8__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m3unt8__bindgen_ty_1__bindgen_ty_3, e12) - 4usize];
    ["Offset of field: m3unt8__bindgen_ty_1__bindgen_ty_3::e23"]
        [::std::mem::offset_of!(m3unt8__bindgen_ty_1__bindgen_ty_3, e23) - 5usize];
    ["Offset of field: m3unt8__bindgen_ty_1__bindgen_ty_3::e31"]
        [::std::mem::offset_of!(m3unt8__bindgen_ty_1__bindgen_ty_3, e31) - 6usize];
    ["Offset of field: m3unt8__bindgen_ty_1__bindgen_ty_3::e123"]
        [::std::mem::offset_of!(m3unt8__bindgen_ty_1__bindgen_ty_3, e123) - 7usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3unt8__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [unt8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3unt8__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m3unt8__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Alignment of m3unt8__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m3unt8__bindgen_ty_1__bindgen_ty_4>() - 1usize];
    ["Offset of field: m3unt8__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m3unt8__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3unt8__bindgen_ty_1"][::std::mem::size_of::<m3unt8__bindgen_ty_1>() - 8usize];
    ["Alignment of m3unt8__bindgen_ty_1"][::std::mem::align_of::<m3unt8__bindgen_ty_1>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3unt8"][::std::mem::size_of::<m3unt8>() - 8usize];
    ["Alignment of m3unt8"][::std::mem::align_of::<m3unt8>() - 1usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m4unt8 {
    pub __bindgen_anon_1: m4unt8__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m4unt8__bindgen_ty_1 {
    pub __bindgen_anon_1: m4unt8__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m4unt8__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m4unt8__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m4unt8__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4unt8__bindgen_ty_1__bindgen_ty_1 {
    pub u0: unt8,
    pub u1: [unt8; 4usize],
    pub u2: [unt8; 6usize],
    pub u3: [unt8; 4usize],
    pub u4: unt8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4unt8__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m4unt8__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of m4unt8__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m4unt8__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_1, u1) - 1usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_1, u2) - 5usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_1::u3"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_1, u3) - 11usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_1::u4"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_1, u4) - 15usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4unt8__bindgen_ty_1__bindgen_ty_2 {
    pub a: unt8,
    pub x: unt8,
    pub y: unt8,
    pub z: unt8,
    pub v: unt8,
    pub xy: unt8,
    pub yz: unt8,
    pub zv: unt8,
    pub vx: unt8,
    pub xz: unt8,
    pub yv: unt8,
    pub xyz: unt8,
    pub yzv: unt8,
    pub zvx: unt8,
    pub vxy: unt8,
    pub i: unt8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4unt8__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m4unt8__bindgen_ty_1__bindgen_ty_2>() - 16usize];
    ["Alignment of m4unt8__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m4unt8__bindgen_ty_1__bindgen_ty_2>() - 1usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_2, x) - 1usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_2, y) - 2usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_2::z"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_2, z) - 3usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_2::v"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_2, v) - 4usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_2::xy"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_2, xy) - 5usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_2::yz"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_2, yz) - 6usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_2::zv"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_2, zv) - 7usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_2::vx"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_2, vx) - 8usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_2::xz"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_2, xz) - 9usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_2::yv"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_2, yv) - 10usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_2::xyz"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_2, xyz) - 11usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_2::yzv"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_2, yzv) - 12usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_2::zvx"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_2, zvx) - 13usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_2::vxy"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_2, vxy) - 14usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_2, i) - 15usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4unt8__bindgen_ty_1__bindgen_ty_3 {
    pub e: unt8,
    pub e1: unt8,
    pub e2: unt8,
    pub e3: unt8,
    pub e4: unt8,
    pub e12: unt8,
    pub e23: unt8,
    pub e34: unt8,
    pub e41: unt8,
    pub e13: unt8,
    pub e24: unt8,
    pub e123: unt8,
    pub e234: unt8,
    pub e341: unt8,
    pub e412: unt8,
    pub e1234: unt8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4unt8__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m4unt8__bindgen_ty_1__bindgen_ty_3>() - 16usize];
    ["Alignment of m4unt8__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m4unt8__bindgen_ty_1__bindgen_ty_3>() - 1usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_3, e1) - 1usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_3, e2) - 2usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_3::e3"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_3, e3) - 3usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_3::e4"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_3, e4) - 4usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_3, e12) - 5usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_3::e23"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_3, e23) - 6usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_3::e34"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_3, e34) - 7usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_3::e41"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_3, e41) - 8usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_3::e13"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_3, e13) - 9usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_3::e24"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_3, e24) - 10usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_3::e123"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_3, e123) - 11usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_3::e234"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_3, e234) - 12usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_3::e341"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_3, e341) - 13usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_3::e412"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_3, e412) - 14usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_3::e1234"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_3, e1234) - 15usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4unt8__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [unt8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4unt8__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m4unt8__bindgen_ty_1__bindgen_ty_4>() - 16usize];
    ["Alignment of m4unt8__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m4unt8__bindgen_ty_1__bindgen_ty_4>() - 1usize];
    ["Offset of field: m4unt8__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m4unt8__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4unt8__bindgen_ty_1"][::std::mem::size_of::<m4unt8__bindgen_ty_1>() - 16usize];
    ["Alignment of m4unt8__bindgen_ty_1"][::std::mem::align_of::<m4unt8__bindgen_ty_1>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4unt8"][::std::mem::size_of::<m4unt8>() - 16usize];
    ["Alignment of m4unt8"][::std::mem::align_of::<m4unt8>() - 1usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m5unt8 {
    pub __bindgen_anon_1: m5unt8__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m5unt8__bindgen_ty_1 {
    pub __bindgen_anon_1: m5unt8__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m5unt8__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m5unt8__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m5unt8__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5unt8__bindgen_ty_1__bindgen_ty_1 {
    pub u0: unt8,
    pub u1: [unt8; 5usize],
    pub u2: [unt8; 10usize],
    pub u3: [unt8; 10usize],
    pub u4: [unt8; 5usize],
    pub u5: unt8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5unt8__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m5unt8__bindgen_ty_1__bindgen_ty_1>() - 32usize];
    ["Alignment of m5unt8__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m5unt8__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_1, u1) - 1usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_1, u2) - 6usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_1::u3"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_1, u3) - 16usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_1::u4"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_1, u4) - 26usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_1::u5"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_1, u5) - 31usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5unt8__bindgen_ty_1__bindgen_ty_2 {
    pub a: unt8,
    pub x: unt8,
    pub y: unt8,
    pub z: unt8,
    pub v: unt8,
    pub w: unt8,
    pub xy: unt8,
    pub yz: unt8,
    pub zv: unt8,
    pub vw: unt8,
    pub wx: unt8,
    pub xz: unt8,
    pub yv: unt8,
    pub zw: unt8,
    pub vx: unt8,
    pub wy: unt8,
    pub xyz: unt8,
    pub yzv: unt8,
    pub zvw: unt8,
    pub vwx: unt8,
    pub wxy: unt8,
    pub xyv: unt8,
    pub yzw: unt8,
    pub zvx: unt8,
    pub vwy: unt8,
    pub wxz: unt8,
    pub xyzv: unt8,
    pub yzvw: unt8,
    pub zvwx: unt8,
    pub vwxy: unt8,
    pub wxyz: unt8,
    pub i: unt8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5unt8__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m5unt8__bindgen_ty_1__bindgen_ty_2>() - 32usize];
    ["Alignment of m5unt8__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m5unt8__bindgen_ty_1__bindgen_ty_2>() - 1usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, x) - 1usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, y) - 2usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::z"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, z) - 3usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::v"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, v) - 4usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::w"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, w) - 5usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::xy"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, xy) - 6usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::yz"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, yz) - 7usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::zv"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, zv) - 8usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::vw"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, vw) - 9usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::wx"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, wx) - 10usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::xz"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, xz) - 11usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::yv"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, yv) - 12usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::zw"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, zw) - 13usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::vx"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, vx) - 14usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::wy"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, wy) - 15usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::xyz"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, xyz) - 16usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::yzv"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, yzv) - 17usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::zvw"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, zvw) - 18usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::vwx"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, vwx) - 19usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::wxy"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, wxy) - 20usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::xyv"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, xyv) - 21usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::yzw"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, yzw) - 22usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::zvx"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, zvx) - 23usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::vwy"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, vwy) - 24usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::wxz"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, wxz) - 25usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::xyzv"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, xyzv) - 26usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::yzvw"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, yzvw) - 27usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::zvwx"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, zvwx) - 28usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::vwxy"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, vwxy) - 29usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::wxyz"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, wxyz) - 30usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_2, i) - 31usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5unt8__bindgen_ty_1__bindgen_ty_3 {
    pub e: unt8,
    pub e1: unt8,
    pub e2: unt8,
    pub e3: unt8,
    pub e4: unt8,
    pub e5: unt8,
    pub e12: unt8,
    pub e23: unt8,
    pub e34: unt8,
    pub e45: unt8,
    pub e51: unt8,
    pub e13: unt8,
    pub e24: unt8,
    pub e35: unt8,
    pub e41: unt8,
    pub e52: unt8,
    pub e123: unt8,
    pub e234: unt8,
    pub e345: unt8,
    pub e451: unt8,
    pub e512: unt8,
    pub e124: unt8,
    pub e235: unt8,
    pub e341: unt8,
    pub e452: unt8,
    pub e513: unt8,
    pub e1234: unt8,
    pub e2345: unt8,
    pub e3451: unt8,
    pub e4512: unt8,
    pub e5123: unt8,
    pub e12345: unt8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5unt8__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m5unt8__bindgen_ty_1__bindgen_ty_3>() - 32usize];
    ["Alignment of m5unt8__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m5unt8__bindgen_ty_1__bindgen_ty_3>() - 1usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e1) - 1usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e2) - 2usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e3"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e3) - 3usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e4"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e4) - 4usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e5"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e5) - 5usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e12) - 6usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e23"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e23) - 7usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e34"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e34) - 8usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e45"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e45) - 9usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e51"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e51) - 10usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e13"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e13) - 11usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e24"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e24) - 12usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e35"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e35) - 13usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e41"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e41) - 14usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e52"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e52) - 15usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e123"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e123) - 16usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e234"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e234) - 17usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e345"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e345) - 18usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e451"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e451) - 19usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e512"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e512) - 20usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e124"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e124) - 21usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e235"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e235) - 22usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e341"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e341) - 23usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e452"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e452) - 24usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e513"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e513) - 25usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e1234"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e1234) - 26usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e2345"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e2345) - 27usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e3451"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e3451) - 28usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e4512"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e4512) - 29usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e5123"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e5123) - 30usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_3::e12345"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_3, e12345) - 31usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5unt8__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [unt8; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5unt8__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m5unt8__bindgen_ty_1__bindgen_ty_4>() - 32usize];
    ["Alignment of m5unt8__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m5unt8__bindgen_ty_1__bindgen_ty_4>() - 1usize];
    ["Offset of field: m5unt8__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m5unt8__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5unt8__bindgen_ty_1"][::std::mem::size_of::<m5unt8__bindgen_ty_1>() - 32usize];
    ["Alignment of m5unt8__bindgen_ty_1"][::std::mem::align_of::<m5unt8__bindgen_ty_1>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5unt8"][::std::mem::size_of::<m5unt8>() - 32usize];
    ["Alignment of m5unt8"][::std::mem::align_of::<m5unt8>() - 1usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m2int16 {
    pub __bindgen_anon_1: m2int16__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m2int16__bindgen_ty_1 {
    pub __bindgen_anon_1: m2int16__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m2int16__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m2int16__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m2int16__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2int16__bindgen_ty_1__bindgen_ty_1 {
    pub u0: int16,
    pub u1: [int16; 2usize],
    pub u2: int16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2int16__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m2int16__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of m2int16__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m2int16__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: m2int16__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m2int16__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m2int16__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m2int16__bindgen_ty_1__bindgen_ty_1, u1) - 2usize];
    ["Offset of field: m2int16__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m2int16__bindgen_ty_1__bindgen_ty_1, u2) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2int16__bindgen_ty_1__bindgen_ty_2 {
    pub a: int16,
    pub x: int16,
    pub y: int16,
    pub i: int16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2int16__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m2int16__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Alignment of m2int16__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m2int16__bindgen_ty_1__bindgen_ty_2>() - 2usize];
    ["Offset of field: m2int16__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m2int16__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m2int16__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m2int16__bindgen_ty_1__bindgen_ty_2, x) - 2usize];
    ["Offset of field: m2int16__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m2int16__bindgen_ty_1__bindgen_ty_2, y) - 4usize];
    ["Offset of field: m2int16__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m2int16__bindgen_ty_1__bindgen_ty_2, i) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2int16__bindgen_ty_1__bindgen_ty_3 {
    pub e: int16,
    pub e1: int16,
    pub e2: int16,
    pub e12: int16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2int16__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m2int16__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Alignment of m2int16__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m2int16__bindgen_ty_1__bindgen_ty_3>() - 2usize];
    ["Offset of field: m2int16__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m2int16__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m2int16__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m2int16__bindgen_ty_1__bindgen_ty_3, e1) - 2usize];
    ["Offset of field: m2int16__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m2int16__bindgen_ty_1__bindgen_ty_3, e2) - 4usize];
    ["Offset of field: m2int16__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m2int16__bindgen_ty_1__bindgen_ty_3, e12) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2int16__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [int16; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2int16__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m2int16__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Alignment of m2int16__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m2int16__bindgen_ty_1__bindgen_ty_4>() - 2usize];
    ["Offset of field: m2int16__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m2int16__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2int16__bindgen_ty_1"][::std::mem::size_of::<m2int16__bindgen_ty_1>() - 8usize];
    ["Alignment of m2int16__bindgen_ty_1"]
        [::std::mem::align_of::<m2int16__bindgen_ty_1>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2int16"][::std::mem::size_of::<m2int16>() - 8usize];
    ["Alignment of m2int16"][::std::mem::align_of::<m2int16>() - 2usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m3int16 {
    pub __bindgen_anon_1: m3int16__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m3int16__bindgen_ty_1 {
    pub __bindgen_anon_1: m3int16__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m3int16__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m3int16__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m3int16__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3int16__bindgen_ty_1__bindgen_ty_1 {
    pub u0: int16,
    pub u1: [int16; 3usize],
    pub u2: [int16; 3usize],
    pub u3: int16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3int16__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m3int16__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of m3int16__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m3int16__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: m3int16__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m3int16__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m3int16__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m3int16__bindgen_ty_1__bindgen_ty_1, u1) - 2usize];
    ["Offset of field: m3int16__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m3int16__bindgen_ty_1__bindgen_ty_1, u2) - 8usize];
    ["Offset of field: m3int16__bindgen_ty_1__bindgen_ty_1::u3"]
        [::std::mem::offset_of!(m3int16__bindgen_ty_1__bindgen_ty_1, u3) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3int16__bindgen_ty_1__bindgen_ty_2 {
    pub a: int16,
    pub x: int16,
    pub y: int16,
    pub z: int16,
    pub xy: int16,
    pub yz: int16,
    pub zx: int16,
    pub i: int16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3int16__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m3int16__bindgen_ty_1__bindgen_ty_2>() - 16usize];
    ["Alignment of m3int16__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m3int16__bindgen_ty_1__bindgen_ty_2>() - 2usize];
    ["Offset of field: m3int16__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m3int16__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m3int16__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m3int16__bindgen_ty_1__bindgen_ty_2, x) - 2usize];
    ["Offset of field: m3int16__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m3int16__bindgen_ty_1__bindgen_ty_2, y) - 4usize];
    ["Offset of field: m3int16__bindgen_ty_1__bindgen_ty_2::z"]
        [::std::mem::offset_of!(m3int16__bindgen_ty_1__bindgen_ty_2, z) - 6usize];
    ["Offset of field: m3int16__bindgen_ty_1__bindgen_ty_2::xy"]
        [::std::mem::offset_of!(m3int16__bindgen_ty_1__bindgen_ty_2, xy) - 8usize];
    ["Offset of field: m3int16__bindgen_ty_1__bindgen_ty_2::yz"]
        [::std::mem::offset_of!(m3int16__bindgen_ty_1__bindgen_ty_2, yz) - 10usize];
    ["Offset of field: m3int16__bindgen_ty_1__bindgen_ty_2::zx"]
        [::std::mem::offset_of!(m3int16__bindgen_ty_1__bindgen_ty_2, zx) - 12usize];
    ["Offset of field: m3int16__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m3int16__bindgen_ty_1__bindgen_ty_2, i) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3int16__bindgen_ty_1__bindgen_ty_3 {
    pub e: int16,
    pub e1: int16,
    pub e2: int16,
    pub e3: int16,
    pub e12: int16,
    pub e23: int16,
    pub e31: int16,
    pub e123: int16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3int16__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m3int16__bindgen_ty_1__bindgen_ty_3>() - 16usize];
    ["Alignment of m3int16__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m3int16__bindgen_ty_1__bindgen_ty_3>() - 2usize];
    ["Offset of field: m3int16__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m3int16__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m3int16__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m3int16__bindgen_ty_1__bindgen_ty_3, e1) - 2usize];
    ["Offset of field: m3int16__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m3int16__bindgen_ty_1__bindgen_ty_3, e2) - 4usize];
    ["Offset of field: m3int16__bindgen_ty_1__bindgen_ty_3::e3"]
        [::std::mem::offset_of!(m3int16__bindgen_ty_1__bindgen_ty_3, e3) - 6usize];
    ["Offset of field: m3int16__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m3int16__bindgen_ty_1__bindgen_ty_3, e12) - 8usize];
    ["Offset of field: m3int16__bindgen_ty_1__bindgen_ty_3::e23"]
        [::std::mem::offset_of!(m3int16__bindgen_ty_1__bindgen_ty_3, e23) - 10usize];
    ["Offset of field: m3int16__bindgen_ty_1__bindgen_ty_3::e31"]
        [::std::mem::offset_of!(m3int16__bindgen_ty_1__bindgen_ty_3, e31) - 12usize];
    ["Offset of field: m3int16__bindgen_ty_1__bindgen_ty_3::e123"]
        [::std::mem::offset_of!(m3int16__bindgen_ty_1__bindgen_ty_3, e123) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3int16__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [int16; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3int16__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m3int16__bindgen_ty_1__bindgen_ty_4>() - 16usize];
    ["Alignment of m3int16__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m3int16__bindgen_ty_1__bindgen_ty_4>() - 2usize];
    ["Offset of field: m3int16__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m3int16__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3int16__bindgen_ty_1"][::std::mem::size_of::<m3int16__bindgen_ty_1>() - 16usize];
    ["Alignment of m3int16__bindgen_ty_1"]
        [::std::mem::align_of::<m3int16__bindgen_ty_1>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3int16"][::std::mem::size_of::<m3int16>() - 16usize];
    ["Alignment of m3int16"][::std::mem::align_of::<m3int16>() - 2usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m4int16 {
    pub __bindgen_anon_1: m4int16__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m4int16__bindgen_ty_1 {
    pub __bindgen_anon_1: m4int16__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m4int16__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m4int16__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m4int16__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4int16__bindgen_ty_1__bindgen_ty_1 {
    pub u0: int16,
    pub u1: [int16; 4usize],
    pub u2: [int16; 6usize],
    pub u3: [int16; 4usize],
    pub u4: int16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4int16__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m4int16__bindgen_ty_1__bindgen_ty_1>() - 32usize];
    ["Alignment of m4int16__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m4int16__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_1, u1) - 2usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_1, u2) - 10usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_1::u3"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_1, u3) - 22usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_1::u4"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_1, u4) - 30usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4int16__bindgen_ty_1__bindgen_ty_2 {
    pub a: int16,
    pub x: int16,
    pub y: int16,
    pub z: int16,
    pub v: int16,
    pub xy: int16,
    pub yz: int16,
    pub zv: int16,
    pub vx: int16,
    pub xz: int16,
    pub yv: int16,
    pub xyz: int16,
    pub yzv: int16,
    pub zvx: int16,
    pub vxy: int16,
    pub i: int16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4int16__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m4int16__bindgen_ty_1__bindgen_ty_2>() - 32usize];
    ["Alignment of m4int16__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m4int16__bindgen_ty_1__bindgen_ty_2>() - 2usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_2, x) - 2usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_2, y) - 4usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_2::z"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_2, z) - 6usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_2::v"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_2, v) - 8usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_2::xy"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_2, xy) - 10usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_2::yz"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_2, yz) - 12usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_2::zv"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_2, zv) - 14usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_2::vx"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_2, vx) - 16usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_2::xz"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_2, xz) - 18usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_2::yv"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_2, yv) - 20usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_2::xyz"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_2, xyz) - 22usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_2::yzv"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_2, yzv) - 24usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_2::zvx"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_2, zvx) - 26usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_2::vxy"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_2, vxy) - 28usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_2, i) - 30usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4int16__bindgen_ty_1__bindgen_ty_3 {
    pub e: int16,
    pub e1: int16,
    pub e2: int16,
    pub e3: int16,
    pub e4: int16,
    pub e12: int16,
    pub e23: int16,
    pub e34: int16,
    pub e41: int16,
    pub e13: int16,
    pub e24: int16,
    pub e123: int16,
    pub e234: int16,
    pub e341: int16,
    pub e412: int16,
    pub e1234: int16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4int16__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m4int16__bindgen_ty_1__bindgen_ty_3>() - 32usize];
    ["Alignment of m4int16__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m4int16__bindgen_ty_1__bindgen_ty_3>() - 2usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_3, e1) - 2usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_3, e2) - 4usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_3::e3"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_3, e3) - 6usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_3::e4"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_3, e4) - 8usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_3, e12) - 10usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_3::e23"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_3, e23) - 12usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_3::e34"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_3, e34) - 14usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_3::e41"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_3, e41) - 16usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_3::e13"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_3, e13) - 18usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_3::e24"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_3, e24) - 20usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_3::e123"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_3, e123) - 22usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_3::e234"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_3, e234) - 24usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_3::e341"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_3, e341) - 26usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_3::e412"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_3, e412) - 28usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_3::e1234"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_3, e1234) - 30usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4int16__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [int16; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4int16__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m4int16__bindgen_ty_1__bindgen_ty_4>() - 32usize];
    ["Alignment of m4int16__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m4int16__bindgen_ty_1__bindgen_ty_4>() - 2usize];
    ["Offset of field: m4int16__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m4int16__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4int16__bindgen_ty_1"][::std::mem::size_of::<m4int16__bindgen_ty_1>() - 32usize];
    ["Alignment of m4int16__bindgen_ty_1"]
        [::std::mem::align_of::<m4int16__bindgen_ty_1>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4int16"][::std::mem::size_of::<m4int16>() - 32usize];
    ["Alignment of m4int16"][::std::mem::align_of::<m4int16>() - 2usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m5int16 {
    pub __bindgen_anon_1: m5int16__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m5int16__bindgen_ty_1 {
    pub __bindgen_anon_1: m5int16__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m5int16__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m5int16__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m5int16__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5int16__bindgen_ty_1__bindgen_ty_1 {
    pub u0: int16,
    pub u1: [int16; 5usize],
    pub u2: [int16; 10usize],
    pub u3: [int16; 10usize],
    pub u4: [int16; 5usize],
    pub u5: int16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5int16__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m5int16__bindgen_ty_1__bindgen_ty_1>() - 64usize];
    ["Alignment of m5int16__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m5int16__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_1, u1) - 2usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_1, u2) - 12usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_1::u3"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_1, u3) - 32usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_1::u4"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_1, u4) - 52usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_1::u5"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_1, u5) - 62usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5int16__bindgen_ty_1__bindgen_ty_2 {
    pub a: int16,
    pub x: int16,
    pub y: int16,
    pub z: int16,
    pub v: int16,
    pub w: int16,
    pub xy: int16,
    pub yz: int16,
    pub zv: int16,
    pub vw: int16,
    pub wx: int16,
    pub xz: int16,
    pub yv: int16,
    pub zw: int16,
    pub vx: int16,
    pub wy: int16,
    pub xyz: int16,
    pub yzv: int16,
    pub zvw: int16,
    pub vwx: int16,
    pub wxy: int16,
    pub xyv: int16,
    pub yzw: int16,
    pub zvx: int16,
    pub vwy: int16,
    pub wxz: int16,
    pub xyzv: int16,
    pub yzvw: int16,
    pub zvwx: int16,
    pub vwxy: int16,
    pub wxyz: int16,
    pub i: int16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5int16__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m5int16__bindgen_ty_1__bindgen_ty_2>() - 64usize];
    ["Alignment of m5int16__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m5int16__bindgen_ty_1__bindgen_ty_2>() - 2usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, x) - 2usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, y) - 4usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::z"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, z) - 6usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::v"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, v) - 8usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::w"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, w) - 10usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::xy"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, xy) - 12usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::yz"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, yz) - 14usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::zv"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, zv) - 16usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::vw"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, vw) - 18usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::wx"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, wx) - 20usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::xz"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, xz) - 22usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::yv"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, yv) - 24usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::zw"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, zw) - 26usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::vx"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, vx) - 28usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::wy"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, wy) - 30usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::xyz"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, xyz) - 32usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::yzv"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, yzv) - 34usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::zvw"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, zvw) - 36usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::vwx"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, vwx) - 38usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::wxy"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, wxy) - 40usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::xyv"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, xyv) - 42usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::yzw"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, yzw) - 44usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::zvx"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, zvx) - 46usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::vwy"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, vwy) - 48usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::wxz"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, wxz) - 50usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::xyzv"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, xyzv) - 52usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::yzvw"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, yzvw) - 54usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::zvwx"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, zvwx) - 56usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::vwxy"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, vwxy) - 58usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::wxyz"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, wxyz) - 60usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_2, i) - 62usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5int16__bindgen_ty_1__bindgen_ty_3 {
    pub e: int16,
    pub e1: int16,
    pub e2: int16,
    pub e3: int16,
    pub e4: int16,
    pub e5: int16,
    pub e12: int16,
    pub e23: int16,
    pub e34: int16,
    pub e45: int16,
    pub e51: int16,
    pub e13: int16,
    pub e24: int16,
    pub e35: int16,
    pub e41: int16,
    pub e52: int16,
    pub e123: int16,
    pub e234: int16,
    pub e345: int16,
    pub e451: int16,
    pub e512: int16,
    pub e124: int16,
    pub e235: int16,
    pub e341: int16,
    pub e452: int16,
    pub e513: int16,
    pub e1234: int16,
    pub e2345: int16,
    pub e3451: int16,
    pub e4512: int16,
    pub e5123: int16,
    pub e12345: int16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5int16__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m5int16__bindgen_ty_1__bindgen_ty_3>() - 64usize];
    ["Alignment of m5int16__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m5int16__bindgen_ty_1__bindgen_ty_3>() - 2usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e1) - 2usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e2) - 4usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e3"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e3) - 6usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e4"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e4) - 8usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e5"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e5) - 10usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e12) - 12usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e23"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e23) - 14usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e34"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e34) - 16usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e45"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e45) - 18usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e51"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e51) - 20usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e13"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e13) - 22usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e24"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e24) - 24usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e35"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e35) - 26usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e41"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e41) - 28usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e52"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e52) - 30usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e123"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e123) - 32usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e234"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e234) - 34usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e345"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e345) - 36usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e451"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e451) - 38usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e512"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e512) - 40usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e124"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e124) - 42usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e235"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e235) - 44usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e341"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e341) - 46usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e452"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e452) - 48usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e513"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e513) - 50usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e1234"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e1234) - 52usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e2345"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e2345) - 54usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e3451"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e3451) - 56usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e4512"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e4512) - 58usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e5123"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e5123) - 60usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_3::e12345"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_3, e12345) - 62usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5int16__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [int16; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5int16__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m5int16__bindgen_ty_1__bindgen_ty_4>() - 64usize];
    ["Alignment of m5int16__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m5int16__bindgen_ty_1__bindgen_ty_4>() - 2usize];
    ["Offset of field: m5int16__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m5int16__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5int16__bindgen_ty_1"][::std::mem::size_of::<m5int16__bindgen_ty_1>() - 64usize];
    ["Alignment of m5int16__bindgen_ty_1"]
        [::std::mem::align_of::<m5int16__bindgen_ty_1>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5int16"][::std::mem::size_of::<m5int16>() - 64usize];
    ["Alignment of m5int16"][::std::mem::align_of::<m5int16>() - 2usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m2unt16 {
    pub __bindgen_anon_1: m2unt16__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m2unt16__bindgen_ty_1 {
    pub __bindgen_anon_1: m2unt16__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m2unt16__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m2unt16__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m2unt16__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2unt16__bindgen_ty_1__bindgen_ty_1 {
    pub u0: unt16,
    pub u1: [unt16; 2usize],
    pub u2: unt16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2unt16__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m2unt16__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of m2unt16__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m2unt16__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: m2unt16__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m2unt16__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m2unt16__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m2unt16__bindgen_ty_1__bindgen_ty_1, u1) - 2usize];
    ["Offset of field: m2unt16__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m2unt16__bindgen_ty_1__bindgen_ty_1, u2) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2unt16__bindgen_ty_1__bindgen_ty_2 {
    pub a: unt16,
    pub x: unt16,
    pub y: unt16,
    pub i: unt16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2unt16__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m2unt16__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Alignment of m2unt16__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m2unt16__bindgen_ty_1__bindgen_ty_2>() - 2usize];
    ["Offset of field: m2unt16__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m2unt16__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m2unt16__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m2unt16__bindgen_ty_1__bindgen_ty_2, x) - 2usize];
    ["Offset of field: m2unt16__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m2unt16__bindgen_ty_1__bindgen_ty_2, y) - 4usize];
    ["Offset of field: m2unt16__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m2unt16__bindgen_ty_1__bindgen_ty_2, i) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2unt16__bindgen_ty_1__bindgen_ty_3 {
    pub e: unt16,
    pub e1: unt16,
    pub e2: unt16,
    pub e12: unt16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2unt16__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m2unt16__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Alignment of m2unt16__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m2unt16__bindgen_ty_1__bindgen_ty_3>() - 2usize];
    ["Offset of field: m2unt16__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m2unt16__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m2unt16__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m2unt16__bindgen_ty_1__bindgen_ty_3, e1) - 2usize];
    ["Offset of field: m2unt16__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m2unt16__bindgen_ty_1__bindgen_ty_3, e2) - 4usize];
    ["Offset of field: m2unt16__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m2unt16__bindgen_ty_1__bindgen_ty_3, e12) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2unt16__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [unt16; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2unt16__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m2unt16__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Alignment of m2unt16__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m2unt16__bindgen_ty_1__bindgen_ty_4>() - 2usize];
    ["Offset of field: m2unt16__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m2unt16__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2unt16__bindgen_ty_1"][::std::mem::size_of::<m2unt16__bindgen_ty_1>() - 8usize];
    ["Alignment of m2unt16__bindgen_ty_1"]
        [::std::mem::align_of::<m2unt16__bindgen_ty_1>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2unt16"][::std::mem::size_of::<m2unt16>() - 8usize];
    ["Alignment of m2unt16"][::std::mem::align_of::<m2unt16>() - 2usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m3unt16 {
    pub __bindgen_anon_1: m3unt16__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m3unt16__bindgen_ty_1 {
    pub __bindgen_anon_1: m3unt16__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m3unt16__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m3unt16__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m3unt16__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3unt16__bindgen_ty_1__bindgen_ty_1 {
    pub u0: unt16,
    pub u1: [unt16; 3usize],
    pub u2: [unt16; 3usize],
    pub u3: unt16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3unt16__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m3unt16__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of m3unt16__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m3unt16__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: m3unt16__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m3unt16__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m3unt16__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m3unt16__bindgen_ty_1__bindgen_ty_1, u1) - 2usize];
    ["Offset of field: m3unt16__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m3unt16__bindgen_ty_1__bindgen_ty_1, u2) - 8usize];
    ["Offset of field: m3unt16__bindgen_ty_1__bindgen_ty_1::u3"]
        [::std::mem::offset_of!(m3unt16__bindgen_ty_1__bindgen_ty_1, u3) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3unt16__bindgen_ty_1__bindgen_ty_2 {
    pub a: unt16,
    pub x: unt16,
    pub y: unt16,
    pub z: unt16,
    pub xy: unt16,
    pub yz: unt16,
    pub zx: unt16,
    pub i: unt16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3unt16__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m3unt16__bindgen_ty_1__bindgen_ty_2>() - 16usize];
    ["Alignment of m3unt16__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m3unt16__bindgen_ty_1__bindgen_ty_2>() - 2usize];
    ["Offset of field: m3unt16__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m3unt16__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m3unt16__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m3unt16__bindgen_ty_1__bindgen_ty_2, x) - 2usize];
    ["Offset of field: m3unt16__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m3unt16__bindgen_ty_1__bindgen_ty_2, y) - 4usize];
    ["Offset of field: m3unt16__bindgen_ty_1__bindgen_ty_2::z"]
        [::std::mem::offset_of!(m3unt16__bindgen_ty_1__bindgen_ty_2, z) - 6usize];
    ["Offset of field: m3unt16__bindgen_ty_1__bindgen_ty_2::xy"]
        [::std::mem::offset_of!(m3unt16__bindgen_ty_1__bindgen_ty_2, xy) - 8usize];
    ["Offset of field: m3unt16__bindgen_ty_1__bindgen_ty_2::yz"]
        [::std::mem::offset_of!(m3unt16__bindgen_ty_1__bindgen_ty_2, yz) - 10usize];
    ["Offset of field: m3unt16__bindgen_ty_1__bindgen_ty_2::zx"]
        [::std::mem::offset_of!(m3unt16__bindgen_ty_1__bindgen_ty_2, zx) - 12usize];
    ["Offset of field: m3unt16__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m3unt16__bindgen_ty_1__bindgen_ty_2, i) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3unt16__bindgen_ty_1__bindgen_ty_3 {
    pub e: unt16,
    pub e1: unt16,
    pub e2: unt16,
    pub e3: unt16,
    pub e12: unt16,
    pub e23: unt16,
    pub e31: unt16,
    pub e123: unt16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3unt16__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m3unt16__bindgen_ty_1__bindgen_ty_3>() - 16usize];
    ["Alignment of m3unt16__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m3unt16__bindgen_ty_1__bindgen_ty_3>() - 2usize];
    ["Offset of field: m3unt16__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m3unt16__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m3unt16__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m3unt16__bindgen_ty_1__bindgen_ty_3, e1) - 2usize];
    ["Offset of field: m3unt16__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m3unt16__bindgen_ty_1__bindgen_ty_3, e2) - 4usize];
    ["Offset of field: m3unt16__bindgen_ty_1__bindgen_ty_3::e3"]
        [::std::mem::offset_of!(m3unt16__bindgen_ty_1__bindgen_ty_3, e3) - 6usize];
    ["Offset of field: m3unt16__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m3unt16__bindgen_ty_1__bindgen_ty_3, e12) - 8usize];
    ["Offset of field: m3unt16__bindgen_ty_1__bindgen_ty_3::e23"]
        [::std::mem::offset_of!(m3unt16__bindgen_ty_1__bindgen_ty_3, e23) - 10usize];
    ["Offset of field: m3unt16__bindgen_ty_1__bindgen_ty_3::e31"]
        [::std::mem::offset_of!(m3unt16__bindgen_ty_1__bindgen_ty_3, e31) - 12usize];
    ["Offset of field: m3unt16__bindgen_ty_1__bindgen_ty_3::e123"]
        [::std::mem::offset_of!(m3unt16__bindgen_ty_1__bindgen_ty_3, e123) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3unt16__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [unt16; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3unt16__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m3unt16__bindgen_ty_1__bindgen_ty_4>() - 16usize];
    ["Alignment of m3unt16__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m3unt16__bindgen_ty_1__bindgen_ty_4>() - 2usize];
    ["Offset of field: m3unt16__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m3unt16__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3unt16__bindgen_ty_1"][::std::mem::size_of::<m3unt16__bindgen_ty_1>() - 16usize];
    ["Alignment of m3unt16__bindgen_ty_1"]
        [::std::mem::align_of::<m3unt16__bindgen_ty_1>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3unt16"][::std::mem::size_of::<m3unt16>() - 16usize];
    ["Alignment of m3unt16"][::std::mem::align_of::<m3unt16>() - 2usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m4unt16 {
    pub __bindgen_anon_1: m4unt16__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m4unt16__bindgen_ty_1 {
    pub __bindgen_anon_1: m4unt16__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m4unt16__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m4unt16__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m4unt16__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4unt16__bindgen_ty_1__bindgen_ty_1 {
    pub u0: unt16,
    pub u1: [unt16; 4usize],
    pub u2: [unt16; 6usize],
    pub u3: [unt16; 4usize],
    pub u4: unt16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4unt16__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m4unt16__bindgen_ty_1__bindgen_ty_1>() - 32usize];
    ["Alignment of m4unt16__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m4unt16__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_1, u1) - 2usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_1, u2) - 10usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_1::u3"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_1, u3) - 22usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_1::u4"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_1, u4) - 30usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4unt16__bindgen_ty_1__bindgen_ty_2 {
    pub a: unt16,
    pub x: unt16,
    pub y: unt16,
    pub z: unt16,
    pub v: unt16,
    pub xy: unt16,
    pub yz: unt16,
    pub zv: unt16,
    pub vx: unt16,
    pub xz: unt16,
    pub yv: unt16,
    pub xyz: unt16,
    pub yzv: unt16,
    pub zvx: unt16,
    pub vxy: unt16,
    pub i: unt16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4unt16__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m4unt16__bindgen_ty_1__bindgen_ty_2>() - 32usize];
    ["Alignment of m4unt16__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m4unt16__bindgen_ty_1__bindgen_ty_2>() - 2usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_2, x) - 2usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_2, y) - 4usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_2::z"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_2, z) - 6usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_2::v"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_2, v) - 8usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_2::xy"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_2, xy) - 10usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_2::yz"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_2, yz) - 12usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_2::zv"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_2, zv) - 14usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_2::vx"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_2, vx) - 16usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_2::xz"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_2, xz) - 18usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_2::yv"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_2, yv) - 20usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_2::xyz"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_2, xyz) - 22usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_2::yzv"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_2, yzv) - 24usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_2::zvx"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_2, zvx) - 26usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_2::vxy"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_2, vxy) - 28usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_2, i) - 30usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4unt16__bindgen_ty_1__bindgen_ty_3 {
    pub e: unt16,
    pub e1: unt16,
    pub e2: unt16,
    pub e3: unt16,
    pub e4: unt16,
    pub e12: unt16,
    pub e23: unt16,
    pub e34: unt16,
    pub e41: unt16,
    pub e13: unt16,
    pub e24: unt16,
    pub e123: unt16,
    pub e234: unt16,
    pub e341: unt16,
    pub e412: unt16,
    pub e1234: unt16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4unt16__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m4unt16__bindgen_ty_1__bindgen_ty_3>() - 32usize];
    ["Alignment of m4unt16__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m4unt16__bindgen_ty_1__bindgen_ty_3>() - 2usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_3, e1) - 2usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_3, e2) - 4usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_3::e3"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_3, e3) - 6usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_3::e4"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_3, e4) - 8usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_3, e12) - 10usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_3::e23"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_3, e23) - 12usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_3::e34"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_3, e34) - 14usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_3::e41"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_3, e41) - 16usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_3::e13"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_3, e13) - 18usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_3::e24"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_3, e24) - 20usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_3::e123"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_3, e123) - 22usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_3::e234"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_3, e234) - 24usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_3::e341"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_3, e341) - 26usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_3::e412"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_3, e412) - 28usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_3::e1234"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_3, e1234) - 30usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4unt16__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [unt16; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4unt16__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m4unt16__bindgen_ty_1__bindgen_ty_4>() - 32usize];
    ["Alignment of m4unt16__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m4unt16__bindgen_ty_1__bindgen_ty_4>() - 2usize];
    ["Offset of field: m4unt16__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m4unt16__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4unt16__bindgen_ty_1"][::std::mem::size_of::<m4unt16__bindgen_ty_1>() - 32usize];
    ["Alignment of m4unt16__bindgen_ty_1"]
        [::std::mem::align_of::<m4unt16__bindgen_ty_1>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4unt16"][::std::mem::size_of::<m4unt16>() - 32usize];
    ["Alignment of m4unt16"][::std::mem::align_of::<m4unt16>() - 2usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m5unt16 {
    pub __bindgen_anon_1: m5unt16__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m5unt16__bindgen_ty_1 {
    pub __bindgen_anon_1: m5unt16__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m5unt16__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m5unt16__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m5unt16__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5unt16__bindgen_ty_1__bindgen_ty_1 {
    pub u0: unt16,
    pub u1: [unt16; 5usize],
    pub u2: [unt16; 10usize],
    pub u3: [unt16; 10usize],
    pub u4: [unt16; 5usize],
    pub u5: unt16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5unt16__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m5unt16__bindgen_ty_1__bindgen_ty_1>() - 64usize];
    ["Alignment of m5unt16__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m5unt16__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_1, u1) - 2usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_1, u2) - 12usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_1::u3"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_1, u3) - 32usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_1::u4"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_1, u4) - 52usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_1::u5"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_1, u5) - 62usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5unt16__bindgen_ty_1__bindgen_ty_2 {
    pub a: unt16,
    pub x: unt16,
    pub y: unt16,
    pub z: unt16,
    pub v: unt16,
    pub w: unt16,
    pub xy: unt16,
    pub yz: unt16,
    pub zv: unt16,
    pub vw: unt16,
    pub wx: unt16,
    pub xz: unt16,
    pub yv: unt16,
    pub zw: unt16,
    pub vx: unt16,
    pub wy: unt16,
    pub xyz: unt16,
    pub yzv: unt16,
    pub zvw: unt16,
    pub vwx: unt16,
    pub wxy: unt16,
    pub xyv: unt16,
    pub yzw: unt16,
    pub zvx: unt16,
    pub vwy: unt16,
    pub wxz: unt16,
    pub xyzv: unt16,
    pub yzvw: unt16,
    pub zvwx: unt16,
    pub vwxy: unt16,
    pub wxyz: unt16,
    pub i: unt16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5unt16__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m5unt16__bindgen_ty_1__bindgen_ty_2>() - 64usize];
    ["Alignment of m5unt16__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m5unt16__bindgen_ty_1__bindgen_ty_2>() - 2usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, x) - 2usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, y) - 4usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::z"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, z) - 6usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::v"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, v) - 8usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::w"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, w) - 10usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::xy"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, xy) - 12usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::yz"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, yz) - 14usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::zv"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, zv) - 16usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::vw"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, vw) - 18usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::wx"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, wx) - 20usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::xz"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, xz) - 22usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::yv"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, yv) - 24usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::zw"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, zw) - 26usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::vx"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, vx) - 28usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::wy"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, wy) - 30usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::xyz"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, xyz) - 32usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::yzv"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, yzv) - 34usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::zvw"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, zvw) - 36usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::vwx"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, vwx) - 38usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::wxy"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, wxy) - 40usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::xyv"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, xyv) - 42usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::yzw"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, yzw) - 44usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::zvx"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, zvx) - 46usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::vwy"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, vwy) - 48usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::wxz"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, wxz) - 50usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::xyzv"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, xyzv) - 52usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::yzvw"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, yzvw) - 54usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::zvwx"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, zvwx) - 56usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::vwxy"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, vwxy) - 58usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::wxyz"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, wxyz) - 60usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_2, i) - 62usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5unt16__bindgen_ty_1__bindgen_ty_3 {
    pub e: unt16,
    pub e1: unt16,
    pub e2: unt16,
    pub e3: unt16,
    pub e4: unt16,
    pub e5: unt16,
    pub e12: unt16,
    pub e23: unt16,
    pub e34: unt16,
    pub e45: unt16,
    pub e51: unt16,
    pub e13: unt16,
    pub e24: unt16,
    pub e35: unt16,
    pub e41: unt16,
    pub e52: unt16,
    pub e123: unt16,
    pub e234: unt16,
    pub e345: unt16,
    pub e451: unt16,
    pub e512: unt16,
    pub e124: unt16,
    pub e235: unt16,
    pub e341: unt16,
    pub e452: unt16,
    pub e513: unt16,
    pub e1234: unt16,
    pub e2345: unt16,
    pub e3451: unt16,
    pub e4512: unt16,
    pub e5123: unt16,
    pub e12345: unt16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5unt16__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m5unt16__bindgen_ty_1__bindgen_ty_3>() - 64usize];
    ["Alignment of m5unt16__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m5unt16__bindgen_ty_1__bindgen_ty_3>() - 2usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e1) - 2usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e2) - 4usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e3"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e3) - 6usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e4"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e4) - 8usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e5"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e5) - 10usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e12) - 12usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e23"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e23) - 14usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e34"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e34) - 16usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e45"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e45) - 18usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e51"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e51) - 20usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e13"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e13) - 22usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e24"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e24) - 24usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e35"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e35) - 26usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e41"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e41) - 28usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e52"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e52) - 30usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e123"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e123) - 32usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e234"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e234) - 34usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e345"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e345) - 36usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e451"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e451) - 38usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e512"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e512) - 40usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e124"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e124) - 42usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e235"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e235) - 44usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e341"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e341) - 46usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e452"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e452) - 48usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e513"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e513) - 50usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e1234"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e1234) - 52usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e2345"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e2345) - 54usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e3451"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e3451) - 56usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e4512"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e4512) - 58usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e5123"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e5123) - 60usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_3::e12345"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_3, e12345) - 62usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5unt16__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [unt16; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5unt16__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m5unt16__bindgen_ty_1__bindgen_ty_4>() - 64usize];
    ["Alignment of m5unt16__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m5unt16__bindgen_ty_1__bindgen_ty_4>() - 2usize];
    ["Offset of field: m5unt16__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m5unt16__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5unt16__bindgen_ty_1"][::std::mem::size_of::<m5unt16__bindgen_ty_1>() - 64usize];
    ["Alignment of m5unt16__bindgen_ty_1"]
        [::std::mem::align_of::<m5unt16__bindgen_ty_1>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5unt16"][::std::mem::size_of::<m5unt16>() - 64usize];
    ["Alignment of m5unt16"][::std::mem::align_of::<m5unt16>() - 2usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m2int32 {
    pub __bindgen_anon_1: m2int32__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m2int32__bindgen_ty_1 {
    pub __bindgen_anon_1: m2int32__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m2int32__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m2int32__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m2int32__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2int32__bindgen_ty_1__bindgen_ty_1 {
    pub u0: int32,
    pub u1: [int32; 2usize],
    pub u2: int32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2int32__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m2int32__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of m2int32__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m2int32__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: m2int32__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m2int32__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m2int32__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m2int32__bindgen_ty_1__bindgen_ty_1, u1) - 4usize];
    ["Offset of field: m2int32__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m2int32__bindgen_ty_1__bindgen_ty_1, u2) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2int32__bindgen_ty_1__bindgen_ty_2 {
    pub a: int32,
    pub x: int32,
    pub y: int32,
    pub i: int32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2int32__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m2int32__bindgen_ty_1__bindgen_ty_2>() - 16usize];
    ["Alignment of m2int32__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m2int32__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: m2int32__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m2int32__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m2int32__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m2int32__bindgen_ty_1__bindgen_ty_2, x) - 4usize];
    ["Offset of field: m2int32__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m2int32__bindgen_ty_1__bindgen_ty_2, y) - 8usize];
    ["Offset of field: m2int32__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m2int32__bindgen_ty_1__bindgen_ty_2, i) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2int32__bindgen_ty_1__bindgen_ty_3 {
    pub e: int32,
    pub e1: int32,
    pub e2: int32,
    pub e12: int32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2int32__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m2int32__bindgen_ty_1__bindgen_ty_3>() - 16usize];
    ["Alignment of m2int32__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m2int32__bindgen_ty_1__bindgen_ty_3>() - 4usize];
    ["Offset of field: m2int32__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m2int32__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m2int32__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m2int32__bindgen_ty_1__bindgen_ty_3, e1) - 4usize];
    ["Offset of field: m2int32__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m2int32__bindgen_ty_1__bindgen_ty_3, e2) - 8usize];
    ["Offset of field: m2int32__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m2int32__bindgen_ty_1__bindgen_ty_3, e12) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2int32__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [int32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2int32__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m2int32__bindgen_ty_1__bindgen_ty_4>() - 16usize];
    ["Alignment of m2int32__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m2int32__bindgen_ty_1__bindgen_ty_4>() - 4usize];
    ["Offset of field: m2int32__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m2int32__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2int32__bindgen_ty_1"][::std::mem::size_of::<m2int32__bindgen_ty_1>() - 16usize];
    ["Alignment of m2int32__bindgen_ty_1"]
        [::std::mem::align_of::<m2int32__bindgen_ty_1>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2int32"][::std::mem::size_of::<m2int32>() - 16usize];
    ["Alignment of m2int32"][::std::mem::align_of::<m2int32>() - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m3int32 {
    pub __bindgen_anon_1: m3int32__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m3int32__bindgen_ty_1 {
    pub __bindgen_anon_1: m3int32__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m3int32__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m3int32__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m3int32__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3int32__bindgen_ty_1__bindgen_ty_1 {
    pub u0: int32,
    pub u1: [int32; 3usize],
    pub u2: [int32; 3usize],
    pub u3: int32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3int32__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m3int32__bindgen_ty_1__bindgen_ty_1>() - 32usize];
    ["Alignment of m3int32__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m3int32__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: m3int32__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m3int32__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m3int32__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m3int32__bindgen_ty_1__bindgen_ty_1, u1) - 4usize];
    ["Offset of field: m3int32__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m3int32__bindgen_ty_1__bindgen_ty_1, u2) - 16usize];
    ["Offset of field: m3int32__bindgen_ty_1__bindgen_ty_1::u3"]
        [::std::mem::offset_of!(m3int32__bindgen_ty_1__bindgen_ty_1, u3) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3int32__bindgen_ty_1__bindgen_ty_2 {
    pub a: int32,
    pub x: int32,
    pub y: int32,
    pub z: int32,
    pub xy: int32,
    pub yz: int32,
    pub zx: int32,
    pub i: int32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3int32__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m3int32__bindgen_ty_1__bindgen_ty_2>() - 32usize];
    ["Alignment of m3int32__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m3int32__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: m3int32__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m3int32__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m3int32__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m3int32__bindgen_ty_1__bindgen_ty_2, x) - 4usize];
    ["Offset of field: m3int32__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m3int32__bindgen_ty_1__bindgen_ty_2, y) - 8usize];
    ["Offset of field: m3int32__bindgen_ty_1__bindgen_ty_2::z"]
        [::std::mem::offset_of!(m3int32__bindgen_ty_1__bindgen_ty_2, z) - 12usize];
    ["Offset of field: m3int32__bindgen_ty_1__bindgen_ty_2::xy"]
        [::std::mem::offset_of!(m3int32__bindgen_ty_1__bindgen_ty_2, xy) - 16usize];
    ["Offset of field: m3int32__bindgen_ty_1__bindgen_ty_2::yz"]
        [::std::mem::offset_of!(m3int32__bindgen_ty_1__bindgen_ty_2, yz) - 20usize];
    ["Offset of field: m3int32__bindgen_ty_1__bindgen_ty_2::zx"]
        [::std::mem::offset_of!(m3int32__bindgen_ty_1__bindgen_ty_2, zx) - 24usize];
    ["Offset of field: m3int32__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m3int32__bindgen_ty_1__bindgen_ty_2, i) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3int32__bindgen_ty_1__bindgen_ty_3 {
    pub e: int32,
    pub e1: int32,
    pub e2: int32,
    pub e3: int32,
    pub e12: int32,
    pub e23: int32,
    pub e31: int32,
    pub e123: int32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3int32__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m3int32__bindgen_ty_1__bindgen_ty_3>() - 32usize];
    ["Alignment of m3int32__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m3int32__bindgen_ty_1__bindgen_ty_3>() - 4usize];
    ["Offset of field: m3int32__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m3int32__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m3int32__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m3int32__bindgen_ty_1__bindgen_ty_3, e1) - 4usize];
    ["Offset of field: m3int32__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m3int32__bindgen_ty_1__bindgen_ty_3, e2) - 8usize];
    ["Offset of field: m3int32__bindgen_ty_1__bindgen_ty_3::e3"]
        [::std::mem::offset_of!(m3int32__bindgen_ty_1__bindgen_ty_3, e3) - 12usize];
    ["Offset of field: m3int32__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m3int32__bindgen_ty_1__bindgen_ty_3, e12) - 16usize];
    ["Offset of field: m3int32__bindgen_ty_1__bindgen_ty_3::e23"]
        [::std::mem::offset_of!(m3int32__bindgen_ty_1__bindgen_ty_3, e23) - 20usize];
    ["Offset of field: m3int32__bindgen_ty_1__bindgen_ty_3::e31"]
        [::std::mem::offset_of!(m3int32__bindgen_ty_1__bindgen_ty_3, e31) - 24usize];
    ["Offset of field: m3int32__bindgen_ty_1__bindgen_ty_3::e123"]
        [::std::mem::offset_of!(m3int32__bindgen_ty_1__bindgen_ty_3, e123) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3int32__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [int32; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3int32__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m3int32__bindgen_ty_1__bindgen_ty_4>() - 32usize];
    ["Alignment of m3int32__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m3int32__bindgen_ty_1__bindgen_ty_4>() - 4usize];
    ["Offset of field: m3int32__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m3int32__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3int32__bindgen_ty_1"][::std::mem::size_of::<m3int32__bindgen_ty_1>() - 32usize];
    ["Alignment of m3int32__bindgen_ty_1"]
        [::std::mem::align_of::<m3int32__bindgen_ty_1>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3int32"][::std::mem::size_of::<m3int32>() - 32usize];
    ["Alignment of m3int32"][::std::mem::align_of::<m3int32>() - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m4int32 {
    pub __bindgen_anon_1: m4int32__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m4int32__bindgen_ty_1 {
    pub __bindgen_anon_1: m4int32__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m4int32__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m4int32__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m4int32__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4int32__bindgen_ty_1__bindgen_ty_1 {
    pub u0: int32,
    pub u1: [int32; 4usize],
    pub u2: [int32; 6usize],
    pub u3: [int32; 4usize],
    pub u4: int32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4int32__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m4int32__bindgen_ty_1__bindgen_ty_1>() - 64usize];
    ["Alignment of m4int32__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m4int32__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_1, u1) - 4usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_1, u2) - 20usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_1::u3"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_1, u3) - 44usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_1::u4"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_1, u4) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4int32__bindgen_ty_1__bindgen_ty_2 {
    pub a: int32,
    pub x: int32,
    pub y: int32,
    pub z: int32,
    pub v: int32,
    pub xy: int32,
    pub yz: int32,
    pub zv: int32,
    pub vx: int32,
    pub xz: int32,
    pub yv: int32,
    pub xyz: int32,
    pub yzv: int32,
    pub zvx: int32,
    pub vxy: int32,
    pub i: int32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4int32__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m4int32__bindgen_ty_1__bindgen_ty_2>() - 64usize];
    ["Alignment of m4int32__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m4int32__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_2, x) - 4usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_2, y) - 8usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_2::z"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_2, z) - 12usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_2::v"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_2, v) - 16usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_2::xy"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_2, xy) - 20usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_2::yz"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_2, yz) - 24usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_2::zv"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_2, zv) - 28usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_2::vx"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_2, vx) - 32usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_2::xz"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_2, xz) - 36usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_2::yv"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_2, yv) - 40usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_2::xyz"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_2, xyz) - 44usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_2::yzv"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_2, yzv) - 48usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_2::zvx"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_2, zvx) - 52usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_2::vxy"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_2, vxy) - 56usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_2, i) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4int32__bindgen_ty_1__bindgen_ty_3 {
    pub e: int32,
    pub e1: int32,
    pub e2: int32,
    pub e3: int32,
    pub e4: int32,
    pub e12: int32,
    pub e23: int32,
    pub e34: int32,
    pub e41: int32,
    pub e13: int32,
    pub e24: int32,
    pub e123: int32,
    pub e234: int32,
    pub e341: int32,
    pub e412: int32,
    pub e1234: int32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4int32__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m4int32__bindgen_ty_1__bindgen_ty_3>() - 64usize];
    ["Alignment of m4int32__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m4int32__bindgen_ty_1__bindgen_ty_3>() - 4usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_3, e1) - 4usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_3, e2) - 8usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_3::e3"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_3, e3) - 12usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_3::e4"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_3, e4) - 16usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_3, e12) - 20usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_3::e23"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_3, e23) - 24usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_3::e34"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_3, e34) - 28usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_3::e41"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_3, e41) - 32usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_3::e13"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_3, e13) - 36usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_3::e24"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_3, e24) - 40usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_3::e123"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_3, e123) - 44usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_3::e234"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_3, e234) - 48usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_3::e341"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_3, e341) - 52usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_3::e412"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_3, e412) - 56usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_3::e1234"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_3, e1234) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4int32__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [int32; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4int32__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m4int32__bindgen_ty_1__bindgen_ty_4>() - 64usize];
    ["Alignment of m4int32__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m4int32__bindgen_ty_1__bindgen_ty_4>() - 4usize];
    ["Offset of field: m4int32__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m4int32__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4int32__bindgen_ty_1"][::std::mem::size_of::<m4int32__bindgen_ty_1>() - 64usize];
    ["Alignment of m4int32__bindgen_ty_1"]
        [::std::mem::align_of::<m4int32__bindgen_ty_1>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4int32"][::std::mem::size_of::<m4int32>() - 64usize];
    ["Alignment of m4int32"][::std::mem::align_of::<m4int32>() - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m5int32 {
    pub __bindgen_anon_1: m5int32__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m5int32__bindgen_ty_1 {
    pub __bindgen_anon_1: m5int32__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m5int32__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m5int32__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m5int32__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5int32__bindgen_ty_1__bindgen_ty_1 {
    pub u0: int32,
    pub u1: [int32; 5usize],
    pub u2: [int32; 10usize],
    pub u3: [int32; 10usize],
    pub u4: [int32; 5usize],
    pub u5: int32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5int32__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m5int32__bindgen_ty_1__bindgen_ty_1>() - 128usize];
    ["Alignment of m5int32__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m5int32__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_1, u1) - 4usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_1, u2) - 24usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_1::u3"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_1, u3) - 64usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_1::u4"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_1, u4) - 104usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_1::u5"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_1, u5) - 124usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5int32__bindgen_ty_1__bindgen_ty_2 {
    pub a: int32,
    pub x: int32,
    pub y: int32,
    pub z: int32,
    pub v: int32,
    pub w: int32,
    pub xy: int32,
    pub yz: int32,
    pub zv: int32,
    pub vw: int32,
    pub wx: int32,
    pub xz: int32,
    pub yv: int32,
    pub zw: int32,
    pub vx: int32,
    pub wy: int32,
    pub xyz: int32,
    pub yzv: int32,
    pub zvw: int32,
    pub vwx: int32,
    pub wxy: int32,
    pub xyv: int32,
    pub yzw: int32,
    pub zvx: int32,
    pub vwy: int32,
    pub wxz: int32,
    pub xyzv: int32,
    pub yzvw: int32,
    pub zvwx: int32,
    pub vwxy: int32,
    pub wxyz: int32,
    pub i: int32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5int32__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m5int32__bindgen_ty_1__bindgen_ty_2>() - 128usize];
    ["Alignment of m5int32__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m5int32__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, x) - 4usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, y) - 8usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::z"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, z) - 12usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::v"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, v) - 16usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::w"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, w) - 20usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::xy"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, xy) - 24usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::yz"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, yz) - 28usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::zv"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, zv) - 32usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::vw"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, vw) - 36usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::wx"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, wx) - 40usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::xz"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, xz) - 44usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::yv"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, yv) - 48usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::zw"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, zw) - 52usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::vx"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, vx) - 56usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::wy"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, wy) - 60usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::xyz"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, xyz) - 64usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::yzv"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, yzv) - 68usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::zvw"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, zvw) - 72usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::vwx"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, vwx) - 76usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::wxy"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, wxy) - 80usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::xyv"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, xyv) - 84usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::yzw"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, yzw) - 88usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::zvx"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, zvx) - 92usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::vwy"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, vwy) - 96usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::wxz"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, wxz) - 100usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::xyzv"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, xyzv) - 104usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::yzvw"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, yzvw) - 108usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::zvwx"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, zvwx) - 112usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::vwxy"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, vwxy) - 116usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::wxyz"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, wxyz) - 120usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_2, i) - 124usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5int32__bindgen_ty_1__bindgen_ty_3 {
    pub e: int32,
    pub e1: int32,
    pub e2: int32,
    pub e3: int32,
    pub e4: int32,
    pub e5: int32,
    pub e12: int32,
    pub e23: int32,
    pub e34: int32,
    pub e45: int32,
    pub e51: int32,
    pub e13: int32,
    pub e24: int32,
    pub e35: int32,
    pub e41: int32,
    pub e52: int32,
    pub e123: int32,
    pub e234: int32,
    pub e345: int32,
    pub e451: int32,
    pub e512: int32,
    pub e124: int32,
    pub e235: int32,
    pub e341: int32,
    pub e452: int32,
    pub e513: int32,
    pub e1234: int32,
    pub e2345: int32,
    pub e3451: int32,
    pub e4512: int32,
    pub e5123: int32,
    pub e12345: int32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5int32__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m5int32__bindgen_ty_1__bindgen_ty_3>() - 128usize];
    ["Alignment of m5int32__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m5int32__bindgen_ty_1__bindgen_ty_3>() - 4usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e1) - 4usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e2) - 8usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e3"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e3) - 12usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e4"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e4) - 16usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e5"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e5) - 20usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e12) - 24usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e23"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e23) - 28usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e34"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e34) - 32usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e45"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e45) - 36usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e51"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e51) - 40usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e13"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e13) - 44usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e24"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e24) - 48usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e35"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e35) - 52usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e41"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e41) - 56usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e52"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e52) - 60usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e123"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e123) - 64usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e234"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e234) - 68usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e345"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e345) - 72usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e451"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e451) - 76usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e512"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e512) - 80usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e124"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e124) - 84usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e235"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e235) - 88usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e341"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e341) - 92usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e452"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e452) - 96usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e513"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e513) - 100usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e1234"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e1234) - 104usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e2345"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e2345) - 108usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e3451"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e3451) - 112usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e4512"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e4512) - 116usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e5123"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e5123) - 120usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_3::e12345"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_3, e12345) - 124usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5int32__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [int32; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5int32__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m5int32__bindgen_ty_1__bindgen_ty_4>() - 128usize];
    ["Alignment of m5int32__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m5int32__bindgen_ty_1__bindgen_ty_4>() - 4usize];
    ["Offset of field: m5int32__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m5int32__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5int32__bindgen_ty_1"][::std::mem::size_of::<m5int32__bindgen_ty_1>() - 128usize];
    ["Alignment of m5int32__bindgen_ty_1"]
        [::std::mem::align_of::<m5int32__bindgen_ty_1>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5int32"][::std::mem::size_of::<m5int32>() - 128usize];
    ["Alignment of m5int32"][::std::mem::align_of::<m5int32>() - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m2unt32 {
    pub __bindgen_anon_1: m2unt32__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m2unt32__bindgen_ty_1 {
    pub __bindgen_anon_1: m2unt32__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m2unt32__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m2unt32__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m2unt32__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2unt32__bindgen_ty_1__bindgen_ty_1 {
    pub u0: unt32,
    pub u1: [unt32; 2usize],
    pub u2: unt32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2unt32__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m2unt32__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of m2unt32__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m2unt32__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: m2unt32__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m2unt32__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m2unt32__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m2unt32__bindgen_ty_1__bindgen_ty_1, u1) - 4usize];
    ["Offset of field: m2unt32__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m2unt32__bindgen_ty_1__bindgen_ty_1, u2) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2unt32__bindgen_ty_1__bindgen_ty_2 {
    pub a: unt32,
    pub x: unt32,
    pub y: unt32,
    pub i: unt32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2unt32__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m2unt32__bindgen_ty_1__bindgen_ty_2>() - 16usize];
    ["Alignment of m2unt32__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m2unt32__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: m2unt32__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m2unt32__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m2unt32__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m2unt32__bindgen_ty_1__bindgen_ty_2, x) - 4usize];
    ["Offset of field: m2unt32__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m2unt32__bindgen_ty_1__bindgen_ty_2, y) - 8usize];
    ["Offset of field: m2unt32__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m2unt32__bindgen_ty_1__bindgen_ty_2, i) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2unt32__bindgen_ty_1__bindgen_ty_3 {
    pub e: unt32,
    pub e1: unt32,
    pub e2: unt32,
    pub e12: unt32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2unt32__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m2unt32__bindgen_ty_1__bindgen_ty_3>() - 16usize];
    ["Alignment of m2unt32__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m2unt32__bindgen_ty_1__bindgen_ty_3>() - 4usize];
    ["Offset of field: m2unt32__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m2unt32__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m2unt32__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m2unt32__bindgen_ty_1__bindgen_ty_3, e1) - 4usize];
    ["Offset of field: m2unt32__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m2unt32__bindgen_ty_1__bindgen_ty_3, e2) - 8usize];
    ["Offset of field: m2unt32__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m2unt32__bindgen_ty_1__bindgen_ty_3, e12) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2unt32__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [unt32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2unt32__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m2unt32__bindgen_ty_1__bindgen_ty_4>() - 16usize];
    ["Alignment of m2unt32__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m2unt32__bindgen_ty_1__bindgen_ty_4>() - 4usize];
    ["Offset of field: m2unt32__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m2unt32__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2unt32__bindgen_ty_1"][::std::mem::size_of::<m2unt32__bindgen_ty_1>() - 16usize];
    ["Alignment of m2unt32__bindgen_ty_1"]
        [::std::mem::align_of::<m2unt32__bindgen_ty_1>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2unt32"][::std::mem::size_of::<m2unt32>() - 16usize];
    ["Alignment of m2unt32"][::std::mem::align_of::<m2unt32>() - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m3unt32 {
    pub __bindgen_anon_1: m3unt32__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m3unt32__bindgen_ty_1 {
    pub __bindgen_anon_1: m3unt32__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m3unt32__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m3unt32__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m3unt32__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3unt32__bindgen_ty_1__bindgen_ty_1 {
    pub u0: unt32,
    pub u1: [unt32; 3usize],
    pub u2: [unt32; 3usize],
    pub u3: unt32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3unt32__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m3unt32__bindgen_ty_1__bindgen_ty_1>() - 32usize];
    ["Alignment of m3unt32__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m3unt32__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: m3unt32__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m3unt32__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m3unt32__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m3unt32__bindgen_ty_1__bindgen_ty_1, u1) - 4usize];
    ["Offset of field: m3unt32__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m3unt32__bindgen_ty_1__bindgen_ty_1, u2) - 16usize];
    ["Offset of field: m3unt32__bindgen_ty_1__bindgen_ty_1::u3"]
        [::std::mem::offset_of!(m3unt32__bindgen_ty_1__bindgen_ty_1, u3) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3unt32__bindgen_ty_1__bindgen_ty_2 {
    pub a: unt32,
    pub x: unt32,
    pub y: unt32,
    pub z: unt32,
    pub xy: unt32,
    pub yz: unt32,
    pub zx: unt32,
    pub i: unt32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3unt32__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m3unt32__bindgen_ty_1__bindgen_ty_2>() - 32usize];
    ["Alignment of m3unt32__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m3unt32__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: m3unt32__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m3unt32__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m3unt32__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m3unt32__bindgen_ty_1__bindgen_ty_2, x) - 4usize];
    ["Offset of field: m3unt32__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m3unt32__bindgen_ty_1__bindgen_ty_2, y) - 8usize];
    ["Offset of field: m3unt32__bindgen_ty_1__bindgen_ty_2::z"]
        [::std::mem::offset_of!(m3unt32__bindgen_ty_1__bindgen_ty_2, z) - 12usize];
    ["Offset of field: m3unt32__bindgen_ty_1__bindgen_ty_2::xy"]
        [::std::mem::offset_of!(m3unt32__bindgen_ty_1__bindgen_ty_2, xy) - 16usize];
    ["Offset of field: m3unt32__bindgen_ty_1__bindgen_ty_2::yz"]
        [::std::mem::offset_of!(m3unt32__bindgen_ty_1__bindgen_ty_2, yz) - 20usize];
    ["Offset of field: m3unt32__bindgen_ty_1__bindgen_ty_2::zx"]
        [::std::mem::offset_of!(m3unt32__bindgen_ty_1__bindgen_ty_2, zx) - 24usize];
    ["Offset of field: m3unt32__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m3unt32__bindgen_ty_1__bindgen_ty_2, i) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3unt32__bindgen_ty_1__bindgen_ty_3 {
    pub e: unt32,
    pub e1: unt32,
    pub e2: unt32,
    pub e3: unt32,
    pub e12: unt32,
    pub e23: unt32,
    pub e31: unt32,
    pub e123: unt32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3unt32__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m3unt32__bindgen_ty_1__bindgen_ty_3>() - 32usize];
    ["Alignment of m3unt32__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m3unt32__bindgen_ty_1__bindgen_ty_3>() - 4usize];
    ["Offset of field: m3unt32__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m3unt32__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m3unt32__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m3unt32__bindgen_ty_1__bindgen_ty_3, e1) - 4usize];
    ["Offset of field: m3unt32__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m3unt32__bindgen_ty_1__bindgen_ty_3, e2) - 8usize];
    ["Offset of field: m3unt32__bindgen_ty_1__bindgen_ty_3::e3"]
        [::std::mem::offset_of!(m3unt32__bindgen_ty_1__bindgen_ty_3, e3) - 12usize];
    ["Offset of field: m3unt32__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m3unt32__bindgen_ty_1__bindgen_ty_3, e12) - 16usize];
    ["Offset of field: m3unt32__bindgen_ty_1__bindgen_ty_3::e23"]
        [::std::mem::offset_of!(m3unt32__bindgen_ty_1__bindgen_ty_3, e23) - 20usize];
    ["Offset of field: m3unt32__bindgen_ty_1__bindgen_ty_3::e31"]
        [::std::mem::offset_of!(m3unt32__bindgen_ty_1__bindgen_ty_3, e31) - 24usize];
    ["Offset of field: m3unt32__bindgen_ty_1__bindgen_ty_3::e123"]
        [::std::mem::offset_of!(m3unt32__bindgen_ty_1__bindgen_ty_3, e123) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3unt32__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [unt32; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3unt32__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m3unt32__bindgen_ty_1__bindgen_ty_4>() - 32usize];
    ["Alignment of m3unt32__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m3unt32__bindgen_ty_1__bindgen_ty_4>() - 4usize];
    ["Offset of field: m3unt32__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m3unt32__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3unt32__bindgen_ty_1"][::std::mem::size_of::<m3unt32__bindgen_ty_1>() - 32usize];
    ["Alignment of m3unt32__bindgen_ty_1"]
        [::std::mem::align_of::<m3unt32__bindgen_ty_1>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3unt32"][::std::mem::size_of::<m3unt32>() - 32usize];
    ["Alignment of m3unt32"][::std::mem::align_of::<m3unt32>() - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m4unt32 {
    pub __bindgen_anon_1: m4unt32__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m4unt32__bindgen_ty_1 {
    pub __bindgen_anon_1: m4unt32__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m4unt32__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m4unt32__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m4unt32__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4unt32__bindgen_ty_1__bindgen_ty_1 {
    pub u0: unt32,
    pub u1: [unt32; 4usize],
    pub u2: [unt32; 6usize],
    pub u3: [unt32; 4usize],
    pub u4: unt32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4unt32__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m4unt32__bindgen_ty_1__bindgen_ty_1>() - 64usize];
    ["Alignment of m4unt32__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m4unt32__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_1, u1) - 4usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_1, u2) - 20usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_1::u3"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_1, u3) - 44usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_1::u4"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_1, u4) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4unt32__bindgen_ty_1__bindgen_ty_2 {
    pub a: unt32,
    pub x: unt32,
    pub y: unt32,
    pub z: unt32,
    pub v: unt32,
    pub xy: unt32,
    pub yz: unt32,
    pub zv: unt32,
    pub vx: unt32,
    pub xz: unt32,
    pub yv: unt32,
    pub xyz: unt32,
    pub yzv: unt32,
    pub zvx: unt32,
    pub vxy: unt32,
    pub i: unt32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4unt32__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m4unt32__bindgen_ty_1__bindgen_ty_2>() - 64usize];
    ["Alignment of m4unt32__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m4unt32__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_2, x) - 4usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_2, y) - 8usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_2::z"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_2, z) - 12usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_2::v"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_2, v) - 16usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_2::xy"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_2, xy) - 20usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_2::yz"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_2, yz) - 24usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_2::zv"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_2, zv) - 28usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_2::vx"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_2, vx) - 32usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_2::xz"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_2, xz) - 36usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_2::yv"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_2, yv) - 40usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_2::xyz"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_2, xyz) - 44usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_2::yzv"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_2, yzv) - 48usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_2::zvx"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_2, zvx) - 52usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_2::vxy"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_2, vxy) - 56usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_2, i) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4unt32__bindgen_ty_1__bindgen_ty_3 {
    pub e: unt32,
    pub e1: unt32,
    pub e2: unt32,
    pub e3: unt32,
    pub e4: unt32,
    pub e12: unt32,
    pub e23: unt32,
    pub e34: unt32,
    pub e41: unt32,
    pub e13: unt32,
    pub e24: unt32,
    pub e123: unt32,
    pub e234: unt32,
    pub e341: unt32,
    pub e412: unt32,
    pub e1234: unt32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4unt32__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m4unt32__bindgen_ty_1__bindgen_ty_3>() - 64usize];
    ["Alignment of m4unt32__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m4unt32__bindgen_ty_1__bindgen_ty_3>() - 4usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_3, e1) - 4usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_3, e2) - 8usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_3::e3"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_3, e3) - 12usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_3::e4"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_3, e4) - 16usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_3, e12) - 20usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_3::e23"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_3, e23) - 24usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_3::e34"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_3, e34) - 28usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_3::e41"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_3, e41) - 32usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_3::e13"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_3, e13) - 36usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_3::e24"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_3, e24) - 40usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_3::e123"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_3, e123) - 44usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_3::e234"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_3, e234) - 48usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_3::e341"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_3, e341) - 52usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_3::e412"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_3, e412) - 56usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_3::e1234"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_3, e1234) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4unt32__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [unt32; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4unt32__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m4unt32__bindgen_ty_1__bindgen_ty_4>() - 64usize];
    ["Alignment of m4unt32__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m4unt32__bindgen_ty_1__bindgen_ty_4>() - 4usize];
    ["Offset of field: m4unt32__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m4unt32__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4unt32__bindgen_ty_1"][::std::mem::size_of::<m4unt32__bindgen_ty_1>() - 64usize];
    ["Alignment of m4unt32__bindgen_ty_1"]
        [::std::mem::align_of::<m4unt32__bindgen_ty_1>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4unt32"][::std::mem::size_of::<m4unt32>() - 64usize];
    ["Alignment of m4unt32"][::std::mem::align_of::<m4unt32>() - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m5unt32 {
    pub __bindgen_anon_1: m5unt32__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m5unt32__bindgen_ty_1 {
    pub __bindgen_anon_1: m5unt32__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m5unt32__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m5unt32__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m5unt32__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5unt32__bindgen_ty_1__bindgen_ty_1 {
    pub u0: unt32,
    pub u1: [unt32; 5usize],
    pub u2: [unt32; 10usize],
    pub u3: [unt32; 10usize],
    pub u4: [unt32; 5usize],
    pub u5: unt32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5unt32__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m5unt32__bindgen_ty_1__bindgen_ty_1>() - 128usize];
    ["Alignment of m5unt32__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m5unt32__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_1, u1) - 4usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_1, u2) - 24usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_1::u3"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_1, u3) - 64usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_1::u4"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_1, u4) - 104usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_1::u5"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_1, u5) - 124usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5unt32__bindgen_ty_1__bindgen_ty_2 {
    pub a: unt32,
    pub x: unt32,
    pub y: unt32,
    pub z: unt32,
    pub v: unt32,
    pub w: unt32,
    pub xy: unt32,
    pub yz: unt32,
    pub zv: unt32,
    pub vw: unt32,
    pub wx: unt32,
    pub xz: unt32,
    pub yv: unt32,
    pub zw: unt32,
    pub vx: unt32,
    pub wy: unt32,
    pub xyz: unt32,
    pub yzv: unt32,
    pub zvw: unt32,
    pub vwx: unt32,
    pub wxy: unt32,
    pub xyv: unt32,
    pub yzw: unt32,
    pub zvx: unt32,
    pub vwy: unt32,
    pub wxz: unt32,
    pub xyzv: unt32,
    pub yzvw: unt32,
    pub zvwx: unt32,
    pub vwxy: unt32,
    pub wxyz: unt32,
    pub i: unt32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5unt32__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m5unt32__bindgen_ty_1__bindgen_ty_2>() - 128usize];
    ["Alignment of m5unt32__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m5unt32__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, x) - 4usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, y) - 8usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::z"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, z) - 12usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::v"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, v) - 16usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::w"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, w) - 20usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::xy"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, xy) - 24usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::yz"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, yz) - 28usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::zv"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, zv) - 32usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::vw"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, vw) - 36usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::wx"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, wx) - 40usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::xz"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, xz) - 44usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::yv"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, yv) - 48usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::zw"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, zw) - 52usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::vx"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, vx) - 56usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::wy"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, wy) - 60usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::xyz"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, xyz) - 64usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::yzv"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, yzv) - 68usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::zvw"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, zvw) - 72usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::vwx"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, vwx) - 76usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::wxy"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, wxy) - 80usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::xyv"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, xyv) - 84usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::yzw"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, yzw) - 88usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::zvx"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, zvx) - 92usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::vwy"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, vwy) - 96usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::wxz"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, wxz) - 100usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::xyzv"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, xyzv) - 104usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::yzvw"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, yzvw) - 108usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::zvwx"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, zvwx) - 112usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::vwxy"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, vwxy) - 116usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::wxyz"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, wxyz) - 120usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_2, i) - 124usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5unt32__bindgen_ty_1__bindgen_ty_3 {
    pub e: unt32,
    pub e1: unt32,
    pub e2: unt32,
    pub e3: unt32,
    pub e4: unt32,
    pub e5: unt32,
    pub e12: unt32,
    pub e23: unt32,
    pub e34: unt32,
    pub e45: unt32,
    pub e51: unt32,
    pub e13: unt32,
    pub e24: unt32,
    pub e35: unt32,
    pub e41: unt32,
    pub e52: unt32,
    pub e123: unt32,
    pub e234: unt32,
    pub e345: unt32,
    pub e451: unt32,
    pub e512: unt32,
    pub e124: unt32,
    pub e235: unt32,
    pub e341: unt32,
    pub e452: unt32,
    pub e513: unt32,
    pub e1234: unt32,
    pub e2345: unt32,
    pub e3451: unt32,
    pub e4512: unt32,
    pub e5123: unt32,
    pub e12345: unt32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5unt32__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m5unt32__bindgen_ty_1__bindgen_ty_3>() - 128usize];
    ["Alignment of m5unt32__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m5unt32__bindgen_ty_1__bindgen_ty_3>() - 4usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e1) - 4usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e2) - 8usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e3"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e3) - 12usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e4"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e4) - 16usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e5"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e5) - 20usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e12) - 24usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e23"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e23) - 28usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e34"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e34) - 32usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e45"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e45) - 36usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e51"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e51) - 40usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e13"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e13) - 44usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e24"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e24) - 48usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e35"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e35) - 52usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e41"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e41) - 56usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e52"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e52) - 60usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e123"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e123) - 64usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e234"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e234) - 68usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e345"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e345) - 72usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e451"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e451) - 76usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e512"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e512) - 80usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e124"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e124) - 84usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e235"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e235) - 88usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e341"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e341) - 92usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e452"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e452) - 96usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e513"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e513) - 100usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e1234"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e1234) - 104usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e2345"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e2345) - 108usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e3451"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e3451) - 112usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e4512"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e4512) - 116usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e5123"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e5123) - 120usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_3::e12345"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_3, e12345) - 124usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5unt32__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [unt32; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5unt32__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m5unt32__bindgen_ty_1__bindgen_ty_4>() - 128usize];
    ["Alignment of m5unt32__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m5unt32__bindgen_ty_1__bindgen_ty_4>() - 4usize];
    ["Offset of field: m5unt32__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m5unt32__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5unt32__bindgen_ty_1"][::std::mem::size_of::<m5unt32__bindgen_ty_1>() - 128usize];
    ["Alignment of m5unt32__bindgen_ty_1"]
        [::std::mem::align_of::<m5unt32__bindgen_ty_1>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5unt32"][::std::mem::size_of::<m5unt32>() - 128usize];
    ["Alignment of m5unt32"][::std::mem::align_of::<m5unt32>() - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m2int64 {
    pub __bindgen_anon_1: m2int64__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m2int64__bindgen_ty_1 {
    pub __bindgen_anon_1: m2int64__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m2int64__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m2int64__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m2int64__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2int64__bindgen_ty_1__bindgen_ty_1 {
    pub u0: int64,
    pub u1: [int64; 2usize],
    pub u2: int64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2int64__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m2int64__bindgen_ty_1__bindgen_ty_1>() - 32usize];
    ["Alignment of m2int64__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m2int64__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: m2int64__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m2int64__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m2int64__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m2int64__bindgen_ty_1__bindgen_ty_1, u1) - 8usize];
    ["Offset of field: m2int64__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m2int64__bindgen_ty_1__bindgen_ty_1, u2) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2int64__bindgen_ty_1__bindgen_ty_2 {
    pub a: int64,
    pub x: int64,
    pub y: int64,
    pub i: int64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2int64__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m2int64__bindgen_ty_1__bindgen_ty_2>() - 32usize];
    ["Alignment of m2int64__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m2int64__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: m2int64__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m2int64__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m2int64__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m2int64__bindgen_ty_1__bindgen_ty_2, x) - 8usize];
    ["Offset of field: m2int64__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m2int64__bindgen_ty_1__bindgen_ty_2, y) - 16usize];
    ["Offset of field: m2int64__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m2int64__bindgen_ty_1__bindgen_ty_2, i) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2int64__bindgen_ty_1__bindgen_ty_3 {
    pub e: int64,
    pub e1: int64,
    pub e2: int64,
    pub e12: int64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2int64__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m2int64__bindgen_ty_1__bindgen_ty_3>() - 32usize];
    ["Alignment of m2int64__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m2int64__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: m2int64__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m2int64__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m2int64__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m2int64__bindgen_ty_1__bindgen_ty_3, e1) - 8usize];
    ["Offset of field: m2int64__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m2int64__bindgen_ty_1__bindgen_ty_3, e2) - 16usize];
    ["Offset of field: m2int64__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m2int64__bindgen_ty_1__bindgen_ty_3, e12) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2int64__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [int64; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2int64__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m2int64__bindgen_ty_1__bindgen_ty_4>() - 32usize];
    ["Alignment of m2int64__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m2int64__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Offset of field: m2int64__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m2int64__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2int64__bindgen_ty_1"][::std::mem::size_of::<m2int64__bindgen_ty_1>() - 32usize];
    ["Alignment of m2int64__bindgen_ty_1"]
        [::std::mem::align_of::<m2int64__bindgen_ty_1>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2int64"][::std::mem::size_of::<m2int64>() - 32usize];
    ["Alignment of m2int64"][::std::mem::align_of::<m2int64>() - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m3int64 {
    pub __bindgen_anon_1: m3int64__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m3int64__bindgen_ty_1 {
    pub __bindgen_anon_1: m3int64__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m3int64__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m3int64__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m3int64__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3int64__bindgen_ty_1__bindgen_ty_1 {
    pub u0: int64,
    pub u1: [int64; 3usize],
    pub u2: [int64; 3usize],
    pub u3: int64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3int64__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m3int64__bindgen_ty_1__bindgen_ty_1>() - 64usize];
    ["Alignment of m3int64__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m3int64__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: m3int64__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m3int64__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m3int64__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m3int64__bindgen_ty_1__bindgen_ty_1, u1) - 8usize];
    ["Offset of field: m3int64__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m3int64__bindgen_ty_1__bindgen_ty_1, u2) - 32usize];
    ["Offset of field: m3int64__bindgen_ty_1__bindgen_ty_1::u3"]
        [::std::mem::offset_of!(m3int64__bindgen_ty_1__bindgen_ty_1, u3) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3int64__bindgen_ty_1__bindgen_ty_2 {
    pub a: int64,
    pub x: int64,
    pub y: int64,
    pub z: int64,
    pub xy: int64,
    pub yz: int64,
    pub zx: int64,
    pub i: int64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3int64__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m3int64__bindgen_ty_1__bindgen_ty_2>() - 64usize];
    ["Alignment of m3int64__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m3int64__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: m3int64__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m3int64__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m3int64__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m3int64__bindgen_ty_1__bindgen_ty_2, x) - 8usize];
    ["Offset of field: m3int64__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m3int64__bindgen_ty_1__bindgen_ty_2, y) - 16usize];
    ["Offset of field: m3int64__bindgen_ty_1__bindgen_ty_2::z"]
        [::std::mem::offset_of!(m3int64__bindgen_ty_1__bindgen_ty_2, z) - 24usize];
    ["Offset of field: m3int64__bindgen_ty_1__bindgen_ty_2::xy"]
        [::std::mem::offset_of!(m3int64__bindgen_ty_1__bindgen_ty_2, xy) - 32usize];
    ["Offset of field: m3int64__bindgen_ty_1__bindgen_ty_2::yz"]
        [::std::mem::offset_of!(m3int64__bindgen_ty_1__bindgen_ty_2, yz) - 40usize];
    ["Offset of field: m3int64__bindgen_ty_1__bindgen_ty_2::zx"]
        [::std::mem::offset_of!(m3int64__bindgen_ty_1__bindgen_ty_2, zx) - 48usize];
    ["Offset of field: m3int64__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m3int64__bindgen_ty_1__bindgen_ty_2, i) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3int64__bindgen_ty_1__bindgen_ty_3 {
    pub e: int64,
    pub e1: int64,
    pub e2: int64,
    pub e3: int64,
    pub e12: int64,
    pub e23: int64,
    pub e31: int64,
    pub e123: int64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3int64__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m3int64__bindgen_ty_1__bindgen_ty_3>() - 64usize];
    ["Alignment of m3int64__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m3int64__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: m3int64__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m3int64__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m3int64__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m3int64__bindgen_ty_1__bindgen_ty_3, e1) - 8usize];
    ["Offset of field: m3int64__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m3int64__bindgen_ty_1__bindgen_ty_3, e2) - 16usize];
    ["Offset of field: m3int64__bindgen_ty_1__bindgen_ty_3::e3"]
        [::std::mem::offset_of!(m3int64__bindgen_ty_1__bindgen_ty_3, e3) - 24usize];
    ["Offset of field: m3int64__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m3int64__bindgen_ty_1__bindgen_ty_3, e12) - 32usize];
    ["Offset of field: m3int64__bindgen_ty_1__bindgen_ty_3::e23"]
        [::std::mem::offset_of!(m3int64__bindgen_ty_1__bindgen_ty_3, e23) - 40usize];
    ["Offset of field: m3int64__bindgen_ty_1__bindgen_ty_3::e31"]
        [::std::mem::offset_of!(m3int64__bindgen_ty_1__bindgen_ty_3, e31) - 48usize];
    ["Offset of field: m3int64__bindgen_ty_1__bindgen_ty_3::e123"]
        [::std::mem::offset_of!(m3int64__bindgen_ty_1__bindgen_ty_3, e123) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3int64__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [int64; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3int64__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m3int64__bindgen_ty_1__bindgen_ty_4>() - 64usize];
    ["Alignment of m3int64__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m3int64__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Offset of field: m3int64__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m3int64__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3int64__bindgen_ty_1"][::std::mem::size_of::<m3int64__bindgen_ty_1>() - 64usize];
    ["Alignment of m3int64__bindgen_ty_1"]
        [::std::mem::align_of::<m3int64__bindgen_ty_1>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3int64"][::std::mem::size_of::<m3int64>() - 64usize];
    ["Alignment of m3int64"][::std::mem::align_of::<m3int64>() - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m4int64 {
    pub __bindgen_anon_1: m4int64__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m4int64__bindgen_ty_1 {
    pub __bindgen_anon_1: m4int64__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m4int64__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m4int64__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m4int64__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4int64__bindgen_ty_1__bindgen_ty_1 {
    pub u0: int64,
    pub u1: [int64; 4usize],
    pub u2: [int64; 6usize],
    pub u3: [int64; 4usize],
    pub u4: int64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4int64__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m4int64__bindgen_ty_1__bindgen_ty_1>() - 128usize];
    ["Alignment of m4int64__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m4int64__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_1, u1) - 8usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_1, u2) - 40usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_1::u3"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_1, u3) - 88usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_1::u4"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_1, u4) - 120usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4int64__bindgen_ty_1__bindgen_ty_2 {
    pub a: int64,
    pub x: int64,
    pub y: int64,
    pub z: int64,
    pub v: int64,
    pub xy: int64,
    pub yz: int64,
    pub zv: int64,
    pub vx: int64,
    pub xz: int64,
    pub yv: int64,
    pub xyz: int64,
    pub yzv: int64,
    pub zvx: int64,
    pub vxy: int64,
    pub i: int64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4int64__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m4int64__bindgen_ty_1__bindgen_ty_2>() - 128usize];
    ["Alignment of m4int64__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m4int64__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_2, x) - 8usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_2, y) - 16usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_2::z"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_2, z) - 24usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_2::v"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_2, v) - 32usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_2::xy"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_2, xy) - 40usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_2::yz"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_2, yz) - 48usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_2::zv"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_2, zv) - 56usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_2::vx"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_2, vx) - 64usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_2::xz"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_2, xz) - 72usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_2::yv"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_2, yv) - 80usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_2::xyz"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_2, xyz) - 88usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_2::yzv"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_2, yzv) - 96usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_2::zvx"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_2, zvx) - 104usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_2::vxy"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_2, vxy) - 112usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_2, i) - 120usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4int64__bindgen_ty_1__bindgen_ty_3 {
    pub e: int64,
    pub e1: int64,
    pub e2: int64,
    pub e3: int64,
    pub e4: int64,
    pub e12: int64,
    pub e23: int64,
    pub e34: int64,
    pub e41: int64,
    pub e13: int64,
    pub e24: int64,
    pub e123: int64,
    pub e234: int64,
    pub e341: int64,
    pub e412: int64,
    pub e1234: int64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4int64__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m4int64__bindgen_ty_1__bindgen_ty_3>() - 128usize];
    ["Alignment of m4int64__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m4int64__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_3, e1) - 8usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_3, e2) - 16usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_3::e3"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_3, e3) - 24usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_3::e4"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_3, e4) - 32usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_3, e12) - 40usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_3::e23"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_3, e23) - 48usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_3::e34"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_3, e34) - 56usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_3::e41"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_3, e41) - 64usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_3::e13"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_3, e13) - 72usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_3::e24"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_3, e24) - 80usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_3::e123"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_3, e123) - 88usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_3::e234"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_3, e234) - 96usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_3::e341"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_3, e341) - 104usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_3::e412"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_3, e412) - 112usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_3::e1234"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_3, e1234) - 120usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4int64__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [int64; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4int64__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m4int64__bindgen_ty_1__bindgen_ty_4>() - 128usize];
    ["Alignment of m4int64__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m4int64__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Offset of field: m4int64__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m4int64__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4int64__bindgen_ty_1"][::std::mem::size_of::<m4int64__bindgen_ty_1>() - 128usize];
    ["Alignment of m4int64__bindgen_ty_1"]
        [::std::mem::align_of::<m4int64__bindgen_ty_1>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4int64"][::std::mem::size_of::<m4int64>() - 128usize];
    ["Alignment of m4int64"][::std::mem::align_of::<m4int64>() - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m5int64 {
    pub __bindgen_anon_1: m5int64__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m5int64__bindgen_ty_1 {
    pub __bindgen_anon_1: m5int64__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m5int64__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m5int64__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m5int64__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5int64__bindgen_ty_1__bindgen_ty_1 {
    pub u0: int64,
    pub u1: [int64; 5usize],
    pub u2: [int64; 10usize],
    pub u3: [int64; 10usize],
    pub u4: [int64; 5usize],
    pub u5: int64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5int64__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m5int64__bindgen_ty_1__bindgen_ty_1>() - 256usize];
    ["Alignment of m5int64__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m5int64__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_1, u1) - 8usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_1, u2) - 48usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_1::u3"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_1, u3) - 128usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_1::u4"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_1, u4) - 208usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_1::u5"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_1, u5) - 248usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5int64__bindgen_ty_1__bindgen_ty_2 {
    pub a: int64,
    pub x: int64,
    pub y: int64,
    pub z: int64,
    pub v: int64,
    pub w: int64,
    pub xy: int64,
    pub yz: int64,
    pub zv: int64,
    pub vw: int64,
    pub wx: int64,
    pub xz: int64,
    pub yv: int64,
    pub zw: int64,
    pub vx: int64,
    pub wy: int64,
    pub xyz: int64,
    pub yzv: int64,
    pub zvw: int64,
    pub vwx: int64,
    pub wxy: int64,
    pub xyv: int64,
    pub yzw: int64,
    pub zvx: int64,
    pub vwy: int64,
    pub wxz: int64,
    pub xyzv: int64,
    pub yzvw: int64,
    pub zvwx: int64,
    pub vwxy: int64,
    pub wxyz: int64,
    pub i: int64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5int64__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m5int64__bindgen_ty_1__bindgen_ty_2>() - 256usize];
    ["Alignment of m5int64__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m5int64__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, x) - 8usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, y) - 16usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::z"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, z) - 24usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::v"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, v) - 32usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::w"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, w) - 40usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::xy"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, xy) - 48usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::yz"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, yz) - 56usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::zv"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, zv) - 64usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::vw"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, vw) - 72usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::wx"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, wx) - 80usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::xz"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, xz) - 88usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::yv"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, yv) - 96usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::zw"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, zw) - 104usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::vx"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, vx) - 112usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::wy"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, wy) - 120usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::xyz"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, xyz) - 128usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::yzv"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, yzv) - 136usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::zvw"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, zvw) - 144usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::vwx"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, vwx) - 152usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::wxy"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, wxy) - 160usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::xyv"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, xyv) - 168usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::yzw"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, yzw) - 176usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::zvx"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, zvx) - 184usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::vwy"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, vwy) - 192usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::wxz"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, wxz) - 200usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::xyzv"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, xyzv) - 208usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::yzvw"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, yzvw) - 216usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::zvwx"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, zvwx) - 224usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::vwxy"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, vwxy) - 232usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::wxyz"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, wxyz) - 240usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_2, i) - 248usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5int64__bindgen_ty_1__bindgen_ty_3 {
    pub e: int64,
    pub e1: int64,
    pub e2: int64,
    pub e3: int64,
    pub e4: int64,
    pub e5: int64,
    pub e12: int64,
    pub e23: int64,
    pub e34: int64,
    pub e45: int64,
    pub e51: int64,
    pub e13: int64,
    pub e24: int64,
    pub e35: int64,
    pub e41: int64,
    pub e52: int64,
    pub e123: int64,
    pub e234: int64,
    pub e345: int64,
    pub e451: int64,
    pub e512: int64,
    pub e124: int64,
    pub e235: int64,
    pub e341: int64,
    pub e452: int64,
    pub e513: int64,
    pub e1234: int64,
    pub e2345: int64,
    pub e3451: int64,
    pub e4512: int64,
    pub e5123: int64,
    pub e12345: int64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5int64__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m5int64__bindgen_ty_1__bindgen_ty_3>() - 256usize];
    ["Alignment of m5int64__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m5int64__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e1) - 8usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e2) - 16usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e3"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e3) - 24usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e4"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e4) - 32usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e5"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e5) - 40usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e12) - 48usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e23"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e23) - 56usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e34"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e34) - 64usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e45"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e45) - 72usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e51"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e51) - 80usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e13"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e13) - 88usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e24"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e24) - 96usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e35"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e35) - 104usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e41"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e41) - 112usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e52"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e52) - 120usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e123"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e123) - 128usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e234"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e234) - 136usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e345"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e345) - 144usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e451"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e451) - 152usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e512"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e512) - 160usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e124"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e124) - 168usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e235"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e235) - 176usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e341"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e341) - 184usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e452"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e452) - 192usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e513"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e513) - 200usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e1234"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e1234) - 208usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e2345"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e2345) - 216usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e3451"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e3451) - 224usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e4512"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e4512) - 232usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e5123"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e5123) - 240usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_3::e12345"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_3, e12345) - 248usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5int64__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [int64; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5int64__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m5int64__bindgen_ty_1__bindgen_ty_4>() - 256usize];
    ["Alignment of m5int64__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m5int64__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Offset of field: m5int64__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m5int64__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5int64__bindgen_ty_1"][::std::mem::size_of::<m5int64__bindgen_ty_1>() - 256usize];
    ["Alignment of m5int64__bindgen_ty_1"]
        [::std::mem::align_of::<m5int64__bindgen_ty_1>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5int64"][::std::mem::size_of::<m5int64>() - 256usize];
    ["Alignment of m5int64"][::std::mem::align_of::<m5int64>() - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m2unt64 {
    pub __bindgen_anon_1: m2unt64__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m2unt64__bindgen_ty_1 {
    pub __bindgen_anon_1: m2unt64__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m2unt64__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m2unt64__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m2unt64__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2unt64__bindgen_ty_1__bindgen_ty_1 {
    pub u0: unt64,
    pub u1: [unt64; 2usize],
    pub u2: unt64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2unt64__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m2unt64__bindgen_ty_1__bindgen_ty_1>() - 32usize];
    ["Alignment of m2unt64__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m2unt64__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: m2unt64__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m2unt64__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m2unt64__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m2unt64__bindgen_ty_1__bindgen_ty_1, u1) - 8usize];
    ["Offset of field: m2unt64__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m2unt64__bindgen_ty_1__bindgen_ty_1, u2) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2unt64__bindgen_ty_1__bindgen_ty_2 {
    pub a: unt64,
    pub x: unt64,
    pub y: unt64,
    pub i: unt64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2unt64__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m2unt64__bindgen_ty_1__bindgen_ty_2>() - 32usize];
    ["Alignment of m2unt64__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m2unt64__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: m2unt64__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m2unt64__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m2unt64__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m2unt64__bindgen_ty_1__bindgen_ty_2, x) - 8usize];
    ["Offset of field: m2unt64__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m2unt64__bindgen_ty_1__bindgen_ty_2, y) - 16usize];
    ["Offset of field: m2unt64__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m2unt64__bindgen_ty_1__bindgen_ty_2, i) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2unt64__bindgen_ty_1__bindgen_ty_3 {
    pub e: unt64,
    pub e1: unt64,
    pub e2: unt64,
    pub e12: unt64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2unt64__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m2unt64__bindgen_ty_1__bindgen_ty_3>() - 32usize];
    ["Alignment of m2unt64__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m2unt64__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: m2unt64__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m2unt64__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m2unt64__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m2unt64__bindgen_ty_1__bindgen_ty_3, e1) - 8usize];
    ["Offset of field: m2unt64__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m2unt64__bindgen_ty_1__bindgen_ty_3, e2) - 16usize];
    ["Offset of field: m2unt64__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m2unt64__bindgen_ty_1__bindgen_ty_3, e12) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2unt64__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [unt64; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2unt64__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m2unt64__bindgen_ty_1__bindgen_ty_4>() - 32usize];
    ["Alignment of m2unt64__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m2unt64__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Offset of field: m2unt64__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m2unt64__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2unt64__bindgen_ty_1"][::std::mem::size_of::<m2unt64__bindgen_ty_1>() - 32usize];
    ["Alignment of m2unt64__bindgen_ty_1"]
        [::std::mem::align_of::<m2unt64__bindgen_ty_1>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2unt64"][::std::mem::size_of::<m2unt64>() - 32usize];
    ["Alignment of m2unt64"][::std::mem::align_of::<m2unt64>() - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m3unt64 {
    pub __bindgen_anon_1: m3unt64__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m3unt64__bindgen_ty_1 {
    pub __bindgen_anon_1: m3unt64__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m3unt64__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m3unt64__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m3unt64__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3unt64__bindgen_ty_1__bindgen_ty_1 {
    pub u0: unt64,
    pub u1: [unt64; 3usize],
    pub u2: [unt64; 3usize],
    pub u3: unt64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3unt64__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m3unt64__bindgen_ty_1__bindgen_ty_1>() - 64usize];
    ["Alignment of m3unt64__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m3unt64__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: m3unt64__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m3unt64__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m3unt64__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m3unt64__bindgen_ty_1__bindgen_ty_1, u1) - 8usize];
    ["Offset of field: m3unt64__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m3unt64__bindgen_ty_1__bindgen_ty_1, u2) - 32usize];
    ["Offset of field: m3unt64__bindgen_ty_1__bindgen_ty_1::u3"]
        [::std::mem::offset_of!(m3unt64__bindgen_ty_1__bindgen_ty_1, u3) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3unt64__bindgen_ty_1__bindgen_ty_2 {
    pub a: unt64,
    pub x: unt64,
    pub y: unt64,
    pub z: unt64,
    pub xy: unt64,
    pub yz: unt64,
    pub zx: unt64,
    pub i: unt64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3unt64__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m3unt64__bindgen_ty_1__bindgen_ty_2>() - 64usize];
    ["Alignment of m3unt64__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m3unt64__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: m3unt64__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m3unt64__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m3unt64__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m3unt64__bindgen_ty_1__bindgen_ty_2, x) - 8usize];
    ["Offset of field: m3unt64__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m3unt64__bindgen_ty_1__bindgen_ty_2, y) - 16usize];
    ["Offset of field: m3unt64__bindgen_ty_1__bindgen_ty_2::z"]
        [::std::mem::offset_of!(m3unt64__bindgen_ty_1__bindgen_ty_2, z) - 24usize];
    ["Offset of field: m3unt64__bindgen_ty_1__bindgen_ty_2::xy"]
        [::std::mem::offset_of!(m3unt64__bindgen_ty_1__bindgen_ty_2, xy) - 32usize];
    ["Offset of field: m3unt64__bindgen_ty_1__bindgen_ty_2::yz"]
        [::std::mem::offset_of!(m3unt64__bindgen_ty_1__bindgen_ty_2, yz) - 40usize];
    ["Offset of field: m3unt64__bindgen_ty_1__bindgen_ty_2::zx"]
        [::std::mem::offset_of!(m3unt64__bindgen_ty_1__bindgen_ty_2, zx) - 48usize];
    ["Offset of field: m3unt64__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m3unt64__bindgen_ty_1__bindgen_ty_2, i) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3unt64__bindgen_ty_1__bindgen_ty_3 {
    pub e: unt64,
    pub e1: unt64,
    pub e2: unt64,
    pub e3: unt64,
    pub e12: unt64,
    pub e23: unt64,
    pub e31: unt64,
    pub e123: unt64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3unt64__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m3unt64__bindgen_ty_1__bindgen_ty_3>() - 64usize];
    ["Alignment of m3unt64__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m3unt64__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: m3unt64__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m3unt64__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m3unt64__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m3unt64__bindgen_ty_1__bindgen_ty_3, e1) - 8usize];
    ["Offset of field: m3unt64__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m3unt64__bindgen_ty_1__bindgen_ty_3, e2) - 16usize];
    ["Offset of field: m3unt64__bindgen_ty_1__bindgen_ty_3::e3"]
        [::std::mem::offset_of!(m3unt64__bindgen_ty_1__bindgen_ty_3, e3) - 24usize];
    ["Offset of field: m3unt64__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m3unt64__bindgen_ty_1__bindgen_ty_3, e12) - 32usize];
    ["Offset of field: m3unt64__bindgen_ty_1__bindgen_ty_3::e23"]
        [::std::mem::offset_of!(m3unt64__bindgen_ty_1__bindgen_ty_3, e23) - 40usize];
    ["Offset of field: m3unt64__bindgen_ty_1__bindgen_ty_3::e31"]
        [::std::mem::offset_of!(m3unt64__bindgen_ty_1__bindgen_ty_3, e31) - 48usize];
    ["Offset of field: m3unt64__bindgen_ty_1__bindgen_ty_3::e123"]
        [::std::mem::offset_of!(m3unt64__bindgen_ty_1__bindgen_ty_3, e123) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3unt64__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [unt64; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3unt64__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m3unt64__bindgen_ty_1__bindgen_ty_4>() - 64usize];
    ["Alignment of m3unt64__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m3unt64__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Offset of field: m3unt64__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m3unt64__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3unt64__bindgen_ty_1"][::std::mem::size_of::<m3unt64__bindgen_ty_1>() - 64usize];
    ["Alignment of m3unt64__bindgen_ty_1"]
        [::std::mem::align_of::<m3unt64__bindgen_ty_1>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3unt64"][::std::mem::size_of::<m3unt64>() - 64usize];
    ["Alignment of m3unt64"][::std::mem::align_of::<m3unt64>() - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m4unt64 {
    pub __bindgen_anon_1: m4unt64__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m4unt64__bindgen_ty_1 {
    pub __bindgen_anon_1: m4unt64__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m4unt64__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m4unt64__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m4unt64__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4unt64__bindgen_ty_1__bindgen_ty_1 {
    pub u0: unt64,
    pub u1: [unt64; 4usize],
    pub u2: [unt64; 6usize],
    pub u3: [unt64; 4usize],
    pub u4: unt64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4unt64__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m4unt64__bindgen_ty_1__bindgen_ty_1>() - 128usize];
    ["Alignment of m4unt64__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m4unt64__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_1, u1) - 8usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_1, u2) - 40usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_1::u3"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_1, u3) - 88usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_1::u4"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_1, u4) - 120usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4unt64__bindgen_ty_1__bindgen_ty_2 {
    pub a: unt64,
    pub x: unt64,
    pub y: unt64,
    pub z: unt64,
    pub v: unt64,
    pub xy: unt64,
    pub yz: unt64,
    pub zv: unt64,
    pub vx: unt64,
    pub xz: unt64,
    pub yv: unt64,
    pub xyz: unt64,
    pub yzv: unt64,
    pub zvx: unt64,
    pub vxy: unt64,
    pub i: unt64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4unt64__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m4unt64__bindgen_ty_1__bindgen_ty_2>() - 128usize];
    ["Alignment of m4unt64__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m4unt64__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_2, x) - 8usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_2, y) - 16usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_2::z"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_2, z) - 24usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_2::v"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_2, v) - 32usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_2::xy"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_2, xy) - 40usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_2::yz"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_2, yz) - 48usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_2::zv"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_2, zv) - 56usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_2::vx"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_2, vx) - 64usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_2::xz"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_2, xz) - 72usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_2::yv"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_2, yv) - 80usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_2::xyz"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_2, xyz) - 88usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_2::yzv"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_2, yzv) - 96usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_2::zvx"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_2, zvx) - 104usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_2::vxy"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_2, vxy) - 112usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_2, i) - 120usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4unt64__bindgen_ty_1__bindgen_ty_3 {
    pub e: unt64,
    pub e1: unt64,
    pub e2: unt64,
    pub e3: unt64,
    pub e4: unt64,
    pub e12: unt64,
    pub e23: unt64,
    pub e34: unt64,
    pub e41: unt64,
    pub e13: unt64,
    pub e24: unt64,
    pub e123: unt64,
    pub e234: unt64,
    pub e341: unt64,
    pub e412: unt64,
    pub e1234: unt64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4unt64__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m4unt64__bindgen_ty_1__bindgen_ty_3>() - 128usize];
    ["Alignment of m4unt64__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m4unt64__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_3, e1) - 8usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_3, e2) - 16usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_3::e3"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_3, e3) - 24usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_3::e4"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_3, e4) - 32usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_3, e12) - 40usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_3::e23"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_3, e23) - 48usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_3::e34"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_3, e34) - 56usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_3::e41"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_3, e41) - 64usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_3::e13"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_3, e13) - 72usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_3::e24"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_3, e24) - 80usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_3::e123"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_3, e123) - 88usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_3::e234"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_3, e234) - 96usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_3::e341"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_3, e341) - 104usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_3::e412"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_3, e412) - 112usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_3::e1234"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_3, e1234) - 120usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4unt64__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [unt64; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4unt64__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m4unt64__bindgen_ty_1__bindgen_ty_4>() - 128usize];
    ["Alignment of m4unt64__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m4unt64__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Offset of field: m4unt64__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m4unt64__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4unt64__bindgen_ty_1"][::std::mem::size_of::<m4unt64__bindgen_ty_1>() - 128usize];
    ["Alignment of m4unt64__bindgen_ty_1"]
        [::std::mem::align_of::<m4unt64__bindgen_ty_1>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4unt64"][::std::mem::size_of::<m4unt64>() - 128usize];
    ["Alignment of m4unt64"][::std::mem::align_of::<m4unt64>() - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m5unt64 {
    pub __bindgen_anon_1: m5unt64__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m5unt64__bindgen_ty_1 {
    pub __bindgen_anon_1: m5unt64__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m5unt64__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m5unt64__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m5unt64__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5unt64__bindgen_ty_1__bindgen_ty_1 {
    pub u0: unt64,
    pub u1: [unt64; 5usize],
    pub u2: [unt64; 10usize],
    pub u3: [unt64; 10usize],
    pub u4: [unt64; 5usize],
    pub u5: unt64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5unt64__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m5unt64__bindgen_ty_1__bindgen_ty_1>() - 256usize];
    ["Alignment of m5unt64__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m5unt64__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_1, u1) - 8usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_1, u2) - 48usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_1::u3"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_1, u3) - 128usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_1::u4"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_1, u4) - 208usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_1::u5"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_1, u5) - 248usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5unt64__bindgen_ty_1__bindgen_ty_2 {
    pub a: unt64,
    pub x: unt64,
    pub y: unt64,
    pub z: unt64,
    pub v: unt64,
    pub w: unt64,
    pub xy: unt64,
    pub yz: unt64,
    pub zv: unt64,
    pub vw: unt64,
    pub wx: unt64,
    pub xz: unt64,
    pub yv: unt64,
    pub zw: unt64,
    pub vx: unt64,
    pub wy: unt64,
    pub xyz: unt64,
    pub yzv: unt64,
    pub zvw: unt64,
    pub vwx: unt64,
    pub wxy: unt64,
    pub xyv: unt64,
    pub yzw: unt64,
    pub zvx: unt64,
    pub vwy: unt64,
    pub wxz: unt64,
    pub xyzv: unt64,
    pub yzvw: unt64,
    pub zvwx: unt64,
    pub vwxy: unt64,
    pub wxyz: unt64,
    pub i: unt64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5unt64__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m5unt64__bindgen_ty_1__bindgen_ty_2>() - 256usize];
    ["Alignment of m5unt64__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m5unt64__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, x) - 8usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, y) - 16usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::z"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, z) - 24usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::v"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, v) - 32usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::w"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, w) - 40usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::xy"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, xy) - 48usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::yz"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, yz) - 56usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::zv"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, zv) - 64usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::vw"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, vw) - 72usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::wx"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, wx) - 80usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::xz"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, xz) - 88usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::yv"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, yv) - 96usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::zw"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, zw) - 104usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::vx"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, vx) - 112usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::wy"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, wy) - 120usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::xyz"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, xyz) - 128usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::yzv"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, yzv) - 136usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::zvw"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, zvw) - 144usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::vwx"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, vwx) - 152usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::wxy"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, wxy) - 160usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::xyv"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, xyv) - 168usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::yzw"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, yzw) - 176usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::zvx"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, zvx) - 184usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::vwy"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, vwy) - 192usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::wxz"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, wxz) - 200usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::xyzv"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, xyzv) - 208usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::yzvw"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, yzvw) - 216usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::zvwx"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, zvwx) - 224usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::vwxy"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, vwxy) - 232usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::wxyz"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, wxyz) - 240usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_2, i) - 248usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5unt64__bindgen_ty_1__bindgen_ty_3 {
    pub e: unt64,
    pub e1: unt64,
    pub e2: unt64,
    pub e3: unt64,
    pub e4: unt64,
    pub e5: unt64,
    pub e12: unt64,
    pub e23: unt64,
    pub e34: unt64,
    pub e45: unt64,
    pub e51: unt64,
    pub e13: unt64,
    pub e24: unt64,
    pub e35: unt64,
    pub e41: unt64,
    pub e52: unt64,
    pub e123: unt64,
    pub e234: unt64,
    pub e345: unt64,
    pub e451: unt64,
    pub e512: unt64,
    pub e124: unt64,
    pub e235: unt64,
    pub e341: unt64,
    pub e452: unt64,
    pub e513: unt64,
    pub e1234: unt64,
    pub e2345: unt64,
    pub e3451: unt64,
    pub e4512: unt64,
    pub e5123: unt64,
    pub e12345: unt64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5unt64__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m5unt64__bindgen_ty_1__bindgen_ty_3>() - 256usize];
    ["Alignment of m5unt64__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m5unt64__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e1) - 8usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e2) - 16usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e3"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e3) - 24usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e4"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e4) - 32usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e5"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e5) - 40usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e12) - 48usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e23"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e23) - 56usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e34"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e34) - 64usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e45"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e45) - 72usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e51"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e51) - 80usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e13"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e13) - 88usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e24"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e24) - 96usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e35"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e35) - 104usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e41"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e41) - 112usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e52"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e52) - 120usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e123"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e123) - 128usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e234"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e234) - 136usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e345"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e345) - 144usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e451"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e451) - 152usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e512"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e512) - 160usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e124"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e124) - 168usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e235"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e235) - 176usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e341"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e341) - 184usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e452"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e452) - 192usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e513"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e513) - 200usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e1234"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e1234) - 208usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e2345"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e2345) - 216usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e3451"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e3451) - 224usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e4512"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e4512) - 232usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e5123"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e5123) - 240usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_3::e12345"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_3, e12345) - 248usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5unt64__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [unt64; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5unt64__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m5unt64__bindgen_ty_1__bindgen_ty_4>() - 256usize];
    ["Alignment of m5unt64__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m5unt64__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Offset of field: m5unt64__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m5unt64__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5unt64__bindgen_ty_1"][::std::mem::size_of::<m5unt64__bindgen_ty_1>() - 256usize];
    ["Alignment of m5unt64__bindgen_ty_1"]
        [::std::mem::align_of::<m5unt64__bindgen_ty_1>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5unt64"][::std::mem::size_of::<m5unt64>() - 256usize];
    ["Alignment of m5unt64"][::std::mem::align_of::<m5unt64>() - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m2float32 {
    pub __bindgen_anon_1: m2float32__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m2float32__bindgen_ty_1 {
    pub __bindgen_anon_1: m2float32__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m2float32__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m2float32__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m2float32__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2float32__bindgen_ty_1__bindgen_ty_1 {
    pub u0: float32,
    pub u1: [float32; 2usize],
    pub u2: float32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2float32__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m2float32__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of m2float32__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m2float32__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: m2float32__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m2float32__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m2float32__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m2float32__bindgen_ty_1__bindgen_ty_1, u1) - 4usize];
    ["Offset of field: m2float32__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m2float32__bindgen_ty_1__bindgen_ty_1, u2) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2float32__bindgen_ty_1__bindgen_ty_2 {
    pub a: float32,
    pub x: float32,
    pub y: float32,
    pub i: float32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2float32__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m2float32__bindgen_ty_1__bindgen_ty_2>() - 16usize];
    ["Alignment of m2float32__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m2float32__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: m2float32__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m2float32__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m2float32__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m2float32__bindgen_ty_1__bindgen_ty_2, x) - 4usize];
    ["Offset of field: m2float32__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m2float32__bindgen_ty_1__bindgen_ty_2, y) - 8usize];
    ["Offset of field: m2float32__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m2float32__bindgen_ty_1__bindgen_ty_2, i) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2float32__bindgen_ty_1__bindgen_ty_3 {
    pub e: float32,
    pub e1: float32,
    pub e2: float32,
    pub e12: float32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2float32__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m2float32__bindgen_ty_1__bindgen_ty_3>() - 16usize];
    ["Alignment of m2float32__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m2float32__bindgen_ty_1__bindgen_ty_3>() - 4usize];
    ["Offset of field: m2float32__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m2float32__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m2float32__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m2float32__bindgen_ty_1__bindgen_ty_3, e1) - 4usize];
    ["Offset of field: m2float32__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m2float32__bindgen_ty_1__bindgen_ty_3, e2) - 8usize];
    ["Offset of field: m2float32__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m2float32__bindgen_ty_1__bindgen_ty_3, e12) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2float32__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [float32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2float32__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m2float32__bindgen_ty_1__bindgen_ty_4>() - 16usize];
    ["Alignment of m2float32__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m2float32__bindgen_ty_1__bindgen_ty_4>() - 4usize];
    ["Offset of field: m2float32__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m2float32__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2float32__bindgen_ty_1"][::std::mem::size_of::<m2float32__bindgen_ty_1>() - 16usize];
    ["Alignment of m2float32__bindgen_ty_1"]
        [::std::mem::align_of::<m2float32__bindgen_ty_1>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2float32"][::std::mem::size_of::<m2float32>() - 16usize];
    ["Alignment of m2float32"][::std::mem::align_of::<m2float32>() - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m3float32 {
    pub __bindgen_anon_1: m3float32__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m3float32__bindgen_ty_1 {
    pub __bindgen_anon_1: m3float32__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m3float32__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m3float32__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m3float32__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3float32__bindgen_ty_1__bindgen_ty_1 {
    pub u0: float32,
    pub u1: [float32; 3usize],
    pub u2: [float32; 3usize],
    pub u3: float32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3float32__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m3float32__bindgen_ty_1__bindgen_ty_1>() - 32usize];
    ["Alignment of m3float32__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m3float32__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: m3float32__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m3float32__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m3float32__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m3float32__bindgen_ty_1__bindgen_ty_1, u1) - 4usize];
    ["Offset of field: m3float32__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m3float32__bindgen_ty_1__bindgen_ty_1, u2) - 16usize];
    ["Offset of field: m3float32__bindgen_ty_1__bindgen_ty_1::u3"]
        [::std::mem::offset_of!(m3float32__bindgen_ty_1__bindgen_ty_1, u3) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3float32__bindgen_ty_1__bindgen_ty_2 {
    pub a: float32,
    pub x: float32,
    pub y: float32,
    pub z: float32,
    pub xy: float32,
    pub yz: float32,
    pub zx: float32,
    pub i: float32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3float32__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m3float32__bindgen_ty_1__bindgen_ty_2>() - 32usize];
    ["Alignment of m3float32__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m3float32__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: m3float32__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m3float32__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m3float32__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m3float32__bindgen_ty_1__bindgen_ty_2, x) - 4usize];
    ["Offset of field: m3float32__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m3float32__bindgen_ty_1__bindgen_ty_2, y) - 8usize];
    ["Offset of field: m3float32__bindgen_ty_1__bindgen_ty_2::z"]
        [::std::mem::offset_of!(m3float32__bindgen_ty_1__bindgen_ty_2, z) - 12usize];
    ["Offset of field: m3float32__bindgen_ty_1__bindgen_ty_2::xy"]
        [::std::mem::offset_of!(m3float32__bindgen_ty_1__bindgen_ty_2, xy) - 16usize];
    ["Offset of field: m3float32__bindgen_ty_1__bindgen_ty_2::yz"]
        [::std::mem::offset_of!(m3float32__bindgen_ty_1__bindgen_ty_2, yz) - 20usize];
    ["Offset of field: m3float32__bindgen_ty_1__bindgen_ty_2::zx"]
        [::std::mem::offset_of!(m3float32__bindgen_ty_1__bindgen_ty_2, zx) - 24usize];
    ["Offset of field: m3float32__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m3float32__bindgen_ty_1__bindgen_ty_2, i) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3float32__bindgen_ty_1__bindgen_ty_3 {
    pub e: float32,
    pub e1: float32,
    pub e2: float32,
    pub e3: float32,
    pub e12: float32,
    pub e23: float32,
    pub e31: float32,
    pub e123: float32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3float32__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m3float32__bindgen_ty_1__bindgen_ty_3>() - 32usize];
    ["Alignment of m3float32__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m3float32__bindgen_ty_1__bindgen_ty_3>() - 4usize];
    ["Offset of field: m3float32__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m3float32__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m3float32__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m3float32__bindgen_ty_1__bindgen_ty_3, e1) - 4usize];
    ["Offset of field: m3float32__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m3float32__bindgen_ty_1__bindgen_ty_3, e2) - 8usize];
    ["Offset of field: m3float32__bindgen_ty_1__bindgen_ty_3::e3"]
        [::std::mem::offset_of!(m3float32__bindgen_ty_1__bindgen_ty_3, e3) - 12usize];
    ["Offset of field: m3float32__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m3float32__bindgen_ty_1__bindgen_ty_3, e12) - 16usize];
    ["Offset of field: m3float32__bindgen_ty_1__bindgen_ty_3::e23"]
        [::std::mem::offset_of!(m3float32__bindgen_ty_1__bindgen_ty_3, e23) - 20usize];
    ["Offset of field: m3float32__bindgen_ty_1__bindgen_ty_3::e31"]
        [::std::mem::offset_of!(m3float32__bindgen_ty_1__bindgen_ty_3, e31) - 24usize];
    ["Offset of field: m3float32__bindgen_ty_1__bindgen_ty_3::e123"]
        [::std::mem::offset_of!(m3float32__bindgen_ty_1__bindgen_ty_3, e123) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3float32__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [float32; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3float32__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m3float32__bindgen_ty_1__bindgen_ty_4>() - 32usize];
    ["Alignment of m3float32__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m3float32__bindgen_ty_1__bindgen_ty_4>() - 4usize];
    ["Offset of field: m3float32__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m3float32__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3float32__bindgen_ty_1"][::std::mem::size_of::<m3float32__bindgen_ty_1>() - 32usize];
    ["Alignment of m3float32__bindgen_ty_1"]
        [::std::mem::align_of::<m3float32__bindgen_ty_1>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3float32"][::std::mem::size_of::<m3float32>() - 32usize];
    ["Alignment of m3float32"][::std::mem::align_of::<m3float32>() - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m4float32 {
    pub __bindgen_anon_1: m4float32__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m4float32__bindgen_ty_1 {
    pub __bindgen_anon_1: m4float32__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m4float32__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m4float32__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m4float32__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4float32__bindgen_ty_1__bindgen_ty_1 {
    pub u0: float32,
    pub u1: [float32; 4usize],
    pub u2: [float32; 6usize],
    pub u3: [float32; 4usize],
    pub u4: float32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4float32__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m4float32__bindgen_ty_1__bindgen_ty_1>() - 64usize];
    ["Alignment of m4float32__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m4float32__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_1, u1) - 4usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_1, u2) - 20usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_1::u3"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_1, u3) - 44usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_1::u4"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_1, u4) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4float32__bindgen_ty_1__bindgen_ty_2 {
    pub a: float32,
    pub x: float32,
    pub y: float32,
    pub z: float32,
    pub v: float32,
    pub xy: float32,
    pub yz: float32,
    pub zv: float32,
    pub vx: float32,
    pub xz: float32,
    pub yv: float32,
    pub xyz: float32,
    pub yzv: float32,
    pub zvx: float32,
    pub vxy: float32,
    pub i: float32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4float32__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m4float32__bindgen_ty_1__bindgen_ty_2>() - 64usize];
    ["Alignment of m4float32__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m4float32__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_2, x) - 4usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_2, y) - 8usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_2::z"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_2, z) - 12usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_2::v"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_2, v) - 16usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_2::xy"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_2, xy) - 20usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_2::yz"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_2, yz) - 24usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_2::zv"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_2, zv) - 28usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_2::vx"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_2, vx) - 32usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_2::xz"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_2, xz) - 36usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_2::yv"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_2, yv) - 40usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_2::xyz"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_2, xyz) - 44usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_2::yzv"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_2, yzv) - 48usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_2::zvx"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_2, zvx) - 52usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_2::vxy"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_2, vxy) - 56usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_2, i) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4float32__bindgen_ty_1__bindgen_ty_3 {
    pub e: float32,
    pub e1: float32,
    pub e2: float32,
    pub e3: float32,
    pub e4: float32,
    pub e12: float32,
    pub e23: float32,
    pub e34: float32,
    pub e41: float32,
    pub e13: float32,
    pub e24: float32,
    pub e123: float32,
    pub e234: float32,
    pub e341: float32,
    pub e412: float32,
    pub e1234: float32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4float32__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m4float32__bindgen_ty_1__bindgen_ty_3>() - 64usize];
    ["Alignment of m4float32__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m4float32__bindgen_ty_1__bindgen_ty_3>() - 4usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_3, e1) - 4usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_3, e2) - 8usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_3::e3"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_3, e3) - 12usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_3::e4"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_3, e4) - 16usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_3, e12) - 20usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_3::e23"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_3, e23) - 24usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_3::e34"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_3, e34) - 28usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_3::e41"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_3, e41) - 32usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_3::e13"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_3, e13) - 36usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_3::e24"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_3, e24) - 40usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_3::e123"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_3, e123) - 44usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_3::e234"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_3, e234) - 48usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_3::e341"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_3, e341) - 52usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_3::e412"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_3, e412) - 56usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_3::e1234"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_3, e1234) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4float32__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [float32; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4float32__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m4float32__bindgen_ty_1__bindgen_ty_4>() - 64usize];
    ["Alignment of m4float32__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m4float32__bindgen_ty_1__bindgen_ty_4>() - 4usize];
    ["Offset of field: m4float32__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m4float32__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4float32__bindgen_ty_1"][::std::mem::size_of::<m4float32__bindgen_ty_1>() - 64usize];
    ["Alignment of m4float32__bindgen_ty_1"]
        [::std::mem::align_of::<m4float32__bindgen_ty_1>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4float32"][::std::mem::size_of::<m4float32>() - 64usize];
    ["Alignment of m4float32"][::std::mem::align_of::<m4float32>() - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m5float32 {
    pub __bindgen_anon_1: m5float32__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m5float32__bindgen_ty_1 {
    pub __bindgen_anon_1: m5float32__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m5float32__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m5float32__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m5float32__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5float32__bindgen_ty_1__bindgen_ty_1 {
    pub u0: float32,
    pub u1: [float32; 5usize],
    pub u2: [float32; 10usize],
    pub u3: [float32; 10usize],
    pub u4: [float32; 5usize],
    pub u5: float32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5float32__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m5float32__bindgen_ty_1__bindgen_ty_1>() - 128usize];
    ["Alignment of m5float32__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m5float32__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_1, u1) - 4usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_1, u2) - 24usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_1::u3"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_1, u3) - 64usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_1::u4"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_1, u4) - 104usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_1::u5"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_1, u5) - 124usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5float32__bindgen_ty_1__bindgen_ty_2 {
    pub a: float32,
    pub x: float32,
    pub y: float32,
    pub z: float32,
    pub v: float32,
    pub w: float32,
    pub xy: float32,
    pub yz: float32,
    pub zv: float32,
    pub vw: float32,
    pub wx: float32,
    pub xz: float32,
    pub yv: float32,
    pub zw: float32,
    pub vx: float32,
    pub wy: float32,
    pub xyz: float32,
    pub yzv: float32,
    pub zvw: float32,
    pub vwx: float32,
    pub wxy: float32,
    pub xyv: float32,
    pub yzw: float32,
    pub zvx: float32,
    pub vwy: float32,
    pub wxz: float32,
    pub xyzv: float32,
    pub yzvw: float32,
    pub zvwx: float32,
    pub vwxy: float32,
    pub wxyz: float32,
    pub i: float32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5float32__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m5float32__bindgen_ty_1__bindgen_ty_2>() - 128usize];
    ["Alignment of m5float32__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m5float32__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, x) - 4usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, y) - 8usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::z"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, z) - 12usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::v"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, v) - 16usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::w"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, w) - 20usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::xy"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, xy) - 24usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::yz"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, yz) - 28usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::zv"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, zv) - 32usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::vw"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, vw) - 36usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::wx"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, wx) - 40usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::xz"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, xz) - 44usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::yv"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, yv) - 48usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::zw"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, zw) - 52usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::vx"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, vx) - 56usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::wy"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, wy) - 60usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::xyz"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, xyz) - 64usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::yzv"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, yzv) - 68usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::zvw"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, zvw) - 72usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::vwx"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, vwx) - 76usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::wxy"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, wxy) - 80usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::xyv"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, xyv) - 84usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::yzw"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, yzw) - 88usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::zvx"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, zvx) - 92usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::vwy"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, vwy) - 96usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::wxz"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, wxz) - 100usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::xyzv"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, xyzv) - 104usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::yzvw"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, yzvw) - 108usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::zvwx"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, zvwx) - 112usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::vwxy"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, vwxy) - 116usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::wxyz"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, wxyz) - 120usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_2, i) - 124usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5float32__bindgen_ty_1__bindgen_ty_3 {
    pub e: float32,
    pub e1: float32,
    pub e2: float32,
    pub e3: float32,
    pub e4: float32,
    pub e5: float32,
    pub e12: float32,
    pub e23: float32,
    pub e34: float32,
    pub e45: float32,
    pub e51: float32,
    pub e13: float32,
    pub e24: float32,
    pub e35: float32,
    pub e41: float32,
    pub e52: float32,
    pub e123: float32,
    pub e234: float32,
    pub e345: float32,
    pub e451: float32,
    pub e512: float32,
    pub e124: float32,
    pub e235: float32,
    pub e341: float32,
    pub e452: float32,
    pub e513: float32,
    pub e1234: float32,
    pub e2345: float32,
    pub e3451: float32,
    pub e4512: float32,
    pub e5123: float32,
    pub e12345: float32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5float32__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m5float32__bindgen_ty_1__bindgen_ty_3>() - 128usize];
    ["Alignment of m5float32__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m5float32__bindgen_ty_1__bindgen_ty_3>() - 4usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e1) - 4usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e2) - 8usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e3"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e3) - 12usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e4"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e4) - 16usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e5"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e5) - 20usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e12) - 24usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e23"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e23) - 28usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e34"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e34) - 32usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e45"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e45) - 36usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e51"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e51) - 40usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e13"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e13) - 44usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e24"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e24) - 48usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e35"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e35) - 52usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e41"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e41) - 56usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e52"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e52) - 60usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e123"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e123) - 64usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e234"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e234) - 68usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e345"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e345) - 72usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e451"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e451) - 76usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e512"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e512) - 80usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e124"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e124) - 84usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e235"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e235) - 88usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e341"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e341) - 92usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e452"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e452) - 96usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e513"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e513) - 100usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e1234"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e1234) - 104usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e2345"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e2345) - 108usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e3451"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e3451) - 112usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e4512"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e4512) - 116usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e5123"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e5123) - 120usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_3::e12345"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_3, e12345) - 124usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5float32__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [float32; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5float32__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m5float32__bindgen_ty_1__bindgen_ty_4>() - 128usize];
    ["Alignment of m5float32__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m5float32__bindgen_ty_1__bindgen_ty_4>() - 4usize];
    ["Offset of field: m5float32__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m5float32__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5float32__bindgen_ty_1"]
        [::std::mem::size_of::<m5float32__bindgen_ty_1>() - 128usize];
    ["Alignment of m5float32__bindgen_ty_1"]
        [::std::mem::align_of::<m5float32__bindgen_ty_1>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5float32"][::std::mem::size_of::<m5float32>() - 128usize];
    ["Alignment of m5float32"][::std::mem::align_of::<m5float32>() - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m2float64 {
    pub __bindgen_anon_1: m2float64__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m2float64__bindgen_ty_1 {
    pub __bindgen_anon_1: m2float64__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m2float64__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m2float64__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m2float64__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2float64__bindgen_ty_1__bindgen_ty_1 {
    pub u0: float64,
    pub u1: [float64; 2usize],
    pub u2: float64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2float64__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m2float64__bindgen_ty_1__bindgen_ty_1>() - 32usize];
    ["Alignment of m2float64__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m2float64__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: m2float64__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m2float64__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m2float64__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m2float64__bindgen_ty_1__bindgen_ty_1, u1) - 8usize];
    ["Offset of field: m2float64__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m2float64__bindgen_ty_1__bindgen_ty_1, u2) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2float64__bindgen_ty_1__bindgen_ty_2 {
    pub a: float64,
    pub x: float64,
    pub y: float64,
    pub i: float64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2float64__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m2float64__bindgen_ty_1__bindgen_ty_2>() - 32usize];
    ["Alignment of m2float64__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m2float64__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: m2float64__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m2float64__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m2float64__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m2float64__bindgen_ty_1__bindgen_ty_2, x) - 8usize];
    ["Offset of field: m2float64__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m2float64__bindgen_ty_1__bindgen_ty_2, y) - 16usize];
    ["Offset of field: m2float64__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m2float64__bindgen_ty_1__bindgen_ty_2, i) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2float64__bindgen_ty_1__bindgen_ty_3 {
    pub e: float64,
    pub e1: float64,
    pub e2: float64,
    pub e12: float64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2float64__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m2float64__bindgen_ty_1__bindgen_ty_3>() - 32usize];
    ["Alignment of m2float64__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m2float64__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: m2float64__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m2float64__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m2float64__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m2float64__bindgen_ty_1__bindgen_ty_3, e1) - 8usize];
    ["Offset of field: m2float64__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m2float64__bindgen_ty_1__bindgen_ty_3, e2) - 16usize];
    ["Offset of field: m2float64__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m2float64__bindgen_ty_1__bindgen_ty_3, e12) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m2float64__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [float64; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2float64__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m2float64__bindgen_ty_1__bindgen_ty_4>() - 32usize];
    ["Alignment of m2float64__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m2float64__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Offset of field: m2float64__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m2float64__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2float64__bindgen_ty_1"][::std::mem::size_of::<m2float64__bindgen_ty_1>() - 32usize];
    ["Alignment of m2float64__bindgen_ty_1"]
        [::std::mem::align_of::<m2float64__bindgen_ty_1>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m2float64"][::std::mem::size_of::<m2float64>() - 32usize];
    ["Alignment of m2float64"][::std::mem::align_of::<m2float64>() - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m3float64 {
    pub __bindgen_anon_1: m3float64__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m3float64__bindgen_ty_1 {
    pub __bindgen_anon_1: m3float64__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m3float64__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m3float64__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m3float64__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3float64__bindgen_ty_1__bindgen_ty_1 {
    pub u0: float64,
    pub u1: [float64; 3usize],
    pub u2: [float64; 3usize],
    pub u3: float64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3float64__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m3float64__bindgen_ty_1__bindgen_ty_1>() - 64usize];
    ["Alignment of m3float64__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m3float64__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: m3float64__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m3float64__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m3float64__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m3float64__bindgen_ty_1__bindgen_ty_1, u1) - 8usize];
    ["Offset of field: m3float64__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m3float64__bindgen_ty_1__bindgen_ty_1, u2) - 32usize];
    ["Offset of field: m3float64__bindgen_ty_1__bindgen_ty_1::u3"]
        [::std::mem::offset_of!(m3float64__bindgen_ty_1__bindgen_ty_1, u3) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3float64__bindgen_ty_1__bindgen_ty_2 {
    pub a: float64,
    pub x: float64,
    pub y: float64,
    pub z: float64,
    pub xy: float64,
    pub yz: float64,
    pub zx: float64,
    pub i: float64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3float64__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m3float64__bindgen_ty_1__bindgen_ty_2>() - 64usize];
    ["Alignment of m3float64__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m3float64__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: m3float64__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m3float64__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m3float64__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m3float64__bindgen_ty_1__bindgen_ty_2, x) - 8usize];
    ["Offset of field: m3float64__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m3float64__bindgen_ty_1__bindgen_ty_2, y) - 16usize];
    ["Offset of field: m3float64__bindgen_ty_1__bindgen_ty_2::z"]
        [::std::mem::offset_of!(m3float64__bindgen_ty_1__bindgen_ty_2, z) - 24usize];
    ["Offset of field: m3float64__bindgen_ty_1__bindgen_ty_2::xy"]
        [::std::mem::offset_of!(m3float64__bindgen_ty_1__bindgen_ty_2, xy) - 32usize];
    ["Offset of field: m3float64__bindgen_ty_1__bindgen_ty_2::yz"]
        [::std::mem::offset_of!(m3float64__bindgen_ty_1__bindgen_ty_2, yz) - 40usize];
    ["Offset of field: m3float64__bindgen_ty_1__bindgen_ty_2::zx"]
        [::std::mem::offset_of!(m3float64__bindgen_ty_1__bindgen_ty_2, zx) - 48usize];
    ["Offset of field: m3float64__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m3float64__bindgen_ty_1__bindgen_ty_2, i) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3float64__bindgen_ty_1__bindgen_ty_3 {
    pub e: float64,
    pub e1: float64,
    pub e2: float64,
    pub e3: float64,
    pub e12: float64,
    pub e23: float64,
    pub e31: float64,
    pub e123: float64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3float64__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m3float64__bindgen_ty_1__bindgen_ty_3>() - 64usize];
    ["Alignment of m3float64__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m3float64__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: m3float64__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m3float64__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m3float64__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m3float64__bindgen_ty_1__bindgen_ty_3, e1) - 8usize];
    ["Offset of field: m3float64__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m3float64__bindgen_ty_1__bindgen_ty_3, e2) - 16usize];
    ["Offset of field: m3float64__bindgen_ty_1__bindgen_ty_3::e3"]
        [::std::mem::offset_of!(m3float64__bindgen_ty_1__bindgen_ty_3, e3) - 24usize];
    ["Offset of field: m3float64__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m3float64__bindgen_ty_1__bindgen_ty_3, e12) - 32usize];
    ["Offset of field: m3float64__bindgen_ty_1__bindgen_ty_3::e23"]
        [::std::mem::offset_of!(m3float64__bindgen_ty_1__bindgen_ty_3, e23) - 40usize];
    ["Offset of field: m3float64__bindgen_ty_1__bindgen_ty_3::e31"]
        [::std::mem::offset_of!(m3float64__bindgen_ty_1__bindgen_ty_3, e31) - 48usize];
    ["Offset of field: m3float64__bindgen_ty_1__bindgen_ty_3::e123"]
        [::std::mem::offset_of!(m3float64__bindgen_ty_1__bindgen_ty_3, e123) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3float64__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [float64; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3float64__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m3float64__bindgen_ty_1__bindgen_ty_4>() - 64usize];
    ["Alignment of m3float64__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m3float64__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Offset of field: m3float64__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m3float64__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3float64__bindgen_ty_1"][::std::mem::size_of::<m3float64__bindgen_ty_1>() - 64usize];
    ["Alignment of m3float64__bindgen_ty_1"]
        [::std::mem::align_of::<m3float64__bindgen_ty_1>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m3float64"][::std::mem::size_of::<m3float64>() - 64usize];
    ["Alignment of m3float64"][::std::mem::align_of::<m3float64>() - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m4float64 {
    pub __bindgen_anon_1: m4float64__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m4float64__bindgen_ty_1 {
    pub __bindgen_anon_1: m4float64__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m4float64__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m4float64__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m4float64__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4float64__bindgen_ty_1__bindgen_ty_1 {
    pub u0: float64,
    pub u1: [float64; 4usize],
    pub u2: [float64; 6usize],
    pub u3: [float64; 4usize],
    pub u4: float64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4float64__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m4float64__bindgen_ty_1__bindgen_ty_1>() - 128usize];
    ["Alignment of m4float64__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m4float64__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_1, u1) - 8usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_1, u2) - 40usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_1::u3"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_1, u3) - 88usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_1::u4"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_1, u4) - 120usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4float64__bindgen_ty_1__bindgen_ty_2 {
    pub a: float64,
    pub x: float64,
    pub y: float64,
    pub z: float64,
    pub v: float64,
    pub xy: float64,
    pub yz: float64,
    pub zv: float64,
    pub vx: float64,
    pub xz: float64,
    pub yv: float64,
    pub xyz: float64,
    pub yzv: float64,
    pub zvx: float64,
    pub vxy: float64,
    pub i: float64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4float64__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m4float64__bindgen_ty_1__bindgen_ty_2>() - 128usize];
    ["Alignment of m4float64__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m4float64__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_2, x) - 8usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_2, y) - 16usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_2::z"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_2, z) - 24usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_2::v"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_2, v) - 32usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_2::xy"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_2, xy) - 40usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_2::yz"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_2, yz) - 48usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_2::zv"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_2, zv) - 56usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_2::vx"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_2, vx) - 64usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_2::xz"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_2, xz) - 72usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_2::yv"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_2, yv) - 80usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_2::xyz"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_2, xyz) - 88usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_2::yzv"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_2, yzv) - 96usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_2::zvx"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_2, zvx) - 104usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_2::vxy"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_2, vxy) - 112usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_2, i) - 120usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4float64__bindgen_ty_1__bindgen_ty_3 {
    pub e: float64,
    pub e1: float64,
    pub e2: float64,
    pub e3: float64,
    pub e4: float64,
    pub e12: float64,
    pub e23: float64,
    pub e34: float64,
    pub e41: float64,
    pub e13: float64,
    pub e24: float64,
    pub e123: float64,
    pub e234: float64,
    pub e341: float64,
    pub e412: float64,
    pub e1234: float64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4float64__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m4float64__bindgen_ty_1__bindgen_ty_3>() - 128usize];
    ["Alignment of m4float64__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m4float64__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_3, e1) - 8usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_3, e2) - 16usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_3::e3"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_3, e3) - 24usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_3::e4"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_3, e4) - 32usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_3, e12) - 40usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_3::e23"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_3, e23) - 48usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_3::e34"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_3, e34) - 56usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_3::e41"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_3, e41) - 64usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_3::e13"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_3, e13) - 72usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_3::e24"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_3, e24) - 80usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_3::e123"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_3, e123) - 88usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_3::e234"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_3, e234) - 96usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_3::e341"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_3, e341) - 104usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_3::e412"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_3, e412) - 112usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_3::e1234"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_3, e1234) - 120usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4float64__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [float64; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4float64__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m4float64__bindgen_ty_1__bindgen_ty_4>() - 128usize];
    ["Alignment of m4float64__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m4float64__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Offset of field: m4float64__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m4float64__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4float64__bindgen_ty_1"]
        [::std::mem::size_of::<m4float64__bindgen_ty_1>() - 128usize];
    ["Alignment of m4float64__bindgen_ty_1"]
        [::std::mem::align_of::<m4float64__bindgen_ty_1>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m4float64"][::std::mem::size_of::<m4float64>() - 128usize];
    ["Alignment of m4float64"][::std::mem::align_of::<m4float64>() - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m5float64 {
    pub __bindgen_anon_1: m5float64__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m5float64__bindgen_ty_1 {
    pub __bindgen_anon_1: m5float64__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: m5float64__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: m5float64__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: m5float64__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5float64__bindgen_ty_1__bindgen_ty_1 {
    pub u0: float64,
    pub u1: [float64; 5usize],
    pub u2: [float64; 10usize],
    pub u3: [float64; 10usize],
    pub u4: [float64; 5usize],
    pub u5: float64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5float64__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<m5float64__bindgen_ty_1__bindgen_ty_1>() - 256usize];
    ["Alignment of m5float64__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<m5float64__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_1::u0"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_1, u0) - 0usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_1::u1"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_1, u1) - 8usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_1::u2"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_1, u2) - 48usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_1::u3"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_1, u3) - 128usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_1::u4"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_1, u4) - 208usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_1::u5"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_1, u5) - 248usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5float64__bindgen_ty_1__bindgen_ty_2 {
    pub a: float64,
    pub x: float64,
    pub y: float64,
    pub z: float64,
    pub v: float64,
    pub w: float64,
    pub xy: float64,
    pub yz: float64,
    pub zv: float64,
    pub vw: float64,
    pub wx: float64,
    pub xz: float64,
    pub yv: float64,
    pub zw: float64,
    pub vx: float64,
    pub wy: float64,
    pub xyz: float64,
    pub yzv: float64,
    pub zvw: float64,
    pub vwx: float64,
    pub wxy: float64,
    pub xyv: float64,
    pub yzw: float64,
    pub zvx: float64,
    pub vwy: float64,
    pub wxz: float64,
    pub xyzv: float64,
    pub yzvw: float64,
    pub zvwx: float64,
    pub vwxy: float64,
    pub wxyz: float64,
    pub i: float64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5float64__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<m5float64__bindgen_ty_1__bindgen_ty_2>() - 256usize];
    ["Alignment of m5float64__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<m5float64__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::a"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, a) - 0usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::x"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, x) - 8usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::y"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, y) - 16usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::z"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, z) - 24usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::v"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, v) - 32usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::w"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, w) - 40usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::xy"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, xy) - 48usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::yz"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, yz) - 56usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::zv"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, zv) - 64usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::vw"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, vw) - 72usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::wx"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, wx) - 80usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::xz"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, xz) - 88usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::yv"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, yv) - 96usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::zw"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, zw) - 104usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::vx"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, vx) - 112usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::wy"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, wy) - 120usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::xyz"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, xyz) - 128usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::yzv"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, yzv) - 136usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::zvw"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, zvw) - 144usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::vwx"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, vwx) - 152usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::wxy"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, wxy) - 160usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::xyv"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, xyv) - 168usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::yzw"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, yzw) - 176usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::zvx"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, zvx) - 184usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::vwy"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, vwy) - 192usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::wxz"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, wxz) - 200usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::xyzv"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, xyzv) - 208usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::yzvw"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, yzvw) - 216usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::zvwx"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, zvwx) - 224usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::vwxy"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, vwxy) - 232usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::wxyz"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, wxyz) - 240usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_2::i"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_2, i) - 248usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5float64__bindgen_ty_1__bindgen_ty_3 {
    pub e: float64,
    pub e1: float64,
    pub e2: float64,
    pub e3: float64,
    pub e4: float64,
    pub e5: float64,
    pub e12: float64,
    pub e23: float64,
    pub e34: float64,
    pub e45: float64,
    pub e51: float64,
    pub e13: float64,
    pub e24: float64,
    pub e35: float64,
    pub e41: float64,
    pub e52: float64,
    pub e123: float64,
    pub e234: float64,
    pub e345: float64,
    pub e451: float64,
    pub e512: float64,
    pub e124: float64,
    pub e235: float64,
    pub e341: float64,
    pub e452: float64,
    pub e513: float64,
    pub e1234: float64,
    pub e2345: float64,
    pub e3451: float64,
    pub e4512: float64,
    pub e5123: float64,
    pub e12345: float64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5float64__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<m5float64__bindgen_ty_1__bindgen_ty_3>() - 256usize];
    ["Alignment of m5float64__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<m5float64__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e) - 0usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e1"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e1) - 8usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e2"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e2) - 16usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e3"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e3) - 24usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e4"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e4) - 32usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e5"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e5) - 40usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e12"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e12) - 48usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e23"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e23) - 56usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e34"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e34) - 64usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e45"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e45) - 72usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e51"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e51) - 80usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e13"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e13) - 88usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e24"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e24) - 96usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e35"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e35) - 104usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e41"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e41) - 112usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e52"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e52) - 120usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e123"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e123) - 128usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e234"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e234) - 136usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e345"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e345) - 144usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e451"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e451) - 152usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e512"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e512) - 160usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e124"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e124) - 168usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e235"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e235) - 176usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e341"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e341) - 184usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e452"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e452) - 192usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e513"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e513) - 200usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e1234"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e1234) - 208usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e2345"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e2345) - 216usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e3451"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e3451) - 224usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e4512"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e4512) - 232usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e5123"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e5123) - 240usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_3::e12345"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_3, e12345) - 248usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m5float64__bindgen_ty_1__bindgen_ty_4 {
    pub coef: [float64; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5float64__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<m5float64__bindgen_ty_1__bindgen_ty_4>() - 256usize];
    ["Alignment of m5float64__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<m5float64__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Offset of field: m5float64__bindgen_ty_1__bindgen_ty_4::coef"]
        [::std::mem::offset_of!(m5float64__bindgen_ty_1__bindgen_ty_4, coef) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5float64__bindgen_ty_1"]
        [::std::mem::size_of::<m5float64__bindgen_ty_1>() - 256usize];
    ["Alignment of m5float64__bindgen_ty_1"]
        [::std::mem::align_of::<m5float64__bindgen_ty_1>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m5float64"][::std::mem::size_of::<m5float64>() - 256usize];
    ["Alignment of m5float64"][::std::mem::align_of::<m5float64>() - 8usize];
};
pub type voidfunc = ::std::option::Option<unsafe extern "C" fn()>;
pub type ob_retort = int64;
pub type ob_translation_func =
    ::std::option::Option<unsafe extern "C" fn(err: ob_retort) -> *const ::std::os::raw::c_char>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _slaw {
    _unused: [u8; 0],
}
pub type slaw = *mut _slaw;
pub type bslaw = *const _slaw;
pub type protein = slaw;
pub type bprotein = bslaw;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _slaw_bundle {
    _unused: [u8; 0],
}
pub type slabu = _slaw_bundle;
pub const Protein_Search_Type_SEARCH_GAP: Protein_Search_Type = 0;
pub const Protein_Search_Type_SEARCH_CONTIG: Protein_Search_Type = 1;
pub type Protein_Search_Type = ::std::os::raw::c_uint;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 128usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 8usize];
    ["Offset of field: __mbstate_t::__mbstate8"]
        [::std::mem::offset_of!(__mbstate_t, __mbstate8) - 0usize];
    ["Offset of field: __mbstate_t::_mbstateL"]
        [::std::mem::offset_of!(__mbstate_t, _mbstateL) - 0usize];
};
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_pthread_handler_rec"]
        [::std::mem::size_of::<__darwin_pthread_handler_rec>() - 24usize];
    ["Alignment of __darwin_pthread_handler_rec"]
        [::std::mem::align_of::<__darwin_pthread_handler_rec>() - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__routine"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __routine) - 0usize];
    ["Offset of field: __darwin_pthread_handler_rec::__arg"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __arg) - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__next"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __next) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_attr_t"][::std::mem::size_of::<_opaque_pthread_attr_t>() - 64usize];
    ["Alignment of _opaque_pthread_attr_t"]
        [::std::mem::align_of::<_opaque_pthread_attr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_attr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_attr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_cond_t"][::std::mem::size_of::<_opaque_pthread_cond_t>() - 48usize];
    ["Alignment of _opaque_pthread_cond_t"]
        [::std::mem::align_of::<_opaque_pthread_cond_t>() - 8usize];
    ["Offset of field: _opaque_pthread_cond_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_cond_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_condattr_t"]
        [::std::mem::size_of::<_opaque_pthread_condattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_condattr_t"]
        [::std::mem::align_of::<_opaque_pthread_condattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_condattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_condattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutex_t"][::std::mem::size_of::<_opaque_pthread_mutex_t>() - 64usize];
    ["Alignment of _opaque_pthread_mutex_t"]
        [::std::mem::align_of::<_opaque_pthread_mutex_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutex_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutex_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutexattr_t"]
        [::std::mem::size_of::<_opaque_pthread_mutexattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_mutexattr_t"]
        [::std::mem::align_of::<_opaque_pthread_mutexattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_once_t"][::std::mem::size_of::<_opaque_pthread_once_t>() - 16usize];
    ["Alignment of _opaque_pthread_once_t"]
        [::std::mem::align_of::<_opaque_pthread_once_t>() - 8usize];
    ["Offset of field: _opaque_pthread_once_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_once_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlock_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlock_t>() - 200usize];
    ["Alignment of _opaque_pthread_rwlock_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlock_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlockattr_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlockattr_t>() - 24usize];
    ["Alignment of _opaque_pthread_rwlockattr_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_t"][::std::mem::size_of::<_opaque_pthread_t>() - 8192usize];
    ["Alignment of _opaque_pthread_t"][::std::mem::align_of::<_opaque_pthread_t>() - 8usize];
    ["Offset of field: _opaque_pthread_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_t::__cleanup_stack"]
        [::std::mem::offset_of!(_opaque_pthread_t, __cleanup_stack) - 8usize];
    ["Offset of field: _opaque_pthread_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_t, __opaque) - 16usize];
};
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::std::os::raw::c_int;
pub type pool_timestamp = float64;
pub const time_comparison_OB_CLOSEST: time_comparison = 0;
pub const time_comparison_OB_CLOSEST_LOWER: time_comparison = 1;
pub const time_comparison_OB_CLOSEST_HIGHER: time_comparison = 2;
pub type time_comparison = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pool_hose_struct {
    _unused: [u8; 0],
}
pub type pool_hose = *mut pool_hose_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pool_context_struct {
    _unused: [u8; 0],
}
pub type pool_context = *mut pool_context_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pool_fetch_op {
    pub idx: int64,
    pub want_descrips: bool,
    pub want_ingests: bool,
    pub rude_offset: int64,
    pub rude_length: int64,
    pub tort: ob_retort,
    pub ts: float64,
    pub total_bytes: int64,
    pub descrip_bytes: int64,
    pub ingest_bytes: int64,
    pub rude_bytes: int64,
    pub num_descrips: int64,
    pub num_ingests: int64,
    pub p: protein,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pool_fetch_op"][::std::mem::size_of::<pool_fetch_op>() - 104usize];
    ["Alignment of pool_fetch_op"][::std::mem::align_of::<pool_fetch_op>() - 8usize];
    ["Offset of field: pool_fetch_op::idx"][::std::mem::offset_of!(pool_fetch_op, idx) - 0usize];
    ["Offset of field: pool_fetch_op::want_descrips"]
        [::std::mem::offset_of!(pool_fetch_op, want_descrips) - 8usize];
    ["Offset of field: pool_fetch_op::want_ingests"]
        [::std::mem::offset_of!(pool_fetch_op, want_ingests) - 9usize];
    ["Offset of field: pool_fetch_op::rude_offset"]
        [::std::mem::offset_of!(pool_fetch_op, rude_offset) - 16usize];
    ["Offset of field: pool_fetch_op::rude_length"]
        [::std::mem::offset_of!(pool_fetch_op, rude_length) - 24usize];
    ["Offset of field: pool_fetch_op::tort"][::std::mem::offset_of!(pool_fetch_op, tort) - 32usize];
    ["Offset of field: pool_fetch_op::ts"][::std::mem::offset_of!(pool_fetch_op, ts) - 40usize];
    ["Offset of field: pool_fetch_op::total_bytes"]
        [::std::mem::offset_of!(pool_fetch_op, total_bytes) - 48usize];
    ["Offset of field: pool_fetch_op::descrip_bytes"]
        [::std::mem::offset_of!(pool_fetch_op, descrip_bytes) - 56usize];
    ["Offset of field: pool_fetch_op::ingest_bytes"]
        [::std::mem::offset_of!(pool_fetch_op, ingest_bytes) - 64usize];
    ["Offset of field: pool_fetch_op::rude_bytes"]
        [::std::mem::offset_of!(pool_fetch_op, rude_bytes) - 72usize];
    ["Offset of field: pool_fetch_op::num_descrips"]
        [::std::mem::offset_of!(pool_fetch_op, num_descrips) - 80usize];
    ["Offset of field: pool_fetch_op::num_ingests"]
        [::std::mem::offset_of!(pool_fetch_op, num_ingests) - 88usize];
    ["Offset of field: pool_fetch_op::p"][::std::mem::offset_of!(pool_fetch_op, p) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pool_gang_struct {
    _unused: [u8; 0],
}
pub type pool_gang = *mut pool_gang_struct;
pub type va_list = __darwin_va_list;
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sbuf"][::std::mem::size_of::<__sbuf>() - 16usize];
    ["Alignment of __sbuf"][::std::mem::align_of::<__sbuf>() - 8usize];
    ["Offset of field: __sbuf::_base"][::std::mem::offset_of!(__sbuf, _base) - 0usize];
    ["Offset of field: __sbuf::_size"][::std::mem::offset_of!(__sbuf, _size) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sFILE"][::std::mem::size_of::<__sFILE>() - 152usize];
    ["Alignment of __sFILE"][::std::mem::align_of::<__sFILE>() - 8usize];
    ["Offset of field: __sFILE::_p"][::std::mem::offset_of!(__sFILE, _p) - 0usize];
    ["Offset of field: __sFILE::_r"][::std::mem::offset_of!(__sFILE, _r) - 8usize];
    ["Offset of field: __sFILE::_w"][::std::mem::offset_of!(__sFILE, _w) - 12usize];
    ["Offset of field: __sFILE::_flags"][::std::mem::offset_of!(__sFILE, _flags) - 16usize];
    ["Offset of field: __sFILE::_file"][::std::mem::offset_of!(__sFILE, _file) - 18usize];
    ["Offset of field: __sFILE::_bf"][::std::mem::offset_of!(__sFILE, _bf) - 24usize];
    ["Offset of field: __sFILE::_lbfsize"][::std::mem::offset_of!(__sFILE, _lbfsize) - 40usize];
    ["Offset of field: __sFILE::_cookie"][::std::mem::offset_of!(__sFILE, _cookie) - 48usize];
    ["Offset of field: __sFILE::_close"][::std::mem::offset_of!(__sFILE, _close) - 56usize];
    ["Offset of field: __sFILE::_read"][::std::mem::offset_of!(__sFILE, _read) - 64usize];
    ["Offset of field: __sFILE::_seek"][::std::mem::offset_of!(__sFILE, _seek) - 72usize];
    ["Offset of field: __sFILE::_write"][::std::mem::offset_of!(__sFILE, _write) - 80usize];
    ["Offset of field: __sFILE::_ub"][::std::mem::offset_of!(__sFILE, _ub) - 88usize];
    ["Offset of field: __sFILE::_extra"][::std::mem::offset_of!(__sFILE, _extra) - 104usize];
    ["Offset of field: __sFILE::_ur"][::std::mem::offset_of!(__sFILE, _ur) - 112usize];
    ["Offset of field: __sFILE::_ubuf"][::std::mem::offset_of!(__sFILE, _ubuf) - 116usize];
    ["Offset of field: __sFILE::_nbuf"][::std::mem::offset_of!(__sFILE, _nbuf) - 119usize];
    ["Offset of field: __sFILE::_lb"][::std::mem::offset_of!(__sFILE, _lb) - 120usize];
    ["Offset of field: __sFILE::_blksize"][::std::mem::offset_of!(__sFILE, _blksize) - 136usize];
    ["Offset of field: __sFILE::_offset"][::std::mem::offset_of!(__sFILE, _offset) - 144usize];
};
pub type FILE = __sFILE;
pub type off_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slaw_input_struct {
    _unused: [u8; 0],
}
pub type slaw_input = *mut slaw_input_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slaw_output_struct {
    _unused: [u8; 0],
}
pub type slaw_output = *mut slaw_output_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slaw_read_handler {
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            cookie: *mut ::std::os::raw::c_void,
            buffer: *mut byte,
            size: usize,
            size_read: *mut usize,
        ) -> ob_retort,
    >,
    pub close: ::std::option::Option<
        unsafe extern "C" fn(cookie: *mut ::std::os::raw::c_void) -> ob_retort,
    >,
    pub cookie: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slaw_read_handler"][::std::mem::size_of::<slaw_read_handler>() - 24usize];
    ["Alignment of slaw_read_handler"][::std::mem::align_of::<slaw_read_handler>() - 8usize];
    ["Offset of field: slaw_read_handler::read"]
        [::std::mem::offset_of!(slaw_read_handler, read) - 0usize];
    ["Offset of field: slaw_read_handler::close"]
        [::std::mem::offset_of!(slaw_read_handler, close) - 8usize];
    ["Offset of field: slaw_read_handler::cookie"]
        [::std::mem::offset_of!(slaw_read_handler, cookie) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slaw_write_handler {
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            cookie: *mut ::std::os::raw::c_void,
            buffer: *const byte,
            size: usize,
        ) -> ob_retort,
    >,
    pub flush: ::std::option::Option<
        unsafe extern "C" fn(cookie: *mut ::std::os::raw::c_void) -> ob_retort,
    >,
    pub close: ::std::option::Option<
        unsafe extern "C" fn(cookie: *mut ::std::os::raw::c_void) -> ob_retort,
    >,
    pub cookie: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slaw_write_handler"][::std::mem::size_of::<slaw_write_handler>() - 32usize];
    ["Alignment of slaw_write_handler"][::std::mem::align_of::<slaw_write_handler>() - 8usize];
    ["Offset of field: slaw_write_handler::write"]
        [::std::mem::offset_of!(slaw_write_handler, write) - 0usize];
    ["Offset of field: slaw_write_handler::flush"]
        [::std::mem::offset_of!(slaw_write_handler, flush) - 8usize];
    ["Offset of field: slaw_write_handler::close"]
        [::std::mem::offset_of!(slaw_write_handler, close) - 16usize];
    ["Offset of field: slaw_write_handler::cookie"]
        [::std::mem::offset_of!(slaw_write_handler, cookie) - 24usize];
};
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
unsafe extern "C" {
    pub fn ob_error_string(err: ob_retort) -> *const ::std::os::raw::c_char;
    pub fn ob_error_string_literal(err: ob_retort) -> *const ::std::os::raw::c_char;
    pub fn ob_add_error_names(func: ob_translation_func) -> ob_retort;
    pub fn ob_retort_exists(ret: ob_retort) -> bool;
    pub fn ob_ignore_retort(ret: ob_retort);
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
    pub fn memcpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
    pub fn memmove(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
    pub fn memset(
        __b: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
    pub fn strcat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn strcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
    pub fn strncat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
    pub fn strncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
    pub fn strstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn strtok(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn strxfrm(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
    pub fn strtok_r(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
        __lasts: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __strerrbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
    pub fn strdup(__s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn memccpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
    pub fn stpcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn stpncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
    pub fn strndup(
        __s1: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
    pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: usize) -> usize;
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn memset_s(
        __s: *mut ::std::os::raw::c_void,
        __smax: rsize_t,
        __c: ::std::os::raw::c_int,
        __n: rsize_t,
    ) -> errno_t;
    pub fn memmem(
        __big: *const ::std::os::raw::c_void,
        __big_len: usize,
        __little: *const ::std::os::raw::c_void,
        __little_len: usize,
    ) -> *mut ::std::os::raw::c_void;
    pub fn memset_pattern4(
        __b: *mut ::std::os::raw::c_void,
        __pattern4: *const ::std::os::raw::c_void,
        __len: usize,
    );
    pub fn memset_pattern8(
        __b: *mut ::std::os::raw::c_void,
        __pattern8: *const ::std::os::raw::c_void,
        __len: usize,
    );
    pub fn memset_pattern16(
        __b: *mut ::std::os::raw::c_void,
        __pattern16: *const ::std::os::raw::c_void,
        __len: usize,
    );
    pub fn strcasestr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn strnstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
    pub fn strlcat(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
    pub fn strlcpy(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
    pub fn strmode(__mode: ::std::os::raw::c_int, __bp: *mut ::std::os::raw::c_char);
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn swab(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: isize,
    );
    pub fn timingsafe_bcmp(
        __b1: *const ::std::os::raw::c_void,
        __b2: *const ::std::os::raw::c_void,
        __len: usize,
    ) -> ::std::os::raw::c_int;
    pub fn strsignal_r(
        __sig: ::std::os::raw::c_int,
        __strsignalbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    );
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulong);
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
    pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
    pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
    pub fn ob_generate_uuid(uu: *mut ::std::os::raw::c_char) -> ob_retort;
    pub fn ob_set_program_arguments(
        argc: ::std::os::raw::c_int,
        argv: *const *const ::std::os::raw::c_char,
    );
    pub fn ob_get_program_arguments(
        argc: *mut ::std::os::raw::c_int,
        argv: *mut *const *const ::std::os::raw::c_char,
    );
    pub fn ob_uid_from_name(
        name: *const ::std::os::raw::c_char,
        uid: *mut ::std::os::raw::c_int,
    ) -> ob_retort;
    pub fn ob_gid_from_name(
        name: *const ::std::os::raw::c_char,
        gid: *mut ::std::os::raw::c_int,
    ) -> ob_retort;
    pub fn ob_nop();
    pub fn ob_ignore(foo: int64, ...);
    pub fn ob_get_user_name() -> *const ::std::os::raw::c_char;
    pub fn ob_get_prog_name() -> *const ::std::os::raw::c_char;
    pub fn ob_set_prog_name(newname: *const ::std::os::raw::c_char);
    pub fn ob_setenv(
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ob_retort;
    pub fn ob_unsetenv(name: *const ::std::os::raw::c_char) -> ob_retort;
    pub fn ob_append_env_list(
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ob_retort;
    pub fn ob_prepend_env_list(
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ob_retort;
    pub fn ob_get_small_integer_thread_id(tid: *mut unt32, is_main: *mut bool);
    pub fn ob_running_under_valgrind() -> bool;
    pub fn ob_make_undefined(
        addr: *mut ::std::os::raw::c_void,
        len: usize,
    ) -> *mut ::std::os::raw::c_void;
    pub fn ob_fmt_hex_line(dst: *mut ::std::os::raw::c_char, src: *const unt8, srcLen: usize);
    pub fn pool_create(
        pool_name: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        options: bslaw,
    ) -> ob_retort;
    pub fn pool_create_ctx(
        pool_name: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        options: bslaw,
        ctx: pool_context,
    ) -> ob_retort;
    pub fn pool_dispose(pool_name: *const ::std::os::raw::c_char) -> ob_retort;
    pub fn pool_dispose_ctx(
        pool_name: *const ::std::os::raw::c_char,
        ctx: pool_context,
    ) -> ob_retort;
    pub fn pool_rename(
        old_name: *const ::std::os::raw::c_char,
        new_name: *const ::std::os::raw::c_char,
    ) -> ob_retort;
    pub fn pool_rename_ctx(
        old_name: *const ::std::os::raw::c_char,
        new_name: *const ::std::os::raw::c_char,
        ctx: pool_context,
    ) -> ob_retort;
    pub fn pool_exists(pool_name: *const ::std::os::raw::c_char) -> ob_retort;
    pub fn pool_exists_ctx(
        pool_name: *const ::std::os::raw::c_char,
        ctx: pool_context,
    ) -> ob_retort;
    pub fn pool_validate_name(pool_name: *const ::std::os::raw::c_char) -> ob_retort;
    pub fn pool_sleep(pool_name: *const ::std::os::raw::c_char) -> ob_retort;
    pub fn pool_sleep_ctx(pool_name: *const ::std::os::raw::c_char, ctx: pool_context)
        -> ob_retort;
    pub fn pool_check_in_use(pool_name: *const ::std::os::raw::c_char) -> ob_retort;
    pub fn pool_check_in_use_ctx(
        pool_name: *const ::std::os::raw::c_char,
        ctx: pool_context,
    ) -> ob_retort;
    pub fn pool_participate(
        pool_name: *const ::std::os::raw::c_char,
        ret_ph: *mut pool_hose,
        options: bslaw,
    ) -> ob_retort;
    pub fn pool_participate_ctx(
        pool_name: *const ::std::os::raw::c_char,
        ret_ph: *mut pool_hose,
        ctx: pool_context,
    ) -> ob_retort;
    pub fn pool_participate_creatingly(
        pool_name: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        ret_ph: *mut pool_hose,
        options: bslaw,
    ) -> ob_retort;
    pub fn pool_participate_creatingly_ctx(
        pool_name: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        ret_ph: *mut pool_hose,
        create_options: bslaw,
        ctx: pool_context,
    ) -> ob_retort;
    pub fn pool_hose_clone(orig_ph: pool_hose, new_ph: *mut pool_hose) -> ob_retort;
    pub fn pool_withdraw(ph: pool_hose) -> ob_retort;
    pub fn pool_list_ex(uri: *const ::std::os::raw::c_char, ret_slaw: *mut slaw) -> ob_retort;
    pub fn pool_list_ctx(
        uri: *const ::std::os::raw::c_char,
        ret_slaw: *mut slaw,
        ctx: pool_context,
    ) -> ob_retort;
    pub fn pool_advance_oldest(ph: pool_hose, idx_in: int64) -> ob_retort;
    pub fn pool_change_options(ph: pool_hose, options: bslaw) -> ob_retort;
    pub fn pool_seekto_time(
        ph: pool_hose,
        timestamp: float64,
        time_bound: time_comparison,
    ) -> ob_retort;
    pub fn pool_seekby_time(
        ph: pool_hose,
        relative_time: float64,
        time_bound: time_comparison,
    ) -> ob_retort;
    pub fn pool_name(ph: pool_hose) -> *const ::std::os::raw::c_char;
    pub fn pool_set_hose_name(ph: pool_hose, name: *const ::std::os::raw::c_char) -> ob_retort;
    pub fn pool_get_hose_name(ph: pool_hose) -> *const ::std::os::raw::c_char;
    pub fn pool_get_info(ph: pool_hose, hops: int64, return_prot: *mut protein) -> ob_retort;
    pub fn pool_newest_index(ph: pool_hose, index_out: *mut int64) -> ob_retort;
    pub fn pool_oldest_index(ph: pool_hose, index_out: *mut int64) -> ob_retort;
    pub fn pool_index(ph: pool_hose, index_out: *mut int64) -> ob_retort;
    pub fn pool_rewind(ph: pool_hose) -> ob_retort;
    pub fn pool_tolast(ph: pool_hose) -> ob_retort;
    pub fn pool_runout(ph: pool_hose) -> ob_retort;
    pub fn pool_frwdby(ph: pool_hose, indoff: int64) -> ob_retort;
    pub fn pool_backby(ph: pool_hose, indoff: int64) -> ob_retort;
    pub fn pool_seekto(ph: pool_hose, idx: int64) -> ob_retort;
    pub fn pool_deposit(ph: pool_hose, p: bprotein, idx: *mut int64) -> ob_retort;
    pub fn pool_deposit_ex(
        ph: pool_hose,
        p: bprotein,
        idx: *mut int64,
        ret_ts: *mut pool_timestamp,
    ) -> ob_retort;
    pub fn pool_nth_protein(
        ph: pool_hose,
        idx: int64,
        ret_prot: *mut protein,
        ret_ts: *mut pool_timestamp,
    ) -> ob_retort;
    pub fn pool_next(
        ph: pool_hose,
        ret_prot: *mut protein,
        ret_ts: *mut pool_timestamp,
        ret_index: *mut int64,
    ) -> ob_retort;
    pub fn pool_await_next(
        ph: pool_hose,
        timeout: pool_timestamp,
        ret_prot: *mut protein,
        ret_ts: *mut pool_timestamp,
        ret_index: *mut int64,
    ) -> ob_retort;
    pub fn pool_hose_enable_wakeup(ph: pool_hose) -> ob_retort;
    pub fn pool_hose_wake_up(ph: pool_hose) -> ob_retort;
    pub fn pool_curr(
        ph: pool_hose,
        ret_prot: *mut protein,
        ret_ts: *mut pool_timestamp,
    ) -> ob_retort;
    pub fn pool_prev(
        ph: pool_hose,
        ret_prot: *mut protein,
        ret_ts: *mut pool_timestamp,
        ret_index: *mut int64,
    ) -> ob_retort;
    pub fn pool_probe_frwd(
        ph: pool_hose,
        search: bslaw,
        ret_prot: *mut protein,
        ret_ts: *mut pool_timestamp,
        idx: *mut int64,
    ) -> ob_retort;
    pub fn pool_await_probe_frwd(
        ph: pool_hose,
        search: bslaw,
        timeout: pool_timestamp,
        ret_prot: *mut protein,
        ret_ts: *mut pool_timestamp,
        idx: *mut int64,
    ) -> ob_retort;
    pub fn pool_probe_back(
        ph: pool_hose,
        search: bslaw,
        ret_prot: *mut protein,
        ret_ts: *mut pool_timestamp,
        idx: *mut int64,
    ) -> ob_retort;
    pub fn pool_fetch(
        ph: pool_hose,
        ops: *mut pool_fetch_op,
        nops: int64,
        oldest_idx_out: *mut int64,
        newest_idx_out: *mut int64,
    );
    pub fn pool_fetch_ex(
        ph: pool_hose,
        ops: *mut pool_fetch_op,
        nops: int64,
        oldest_idx_out: *mut int64,
        newest_idx_out: *mut int64,
        clamp: bool,
    );
    pub fn pool_new_gang(gang: *mut pool_gang) -> ob_retort;
    pub fn pool_join_gang(gang: pool_gang, ph: pool_hose) -> ob_retort;
    pub fn pool_leave_gang(gang: pool_gang, ph: pool_hose) -> ob_retort;
    pub fn pool_disband_gang(gang: pool_gang, withdraw: bool) -> ob_retort;
    pub fn pool_gang_count(gang: pool_gang) -> int64;
    pub fn pool_gang_nth(gang: pool_gang, n: int64) -> pool_hose;
    pub fn pool_next_multi(
        gang: pool_gang,
        ph: *mut pool_hose,
        ret_prot: *mut protein,
        ret_ts: *mut pool_timestamp,
        ret_index: *mut int64,
    ) -> ob_retort;
    pub fn pool_await_next_multi(
        gang: pool_gang,
        timeout: pool_timestamp,
        ph: *mut pool_hose,
        ret_prot: *mut protein,
        ret_ts: *mut pool_timestamp,
        ret_index: *mut int64,
    ) -> ob_retort;
    pub fn pool_await_multi(gang: pool_gang, timeout: pool_timestamp) -> ob_retort;
    pub fn pool_gang_wake_up(gang: pool_gang) -> ob_retort;
    pub fn pool_new_context(ctx: *mut pool_context) -> ob_retort;
    pub fn pool_free_context(ctx: pool_context);
    pub fn pool_ctx_set_options(ctx: pool_context, opts: bslaw) -> ob_retort;
    pub fn pool_ctx_get_options(ctx: pool_context) -> bslaw;
    pub fn pool_disable_atfork_handlers();
    pub fn pool_enable_atfork_handlers();
    pub fn protein_from(descrips: bslaw, ingests: bslaw) -> protein;
    pub fn protein_from_ff(descrips: slaw, ingests: slaw) -> protein;
    pub fn protein_from_lf(descrips: bslaw, ingests: slaw) -> protein;
    pub fn protein_from_fl(descrips: slaw, ingests: bslaw) -> protein;
    pub fn protein_from_llr(
        descrips: bslaw,
        ingests: bslaw,
        rude: *const ::std::os::raw::c_void,
        rude_len: int64,
    ) -> protein;
    pub fn protein_from_ffr(
        descrips: slaw,
        ingests: slaw,
        rude: *const ::std::os::raw::c_void,
        rude_len: int64,
    ) -> protein;
    pub fn protein_from_lfr(
        descrips: bslaw,
        ingests: slaw,
        rude: *const ::std::os::raw::c_void,
        rude_len: int64,
    ) -> protein;
    pub fn protein_from_flr(
        descrips: slaw,
        ingests: bslaw,
        rude: *const ::std::os::raw::c_void,
        rude_len: int64,
    ) -> protein;
    pub fn protein_descrips(prot: bprotein) -> bslaw;
    pub fn protein_ingests(prot: bprotein) -> bslaw;
    pub fn protein_rude(prot: bprotein, len: *mut int64) -> *const ::std::os::raw::c_void;
    pub fn protein_search(haystack: bprotein, needle: bslaw) -> int64;
    pub fn protein_search_ex(haystack: bprotein, needle: bslaw, how: Protein_Search_Type) -> int64;
    pub fn protein_is_empty(p: bprotein) -> bool;
    pub fn protein_is_nonstandard(p: bprotein) -> bool;
    pub fn protein_swap_endian(p: protein) -> ob_retort;
    pub fn protein_fix_endian(p: protein) -> ob_retort;
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
    pub static mut __stdinp: *mut FILE;
    pub static mut __stdoutp: *mut FILE;
    pub static mut __stderrp: *mut FILE;
    pub fn clearerr(arg1: *mut FILE);
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar() -> ::std::os::raw::c_int;
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn perror(arg1: *const ::std::os::raw::c_char);
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn rewind(arg1: *mut FILE);
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
    pub fn flockfile(arg1: *mut FILE);
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn funlockfile(arg1: *mut FILE);
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn ftello(__stream: *mut FILE) -> off_t;
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> isize;
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __stream: *mut FILE,
    ) -> isize;
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: usize,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut usize,
    ) -> *mut FILE;
    pub static sys_nerr: ::std::os::raw::c_int;
    pub static sys_errlist: [*const ::std::os::raw::c_char; 0usize];
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut ::std::os::raw::c_char;
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
    pub fn __sprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn __snprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn __vsprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        arg5: va_list,
    ) -> ::std::os::raw::c_int;
    pub fn __vsnprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        arg6: va_list,
    ) -> ::std::os::raw::c_int;
    pub fn slaw_is_protein(s: bslaw) -> bool;
    pub fn slaw_is_swapped_protein(s: bslaw) -> bool;
    pub fn slabu_new() -> *mut slabu;
    pub fn slabu_count(sb: *const slabu) -> int64;
    pub fn slabu_list_nth(sb: *const slabu, n: int64) -> bslaw;
    pub fn slabu_free(sb: *mut slabu);
    pub fn slabu_from_slaw(list: bslaw) -> *mut slabu;
    pub fn slabu_from_slaw_f(list: slaw) -> *mut slabu;
    pub fn slabu_dup(sb: *const slabu) -> *mut slabu;
    pub fn slabu_list_add(sb: *mut slabu, s: bslaw) -> int64;
    pub fn slabu_list_add_f(sb: *mut slabu, s: slaw) -> int64;
    pub fn slabu_list_add_c(sb: *mut slabu, str_: *const ::std::os::raw::c_char) -> int64;
    pub fn slabu_list_add_z(sb: *mut slabu, s: bslaw) -> int64;
    pub fn slabu_list_add_x(sb: *mut slabu, s: slaw) -> int64;
    pub fn slabu_list_remove(sb: *mut slabu, s: bslaw) -> ob_retort;
    pub fn slabu_list_remove_f(sb: *mut slabu, s: slaw) -> ob_retort;
    pub fn slabu_list_remove_c(sb: *mut slabu, str_: *const ::std::os::raw::c_char) -> ob_retort;
    pub fn slabu_list_remove_nth(sb: *mut slabu, nth: int64) -> ob_retort;
    pub fn slabu_list_find(sb: *const slabu, s: bslaw) -> int64;
    pub fn slabu_list_find_f(sb: *const slabu, s: slaw) -> int64;
    pub fn slabu_list_find_c(sb: *const slabu, str_: *const ::std::os::raw::c_char) -> int64;
    pub fn slabu_list_insert(sb: *mut slabu, nth: int64, s: bslaw) -> int64;
    pub fn slabu_list_insert_f(sb: *mut slabu, nth: int64, s: slaw) -> int64;
    pub fn slabu_list_insert_c(
        sb: *mut slabu,
        nth: int64,
        s: *const ::std::os::raw::c_char,
    ) -> int64;
    pub fn slabu_list_insert_z(sb: *mut slabu, nth: int64, s: bslaw) -> int64;
    pub fn slabu_list_insert_x(sb: *mut slabu, nth: int64, s: slaw) -> int64;
    pub fn slabu_list_replace_nth(sb: *mut slabu, nth: int64, s: bslaw) -> int64;
    pub fn slabu_list_replace_nth_f(sb: *mut slabu, nth: int64, s: slaw) -> int64;
    pub fn slabu_list_replace_nth_c(
        sb: *mut slabu,
        nth: int64,
        s: *const ::std::os::raw::c_char,
    ) -> int64;
    pub fn slabu_list_replace_nth_z(sb: *mut slabu, nth: int64, s: bslaw) -> int64;
    pub fn slabu_list_replace_nth_x(sb: *mut slabu, nth: int64, s: slaw) -> int64;
    pub fn slabu_is_map(sb: *const slabu) -> bool;
    pub fn slabu_map_conform(sb: *mut slabu) -> ob_retort;
    pub fn slabu_map_put(sb: *mut slabu, key: bslaw, value: bslaw) -> int64;
    pub fn slabu_map_put_ff(sb: *mut slabu, key: slaw, value: slaw) -> int64;
    pub fn slabu_map_put_lf(sb: *mut slabu, key: bslaw, value: slaw) -> int64;
    pub fn slabu_map_put_fl(sb: *mut slabu, key: slaw, value: bslaw) -> int64;
    pub fn slabu_map_put_cl(
        sb: *mut slabu,
        key: *const ::std::os::raw::c_char,
        value: bslaw,
    ) -> int64;
    pub fn slabu_map_put_cf(
        sb: *mut slabu,
        key: *const ::std::os::raw::c_char,
        value: slaw,
    ) -> int64;
    pub fn slabu_map_put_cc(
        sb: *mut slabu,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> int64;
    pub fn slabu_map_find(sb: *const slabu, key: bslaw, index_out: *mut int64) -> bslaw;
    pub fn slabu_map_find_f(sb: *const slabu, key: slaw, index_out: *mut int64) -> bslaw;
    pub fn slabu_map_find_c(
        sb: *const slabu,
        key: *const ::std::os::raw::c_char,
        index_out: *mut int64,
    ) -> bslaw;
    pub fn slabu_map_remove(sb: *mut slabu, key: bslaw) -> ob_retort;
    pub fn slabu_map_remove_f(sb: *mut slabu, key: slaw) -> ob_retort;
    pub fn slabu_map_remove_c(sb: *mut slabu, key: *const ::std::os::raw::c_char) -> ob_retort;
    pub fn slaw_dup(s: bslaw) -> slaw;
    pub fn slaw_dup_f(s: slaw) -> slaw;
    pub fn slaw_free(s: slaw);
    pub fn slaw_boolean(value: bool) -> slaw;
    pub fn slaw_is_boolean(s: bslaw) -> bool;
    pub fn slaw_boolean_emit(s: bslaw) -> *const bool;
    pub fn slaw_nil() -> slaw;
    pub fn slaw_is_nil(s: bslaw) -> bool;
    pub fn slaw_len(s: bslaw) -> int64;
    pub fn slaw_hash(s: bslaw) -> unt64;
    pub fn slawx_equal(s1: bslaw, s2: bslaw) -> bool;
    pub fn slawx_equal_lf(s1: bslaw, s2: slaw) -> bool;
    pub fn slawx_equal_lc(s: bslaw, str_: *const ::std::os::raw::c_char) -> bool;
    pub fn slaw_string(str_: *const ::std::os::raw::c_char) -> slaw;
    pub fn slaw_string_from_substring(str_: *const ::std::os::raw::c_char, len: int64) -> slaw;
    pub fn slaw_is_string(s: bslaw) -> bool;
    pub fn slaw_string_emit(s: bslaw) -> *const ::std::os::raw::c_char;
    pub fn slaw_string_emit_length(s: bslaw) -> int64;
    pub fn slaw_strings_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_strings_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_strings_concat_c(str1: *const ::std::os::raw::c_char, ...) -> slaw;
    pub fn slaw_string_concat_cstrings_f(s: slaw, str1: *const ::std::os::raw::c_char, ...)
        -> slaw;
    pub fn slaw_string_concat_cstrings(s: bslaw, str1: *const ::std::os::raw::c_char, ...) -> slaw;
    pub fn slaw_is_cons(s: bslaw) -> bool;
    pub fn slaw_cons_emit_car(s: bslaw) -> bslaw;
    pub fn slaw_cons_emit_cdr(s: bslaw) -> bslaw;
    pub fn slaw_cons(car: bslaw, cdr: bslaw) -> slaw;
    pub fn slaw_cons_ff(car: slaw, cdr: slaw) -> slaw;
    pub fn slaw_cons_lf(car: bslaw, cdr: slaw) -> slaw;
    pub fn slaw_cons_fl(car: slaw, cdr: bslaw) -> slaw;
    pub fn slaw_cons_cl(car: *const ::std::os::raw::c_char, cdr: bslaw) -> slaw;
    pub fn slaw_cons_cf(car: *const ::std::os::raw::c_char, cdr: slaw) -> slaw;
    pub fn slaw_cons_lc(car: bslaw, cdr: *const ::std::os::raw::c_char) -> slaw;
    pub fn slaw_cons_fc(car: slaw, cdr: *const ::std::os::raw::c_char) -> slaw;
    pub fn slaw_cons_cc(
        car: *const ::std::os::raw::c_char,
        cdr: *const ::std::os::raw::c_char,
    ) -> slaw;
    pub fn slaw_cons_ca(car: *const ::std::os::raw::c_char, cdr: *const unt8, N: int64) -> slaw;
    pub fn slaw_list_f(sb: *mut slabu) -> slaw;
    pub fn slaw_list(sb: *const slabu) -> slaw;
    pub fn slaw_list_inline_f(s1: slaw, ...) -> slaw;
    pub fn slaw_list_inline(s1: bslaw, ...) -> slaw;
    pub fn slaw_list_inline_c(first_str: *const ::std::os::raw::c_char, ...) -> slaw;
    pub fn slaw_is_list(s: bslaw) -> bool;
    pub fn slaw_is_list_or_map(s: bslaw) -> bool;
    pub fn slaw_list_count(s: bslaw) -> int64;
    pub fn slaw_list_emit_first(s: bslaw) -> bslaw;
    pub fn slaw_list_emit_next(s_list: bslaw, s_prev: bslaw) -> bslaw;
    pub fn slaw_list_emit_nth(s: bslaw, n: int64) -> bslaw;
    pub fn slaw_lists_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_lists_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_list_find(s: bslaw, val: bslaw) -> int64;
    pub fn slaw_list_find_f(s: bslaw, val: slaw) -> int64;
    pub fn slaw_list_find_c(s: bslaw, str_: *const ::std::os::raw::c_char) -> int64;
    pub fn slaw_list_contigsearch(s: bslaw, search: bslaw) -> int64;
    pub fn slaw_list_contigsearch_f(s: bslaw, search: slaw) -> int64;
    pub fn slaw_list_contigsearch_inline(s: bslaw, ...) -> int64;
    pub fn slaw_list_contigsearch_inline_f(s: bslaw, ...) -> int64;
    pub fn slaw_list_contigsearch_inline_c(s: bslaw, ...) -> int64;
    pub fn slaw_list_gapsearch(s: bslaw, search: bslaw) -> int64;
    pub fn slaw_list_gapsearch_f(s: bslaw, search: slaw) -> int64;
    pub fn slaw_list_gapsearch_inline(s: bslaw, ...) -> int64;
    pub fn slaw_list_gapsearch_inline_f(s: bslaw, ...) -> int64;
    pub fn slaw_list_gapsearch_inline_c(s: bslaw, ...) -> int64;
    pub fn slaw_is_map(s: bslaw) -> bool;
    pub fn slaw_map(sb: *const slabu) -> slaw;
    pub fn slaw_map_f(sb: *mut slabu) -> slaw;
    pub fn slaw_map_empty() -> slaw;
    pub fn slaw_map_inline(key1: bslaw, val1: bslaw, ...) -> slaw;
    pub fn slaw_map_inline_ff(key1: slaw, val1: slaw, ...) -> slaw;
    pub fn slaw_map_inline_cc(
        key1: *const ::std::os::raw::c_char,
        val1: *const ::std::os::raw::c_char,
        ...
    ) -> slaw;
    pub fn slaw_map_inline_cl(key1: *const ::std::os::raw::c_char, val1: bslaw, ...) -> slaw;
    pub fn slaw_map_inline_cf(key1: *const ::std::os::raw::c_char, val1: slaw, ...) -> slaw;
    pub fn slaw_maps_merge(map1: bslaw, ...) -> slaw;
    pub fn slaw_maps_merge_f(map1: slaw, ...) -> slaw;
    pub fn slaw_maps_merge_byarray(maps: *const bslaw, nmaps: int64) -> slaw;
    pub fn slaw_map_find(s: bslaw, key: bslaw) -> bslaw;
    pub fn slaw_map_find_f(s: bslaw, key: slaw) -> bslaw;
    pub fn slaw_map_find_c(s: bslaw, key: *const ::std::os::raw::c_char) -> bslaw;
    pub fn slaw_int32(val: int32) -> slaw;
    pub fn slaw_is_int32(s: bslaw) -> bool;
    pub fn slaw_is_int32_array(s: bslaw) -> bool;
    pub fn slaw_int32_emit_nocheck(s: bslaw) -> *const int32;
    pub fn slaw_int32_emit(s: bslaw) -> *const int32;
    pub fn slaw_int32_array_raw(N: int64, array_out: *mut *mut int32) -> slaw;
    pub fn slaw_int32_array_empty(N: int64) -> slaw;
    pub fn slaw_int32_array_filled(N: int64, val: int32) -> slaw;
    pub fn slaw_int32_array(src: *const int32, N: int64) -> slaw;
    pub fn slaw_int32_array_emit(s: bslaw) -> *const int32;
    pub fn slaw_int32_array_emit_nth(s: bslaw, N: int64) -> *const int32;
    pub fn slaw_int32_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_int32_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_int32_array_concat_carray_f(s: slaw, src: *const int32, N: int64) -> slaw;
    pub fn slaw_int32_array_concat_carray(s: bslaw, src: *const int32, N: int64) -> slaw;
    pub fn slaw_unt32(val: unt32) -> slaw;
    pub fn slaw_is_unt32(s: bslaw) -> bool;
    pub fn slaw_is_unt32_array(s: bslaw) -> bool;
    pub fn slaw_unt32_emit_nocheck(s: bslaw) -> *const unt32;
    pub fn slaw_unt32_emit(s: bslaw) -> *const unt32;
    pub fn slaw_unt32_array_raw(N: int64, array_out: *mut *mut unt32) -> slaw;
    pub fn slaw_unt32_array_empty(N: int64) -> slaw;
    pub fn slaw_unt32_array_filled(N: int64, val: unt32) -> slaw;
    pub fn slaw_unt32_array(src: *const unt32, N: int64) -> slaw;
    pub fn slaw_unt32_array_emit(s: bslaw) -> *const unt32;
    pub fn slaw_unt32_array_emit_nth(s: bslaw, N: int64) -> *const unt32;
    pub fn slaw_unt32_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_unt32_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_unt32_array_concat_carray_f(s: slaw, src: *const unt32, N: int64) -> slaw;
    pub fn slaw_unt32_array_concat_carray(s: bslaw, src: *const unt32, N: int64) -> slaw;
    pub fn slaw_int64(val: int64) -> slaw;
    pub fn slaw_is_int64(s: bslaw) -> bool;
    pub fn slaw_is_int64_array(s: bslaw) -> bool;
    pub fn slaw_int64_emit_nocheck(s: bslaw) -> *const int64;
    pub fn slaw_int64_emit(s: bslaw) -> *const int64;
    pub fn slaw_int64_array_raw(N: int64, array_out: *mut *mut int64) -> slaw;
    pub fn slaw_int64_array_empty(N: int64) -> slaw;
    pub fn slaw_int64_array_filled(N: int64, val: int64) -> slaw;
    pub fn slaw_int64_array(src: *const int64, N: int64) -> slaw;
    pub fn slaw_int64_array_emit(s: bslaw) -> *const int64;
    pub fn slaw_int64_array_emit_nth(s: bslaw, N: int64) -> *const int64;
    pub fn slaw_int64_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_int64_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_int64_array_concat_carray_f(s: slaw, src: *const int64, N: int64) -> slaw;
    pub fn slaw_int64_array_concat_carray(s: bslaw, src: *const int64, N: int64) -> slaw;
    pub fn slaw_unt64(val: unt64) -> slaw;
    pub fn slaw_is_unt64(s: bslaw) -> bool;
    pub fn slaw_is_unt64_array(s: bslaw) -> bool;
    pub fn slaw_unt64_emit_nocheck(s: bslaw) -> *const unt64;
    pub fn slaw_unt64_emit(s: bslaw) -> *const unt64;
    pub fn slaw_unt64_array_raw(N: int64, array_out: *mut *mut unt64) -> slaw;
    pub fn slaw_unt64_array_empty(N: int64) -> slaw;
    pub fn slaw_unt64_array_filled(N: int64, val: unt64) -> slaw;
    pub fn slaw_unt64_array(src: *const unt64, N: int64) -> slaw;
    pub fn slaw_unt64_array_emit(s: bslaw) -> *const unt64;
    pub fn slaw_unt64_array_emit_nth(s: bslaw, N: int64) -> *const unt64;
    pub fn slaw_unt64_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_unt64_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_unt64_array_concat_carray_f(s: slaw, src: *const unt64, N: int64) -> slaw;
    pub fn slaw_unt64_array_concat_carray(s: bslaw, src: *const unt64, N: int64) -> slaw;
    pub fn slaw_float32(val: float32) -> slaw;
    pub fn slaw_is_float32(s: bslaw) -> bool;
    pub fn slaw_is_float32_array(s: bslaw) -> bool;
    pub fn slaw_float32_emit_nocheck(s: bslaw) -> *const float32;
    pub fn slaw_float32_emit(s: bslaw) -> *const float32;
    pub fn slaw_float32_array_raw(N: int64, array_out: *mut *mut float32) -> slaw;
    pub fn slaw_float32_array_empty(N: int64) -> slaw;
    pub fn slaw_float32_array_filled(N: int64, val: float32) -> slaw;
    pub fn slaw_float32_array(src: *const float32, N: int64) -> slaw;
    pub fn slaw_float32_array_emit(s: bslaw) -> *const float32;
    pub fn slaw_float32_array_emit_nth(s: bslaw, N: int64) -> *const float32;
    pub fn slaw_float32_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_float32_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_float32_array_concat_carray_f(s: slaw, src: *const float32, N: int64) -> slaw;
    pub fn slaw_float32_array_concat_carray(s: bslaw, src: *const float32, N: int64) -> slaw;
    pub fn slaw_float64(val: float64) -> slaw;
    pub fn slaw_is_float64(s: bslaw) -> bool;
    pub fn slaw_is_float64_array(s: bslaw) -> bool;
    pub fn slaw_float64_emit_nocheck(s: bslaw) -> *const float64;
    pub fn slaw_float64_emit(s: bslaw) -> *const float64;
    pub fn slaw_float64_array_raw(N: int64, array_out: *mut *mut float64) -> slaw;
    pub fn slaw_float64_array_empty(N: int64) -> slaw;
    pub fn slaw_float64_array_filled(N: int64, val: float64) -> slaw;
    pub fn slaw_float64_array(src: *const float64, N: int64) -> slaw;
    pub fn slaw_float64_array_emit(s: bslaw) -> *const float64;
    pub fn slaw_float64_array_emit_nth(s: bslaw, N: int64) -> *const float64;
    pub fn slaw_float64_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_float64_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_float64_array_concat_carray_f(s: slaw, src: *const float64, N: int64) -> slaw;
    pub fn slaw_float64_array_concat_carray(s: bslaw, src: *const float64, N: int64) -> slaw;
    pub fn slaw_int8(val: int8) -> slaw;
    pub fn slaw_is_int8(s: bslaw) -> bool;
    pub fn slaw_is_int8_array(s: bslaw) -> bool;
    pub fn slaw_int8_emit_nocheck(s: bslaw) -> *const int8;
    pub fn slaw_int8_emit(s: bslaw) -> *const int8;
    pub fn slaw_int8_array_raw(N: int64, array_out: *mut *mut int8) -> slaw;
    pub fn slaw_int8_array_empty(N: int64) -> slaw;
    pub fn slaw_int8_array_filled(N: int64, val: int8) -> slaw;
    pub fn slaw_int8_array(src: *const int8, N: int64) -> slaw;
    pub fn slaw_int8_array_emit(s: bslaw) -> *const int8;
    pub fn slaw_int8_array_emit_nth(s: bslaw, N: int64) -> *const int8;
    pub fn slaw_int8_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_int8_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_int8_array_concat_carray_f(s: slaw, src: *const int8, N: int64) -> slaw;
    pub fn slaw_int8_array_concat_carray(s: bslaw, src: *const int8, N: int64) -> slaw;
    pub fn slaw_unt8(val: unt8) -> slaw;
    pub fn slaw_is_unt8(s: bslaw) -> bool;
    pub fn slaw_is_unt8_array(s: bslaw) -> bool;
    pub fn slaw_unt8_emit_nocheck(s: bslaw) -> *const unt8;
    pub fn slaw_unt8_emit(s: bslaw) -> *const unt8;
    pub fn slaw_unt8_array_raw(N: int64, array_out: *mut *mut unt8) -> slaw;
    pub fn slaw_unt8_array_empty(N: int64) -> slaw;
    pub fn slaw_unt8_array_filled(N: int64, val: unt8) -> slaw;
    pub fn slaw_unt8_array(src: *const unt8, N: int64) -> slaw;
    pub fn slaw_unt8_array_emit(s: bslaw) -> *const unt8;
    pub fn slaw_unt8_array_emit_nth(s: bslaw, N: int64) -> *const unt8;
    pub fn slaw_unt8_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_unt8_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_unt8_array_concat_carray_f(s: slaw, src: *const unt8, N: int64) -> slaw;
    pub fn slaw_unt8_array_concat_carray(s: bslaw, src: *const unt8, N: int64) -> slaw;
    pub fn slaw_int16(val: int16) -> slaw;
    pub fn slaw_is_int16(s: bslaw) -> bool;
    pub fn slaw_is_int16_array(s: bslaw) -> bool;
    pub fn slaw_int16_emit_nocheck(s: bslaw) -> *const int16;
    pub fn slaw_int16_emit(s: bslaw) -> *const int16;
    pub fn slaw_int16_array_raw(N: int64, array_out: *mut *mut int16) -> slaw;
    pub fn slaw_int16_array_empty(N: int64) -> slaw;
    pub fn slaw_int16_array_filled(N: int64, val: int16) -> slaw;
    pub fn slaw_int16_array(src: *const int16, N: int64) -> slaw;
    pub fn slaw_int16_array_emit(s: bslaw) -> *const int16;
    pub fn slaw_int16_array_emit_nth(s: bslaw, N: int64) -> *const int16;
    pub fn slaw_int16_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_int16_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_int16_array_concat_carray_f(s: slaw, src: *const int16, N: int64) -> slaw;
    pub fn slaw_int16_array_concat_carray(s: bslaw, src: *const int16, N: int64) -> slaw;
    pub fn slaw_unt16(val: unt16) -> slaw;
    pub fn slaw_is_unt16(s: bslaw) -> bool;
    pub fn slaw_is_unt16_array(s: bslaw) -> bool;
    pub fn slaw_unt16_emit_nocheck(s: bslaw) -> *const unt16;
    pub fn slaw_unt16_emit(s: bslaw) -> *const unt16;
    pub fn slaw_unt16_array_raw(N: int64, array_out: *mut *mut unt16) -> slaw;
    pub fn slaw_unt16_array_empty(N: int64) -> slaw;
    pub fn slaw_unt16_array_filled(N: int64, val: unt16) -> slaw;
    pub fn slaw_unt16_array(src: *const unt16, N: int64) -> slaw;
    pub fn slaw_unt16_array_emit(s: bslaw) -> *const unt16;
    pub fn slaw_unt16_array_emit_nth(s: bslaw, N: int64) -> *const unt16;
    pub fn slaw_unt16_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_unt16_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_unt16_array_concat_carray_f(s: slaw, src: *const unt16, N: int64) -> slaw;
    pub fn slaw_unt16_array_concat_carray(s: bslaw, src: *const unt16, N: int64) -> slaw;
    pub fn slaw_int32c(val: int32c) -> slaw;
    pub fn slaw_is_int32c(s: bslaw) -> bool;
    pub fn slaw_is_int32c_array(s: bslaw) -> bool;
    pub fn slaw_int32c_emit_nocheck(s: bslaw) -> *const int32c;
    pub fn slaw_int32c_emit(s: bslaw) -> *const int32c;
    pub fn slaw_int32c_array_raw(N: int64, array_out: *mut *mut int32c) -> slaw;
    pub fn slaw_int32c_array_empty(N: int64) -> slaw;
    pub fn slaw_int32c_array_filled(N: int64, val: int32c) -> slaw;
    pub fn slaw_int32c_array(src: *const int32c, N: int64) -> slaw;
    pub fn slaw_int32c_array_emit(s: bslaw) -> *const int32c;
    pub fn slaw_int32c_array_emit_nth(s: bslaw, N: int64) -> *const int32c;
    pub fn slaw_int32c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_int32c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_int32c_array_concat_carray_f(s: slaw, src: *const int32c, N: int64) -> slaw;
    pub fn slaw_int32c_array_concat_carray(s: bslaw, src: *const int32c, N: int64) -> slaw;
    pub fn slaw_unt32c(val: unt32c) -> slaw;
    pub fn slaw_is_unt32c(s: bslaw) -> bool;
    pub fn slaw_is_unt32c_array(s: bslaw) -> bool;
    pub fn slaw_unt32c_emit_nocheck(s: bslaw) -> *const unt32c;
    pub fn slaw_unt32c_emit(s: bslaw) -> *const unt32c;
    pub fn slaw_unt32c_array_raw(N: int64, array_out: *mut *mut unt32c) -> slaw;
    pub fn slaw_unt32c_array_empty(N: int64) -> slaw;
    pub fn slaw_unt32c_array_filled(N: int64, val: unt32c) -> slaw;
    pub fn slaw_unt32c_array(src: *const unt32c, N: int64) -> slaw;
    pub fn slaw_unt32c_array_emit(s: bslaw) -> *const unt32c;
    pub fn slaw_unt32c_array_emit_nth(s: bslaw, N: int64) -> *const unt32c;
    pub fn slaw_unt32c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_unt32c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_unt32c_array_concat_carray_f(s: slaw, src: *const unt32c, N: int64) -> slaw;
    pub fn slaw_unt32c_array_concat_carray(s: bslaw, src: *const unt32c, N: int64) -> slaw;
    pub fn slaw_int64c(val: int64c) -> slaw;
    pub fn slaw_is_int64c(s: bslaw) -> bool;
    pub fn slaw_is_int64c_array(s: bslaw) -> bool;
    pub fn slaw_int64c_emit_nocheck(s: bslaw) -> *const int64c;
    pub fn slaw_int64c_emit(s: bslaw) -> *const int64c;
    pub fn slaw_int64c_array_raw(N: int64, array_out: *mut *mut int64c) -> slaw;
    pub fn slaw_int64c_array_empty(N: int64) -> slaw;
    pub fn slaw_int64c_array_filled(N: int64, val: int64c) -> slaw;
    pub fn slaw_int64c_array(src: *const int64c, N: int64) -> slaw;
    pub fn slaw_int64c_array_emit(s: bslaw) -> *const int64c;
    pub fn slaw_int64c_array_emit_nth(s: bslaw, N: int64) -> *const int64c;
    pub fn slaw_int64c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_int64c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_int64c_array_concat_carray_f(s: slaw, src: *const int64c, N: int64) -> slaw;
    pub fn slaw_int64c_array_concat_carray(s: bslaw, src: *const int64c, N: int64) -> slaw;
    pub fn slaw_unt64c(val: unt64c) -> slaw;
    pub fn slaw_is_unt64c(s: bslaw) -> bool;
    pub fn slaw_is_unt64c_array(s: bslaw) -> bool;
    pub fn slaw_unt64c_emit_nocheck(s: bslaw) -> *const unt64c;
    pub fn slaw_unt64c_emit(s: bslaw) -> *const unt64c;
    pub fn slaw_unt64c_array_raw(N: int64, array_out: *mut *mut unt64c) -> slaw;
    pub fn slaw_unt64c_array_empty(N: int64) -> slaw;
    pub fn slaw_unt64c_array_filled(N: int64, val: unt64c) -> slaw;
    pub fn slaw_unt64c_array(src: *const unt64c, N: int64) -> slaw;
    pub fn slaw_unt64c_array_emit(s: bslaw) -> *const unt64c;
    pub fn slaw_unt64c_array_emit_nth(s: bslaw, N: int64) -> *const unt64c;
    pub fn slaw_unt64c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_unt64c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_unt64c_array_concat_carray_f(s: slaw, src: *const unt64c, N: int64) -> slaw;
    pub fn slaw_unt64c_array_concat_carray(s: bslaw, src: *const unt64c, N: int64) -> slaw;
    pub fn slaw_float32c(val: float32c) -> slaw;
    pub fn slaw_is_float32c(s: bslaw) -> bool;
    pub fn slaw_is_float32c_array(s: bslaw) -> bool;
    pub fn slaw_float32c_emit_nocheck(s: bslaw) -> *const float32c;
    pub fn slaw_float32c_emit(s: bslaw) -> *const float32c;
    pub fn slaw_float32c_array_raw(N: int64, array_out: *mut *mut float32c) -> slaw;
    pub fn slaw_float32c_array_empty(N: int64) -> slaw;
    pub fn slaw_float32c_array_filled(N: int64, val: float32c) -> slaw;
    pub fn slaw_float32c_array(src: *const float32c, N: int64) -> slaw;
    pub fn slaw_float32c_array_emit(s: bslaw) -> *const float32c;
    pub fn slaw_float32c_array_emit_nth(s: bslaw, N: int64) -> *const float32c;
    pub fn slaw_float32c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_float32c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_float32c_array_concat_carray_f(s: slaw, src: *const float32c, N: int64) -> slaw;
    pub fn slaw_float32c_array_concat_carray(s: bslaw, src: *const float32c, N: int64) -> slaw;
    pub fn slaw_float64c(val: float64c) -> slaw;
    pub fn slaw_is_float64c(s: bslaw) -> bool;
    pub fn slaw_is_float64c_array(s: bslaw) -> bool;
    pub fn slaw_float64c_emit_nocheck(s: bslaw) -> *const float64c;
    pub fn slaw_float64c_emit(s: bslaw) -> *const float64c;
    pub fn slaw_float64c_array_raw(N: int64, array_out: *mut *mut float64c) -> slaw;
    pub fn slaw_float64c_array_empty(N: int64) -> slaw;
    pub fn slaw_float64c_array_filled(N: int64, val: float64c) -> slaw;
    pub fn slaw_float64c_array(src: *const float64c, N: int64) -> slaw;
    pub fn slaw_float64c_array_emit(s: bslaw) -> *const float64c;
    pub fn slaw_float64c_array_emit_nth(s: bslaw, N: int64) -> *const float64c;
    pub fn slaw_float64c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_float64c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_float64c_array_concat_carray_f(s: slaw, src: *const float64c, N: int64) -> slaw;
    pub fn slaw_float64c_array_concat_carray(s: bslaw, src: *const float64c, N: int64) -> slaw;
    pub fn slaw_int8c(val: int8c) -> slaw;
    pub fn slaw_is_int8c(s: bslaw) -> bool;
    pub fn slaw_is_int8c_array(s: bslaw) -> bool;
    pub fn slaw_int8c_emit_nocheck(s: bslaw) -> *const int8c;
    pub fn slaw_int8c_emit(s: bslaw) -> *const int8c;
    pub fn slaw_int8c_array_raw(N: int64, array_out: *mut *mut int8c) -> slaw;
    pub fn slaw_int8c_array_empty(N: int64) -> slaw;
    pub fn slaw_int8c_array_filled(N: int64, val: int8c) -> slaw;
    pub fn slaw_int8c_array(src: *const int8c, N: int64) -> slaw;
    pub fn slaw_int8c_array_emit(s: bslaw) -> *const int8c;
    pub fn slaw_int8c_array_emit_nth(s: bslaw, N: int64) -> *const int8c;
    pub fn slaw_int8c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_int8c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_int8c_array_concat_carray_f(s: slaw, src: *const int8c, N: int64) -> slaw;
    pub fn slaw_int8c_array_concat_carray(s: bslaw, src: *const int8c, N: int64) -> slaw;
    pub fn slaw_unt8c(val: unt8c) -> slaw;
    pub fn slaw_is_unt8c(s: bslaw) -> bool;
    pub fn slaw_is_unt8c_array(s: bslaw) -> bool;
    pub fn slaw_unt8c_emit_nocheck(s: bslaw) -> *const unt8c;
    pub fn slaw_unt8c_emit(s: bslaw) -> *const unt8c;
    pub fn slaw_unt8c_array_raw(N: int64, array_out: *mut *mut unt8c) -> slaw;
    pub fn slaw_unt8c_array_empty(N: int64) -> slaw;
    pub fn slaw_unt8c_array_filled(N: int64, val: unt8c) -> slaw;
    pub fn slaw_unt8c_array(src: *const unt8c, N: int64) -> slaw;
    pub fn slaw_unt8c_array_emit(s: bslaw) -> *const unt8c;
    pub fn slaw_unt8c_array_emit_nth(s: bslaw, N: int64) -> *const unt8c;
    pub fn slaw_unt8c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_unt8c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_unt8c_array_concat_carray_f(s: slaw, src: *const unt8c, N: int64) -> slaw;
    pub fn slaw_unt8c_array_concat_carray(s: bslaw, src: *const unt8c, N: int64) -> slaw;
    pub fn slaw_int16c(val: int16c) -> slaw;
    pub fn slaw_is_int16c(s: bslaw) -> bool;
    pub fn slaw_is_int16c_array(s: bslaw) -> bool;
    pub fn slaw_int16c_emit_nocheck(s: bslaw) -> *const int16c;
    pub fn slaw_int16c_emit(s: bslaw) -> *const int16c;
    pub fn slaw_int16c_array_raw(N: int64, array_out: *mut *mut int16c) -> slaw;
    pub fn slaw_int16c_array_empty(N: int64) -> slaw;
    pub fn slaw_int16c_array_filled(N: int64, val: int16c) -> slaw;
    pub fn slaw_int16c_array(src: *const int16c, N: int64) -> slaw;
    pub fn slaw_int16c_array_emit(s: bslaw) -> *const int16c;
    pub fn slaw_int16c_array_emit_nth(s: bslaw, N: int64) -> *const int16c;
    pub fn slaw_int16c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_int16c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_int16c_array_concat_carray_f(s: slaw, src: *const int16c, N: int64) -> slaw;
    pub fn slaw_int16c_array_concat_carray(s: bslaw, src: *const int16c, N: int64) -> slaw;
    pub fn slaw_unt16c(val: unt16c) -> slaw;
    pub fn slaw_is_unt16c(s: bslaw) -> bool;
    pub fn slaw_is_unt16c_array(s: bslaw) -> bool;
    pub fn slaw_unt16c_emit_nocheck(s: bslaw) -> *const unt16c;
    pub fn slaw_unt16c_emit(s: bslaw) -> *const unt16c;
    pub fn slaw_unt16c_array_raw(N: int64, array_out: *mut *mut unt16c) -> slaw;
    pub fn slaw_unt16c_array_empty(N: int64) -> slaw;
    pub fn slaw_unt16c_array_filled(N: int64, val: unt16c) -> slaw;
    pub fn slaw_unt16c_array(src: *const unt16c, N: int64) -> slaw;
    pub fn slaw_unt16c_array_emit(s: bslaw) -> *const unt16c;
    pub fn slaw_unt16c_array_emit_nth(s: bslaw, N: int64) -> *const unt16c;
    pub fn slaw_unt16c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_unt16c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_unt16c_array_concat_carray_f(s: slaw, src: *const unt16c, N: int64) -> slaw;
    pub fn slaw_unt16c_array_concat_carray(s: bslaw, src: *const unt16c, N: int64) -> slaw;
    pub fn slaw_v2int32(val: v2int32) -> slaw;
    pub fn slaw_is_v2int32(s: bslaw) -> bool;
    pub fn slaw_is_v2int32_array(s: bslaw) -> bool;
    pub fn slaw_v2int32_emit_nocheck(s: bslaw) -> *const v2int32;
    pub fn slaw_v2int32_emit(s: bslaw) -> *const v2int32;
    pub fn slaw_v2int32_array_raw(N: int64, array_out: *mut *mut v2int32) -> slaw;
    pub fn slaw_v2int32_array_empty(N: int64) -> slaw;
    pub fn slaw_v2int32_array_filled(N: int64, val: v2int32) -> slaw;
    pub fn slaw_v2int32_array(src: *const v2int32, N: int64) -> slaw;
    pub fn slaw_v2int32_array_emit(s: bslaw) -> *const v2int32;
    pub fn slaw_v2int32_array_emit_nth(s: bslaw, N: int64) -> *const v2int32;
    pub fn slaw_v2int32_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v2int32_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v2int32_array_concat_carray_f(s: slaw, src: *const v2int32, N: int64) -> slaw;
    pub fn slaw_v2int32_array_concat_carray(s: bslaw, src: *const v2int32, N: int64) -> slaw;
    pub fn slaw_v2unt32(val: v2unt32) -> slaw;
    pub fn slaw_is_v2unt32(s: bslaw) -> bool;
    pub fn slaw_is_v2unt32_array(s: bslaw) -> bool;
    pub fn slaw_v2unt32_emit_nocheck(s: bslaw) -> *const v2unt32;
    pub fn slaw_v2unt32_emit(s: bslaw) -> *const v2unt32;
    pub fn slaw_v2unt32_array_raw(N: int64, array_out: *mut *mut v2unt32) -> slaw;
    pub fn slaw_v2unt32_array_empty(N: int64) -> slaw;
    pub fn slaw_v2unt32_array_filled(N: int64, val: v2unt32) -> slaw;
    pub fn slaw_v2unt32_array(src: *const v2unt32, N: int64) -> slaw;
    pub fn slaw_v2unt32_array_emit(s: bslaw) -> *const v2unt32;
    pub fn slaw_v2unt32_array_emit_nth(s: bslaw, N: int64) -> *const v2unt32;
    pub fn slaw_v2unt32_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v2unt32_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v2unt32_array_concat_carray_f(s: slaw, src: *const v2unt32, N: int64) -> slaw;
    pub fn slaw_v2unt32_array_concat_carray(s: bslaw, src: *const v2unt32, N: int64) -> slaw;
    pub fn slaw_v2int64(val: v2int64) -> slaw;
    pub fn slaw_is_v2int64(s: bslaw) -> bool;
    pub fn slaw_is_v2int64_array(s: bslaw) -> bool;
    pub fn slaw_v2int64_emit_nocheck(s: bslaw) -> *const v2int64;
    pub fn slaw_v2int64_emit(s: bslaw) -> *const v2int64;
    pub fn slaw_v2int64_array_raw(N: int64, array_out: *mut *mut v2int64) -> slaw;
    pub fn slaw_v2int64_array_empty(N: int64) -> slaw;
    pub fn slaw_v2int64_array_filled(N: int64, val: v2int64) -> slaw;
    pub fn slaw_v2int64_array(src: *const v2int64, N: int64) -> slaw;
    pub fn slaw_v2int64_array_emit(s: bslaw) -> *const v2int64;
    pub fn slaw_v2int64_array_emit_nth(s: bslaw, N: int64) -> *const v2int64;
    pub fn slaw_v2int64_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v2int64_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v2int64_array_concat_carray_f(s: slaw, src: *const v2int64, N: int64) -> slaw;
    pub fn slaw_v2int64_array_concat_carray(s: bslaw, src: *const v2int64, N: int64) -> slaw;
    pub fn slaw_v2unt64(val: v2unt64) -> slaw;
    pub fn slaw_is_v2unt64(s: bslaw) -> bool;
    pub fn slaw_is_v2unt64_array(s: bslaw) -> bool;
    pub fn slaw_v2unt64_emit_nocheck(s: bslaw) -> *const v2unt64;
    pub fn slaw_v2unt64_emit(s: bslaw) -> *const v2unt64;
    pub fn slaw_v2unt64_array_raw(N: int64, array_out: *mut *mut v2unt64) -> slaw;
    pub fn slaw_v2unt64_array_empty(N: int64) -> slaw;
    pub fn slaw_v2unt64_array_filled(N: int64, val: v2unt64) -> slaw;
    pub fn slaw_v2unt64_array(src: *const v2unt64, N: int64) -> slaw;
    pub fn slaw_v2unt64_array_emit(s: bslaw) -> *const v2unt64;
    pub fn slaw_v2unt64_array_emit_nth(s: bslaw, N: int64) -> *const v2unt64;
    pub fn slaw_v2unt64_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v2unt64_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v2unt64_array_concat_carray_f(s: slaw, src: *const v2unt64, N: int64) -> slaw;
    pub fn slaw_v2unt64_array_concat_carray(s: bslaw, src: *const v2unt64, N: int64) -> slaw;
    pub fn slaw_v2float32(val: v2float32) -> slaw;
    pub fn slaw_is_v2float32(s: bslaw) -> bool;
    pub fn slaw_is_v2float32_array(s: bslaw) -> bool;
    pub fn slaw_v2float32_emit_nocheck(s: bslaw) -> *const v2float32;
    pub fn slaw_v2float32_emit(s: bslaw) -> *const v2float32;
    pub fn slaw_v2float32_array_raw(N: int64, array_out: *mut *mut v2float32) -> slaw;
    pub fn slaw_v2float32_array_empty(N: int64) -> slaw;
    pub fn slaw_v2float32_array_filled(N: int64, val: v2float32) -> slaw;
    pub fn slaw_v2float32_array(src: *const v2float32, N: int64) -> slaw;
    pub fn slaw_v2float32_array_emit(s: bslaw) -> *const v2float32;
    pub fn slaw_v2float32_array_emit_nth(s: bslaw, N: int64) -> *const v2float32;
    pub fn slaw_v2float32_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v2float32_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v2float32_array_concat_carray_f(s: slaw, src: *const v2float32, N: int64) -> slaw;
    pub fn slaw_v2float32_array_concat_carray(s: bslaw, src: *const v2float32, N: int64) -> slaw;
    pub fn slaw_v2float64(val: v2float64) -> slaw;
    pub fn slaw_is_v2float64(s: bslaw) -> bool;
    pub fn slaw_is_v2float64_array(s: bslaw) -> bool;
    pub fn slaw_v2float64_emit_nocheck(s: bslaw) -> *const v2float64;
    pub fn slaw_v2float64_emit(s: bslaw) -> *const v2float64;
    pub fn slaw_v2float64_array_raw(N: int64, array_out: *mut *mut v2float64) -> slaw;
    pub fn slaw_v2float64_array_empty(N: int64) -> slaw;
    pub fn slaw_v2float64_array_filled(N: int64, val: v2float64) -> slaw;
    pub fn slaw_v2float64_array(src: *const v2float64, N: int64) -> slaw;
    pub fn slaw_v2float64_array_emit(s: bslaw) -> *const v2float64;
    pub fn slaw_v2float64_array_emit_nth(s: bslaw, N: int64) -> *const v2float64;
    pub fn slaw_v2float64_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v2float64_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v2float64_array_concat_carray_f(s: slaw, src: *const v2float64, N: int64) -> slaw;
    pub fn slaw_v2float64_array_concat_carray(s: bslaw, src: *const v2float64, N: int64) -> slaw;
    pub fn slaw_v2int8(val: v2int8) -> slaw;
    pub fn slaw_is_v2int8(s: bslaw) -> bool;
    pub fn slaw_is_v2int8_array(s: bslaw) -> bool;
    pub fn slaw_v2int8_emit_nocheck(s: bslaw) -> *const v2int8;
    pub fn slaw_v2int8_emit(s: bslaw) -> *const v2int8;
    pub fn slaw_v2int8_array_raw(N: int64, array_out: *mut *mut v2int8) -> slaw;
    pub fn slaw_v2int8_array_empty(N: int64) -> slaw;
    pub fn slaw_v2int8_array_filled(N: int64, val: v2int8) -> slaw;
    pub fn slaw_v2int8_array(src: *const v2int8, N: int64) -> slaw;
    pub fn slaw_v2int8_array_emit(s: bslaw) -> *const v2int8;
    pub fn slaw_v2int8_array_emit_nth(s: bslaw, N: int64) -> *const v2int8;
    pub fn slaw_v2int8_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v2int8_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v2int8_array_concat_carray_f(s: slaw, src: *const v2int8, N: int64) -> slaw;
    pub fn slaw_v2int8_array_concat_carray(s: bslaw, src: *const v2int8, N: int64) -> slaw;
    pub fn slaw_v2unt8(val: v2unt8) -> slaw;
    pub fn slaw_is_v2unt8(s: bslaw) -> bool;
    pub fn slaw_is_v2unt8_array(s: bslaw) -> bool;
    pub fn slaw_v2unt8_emit_nocheck(s: bslaw) -> *const v2unt8;
    pub fn slaw_v2unt8_emit(s: bslaw) -> *const v2unt8;
    pub fn slaw_v2unt8_array_raw(N: int64, array_out: *mut *mut v2unt8) -> slaw;
    pub fn slaw_v2unt8_array_empty(N: int64) -> slaw;
    pub fn slaw_v2unt8_array_filled(N: int64, val: v2unt8) -> slaw;
    pub fn slaw_v2unt8_array(src: *const v2unt8, N: int64) -> slaw;
    pub fn slaw_v2unt8_array_emit(s: bslaw) -> *const v2unt8;
    pub fn slaw_v2unt8_array_emit_nth(s: bslaw, N: int64) -> *const v2unt8;
    pub fn slaw_v2unt8_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v2unt8_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v2unt8_array_concat_carray_f(s: slaw, src: *const v2unt8, N: int64) -> slaw;
    pub fn slaw_v2unt8_array_concat_carray(s: bslaw, src: *const v2unt8, N: int64) -> slaw;
    pub fn slaw_v2int16(val: v2int16) -> slaw;
    pub fn slaw_is_v2int16(s: bslaw) -> bool;
    pub fn slaw_is_v2int16_array(s: bslaw) -> bool;
    pub fn slaw_v2int16_emit_nocheck(s: bslaw) -> *const v2int16;
    pub fn slaw_v2int16_emit(s: bslaw) -> *const v2int16;
    pub fn slaw_v2int16_array_raw(N: int64, array_out: *mut *mut v2int16) -> slaw;
    pub fn slaw_v2int16_array_empty(N: int64) -> slaw;
    pub fn slaw_v2int16_array_filled(N: int64, val: v2int16) -> slaw;
    pub fn slaw_v2int16_array(src: *const v2int16, N: int64) -> slaw;
    pub fn slaw_v2int16_array_emit(s: bslaw) -> *const v2int16;
    pub fn slaw_v2int16_array_emit_nth(s: bslaw, N: int64) -> *const v2int16;
    pub fn slaw_v2int16_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v2int16_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v2int16_array_concat_carray_f(s: slaw, src: *const v2int16, N: int64) -> slaw;
    pub fn slaw_v2int16_array_concat_carray(s: bslaw, src: *const v2int16, N: int64) -> slaw;
    pub fn slaw_v2unt16(val: v2unt16) -> slaw;
    pub fn slaw_is_v2unt16(s: bslaw) -> bool;
    pub fn slaw_is_v2unt16_array(s: bslaw) -> bool;
    pub fn slaw_v2unt16_emit_nocheck(s: bslaw) -> *const v2unt16;
    pub fn slaw_v2unt16_emit(s: bslaw) -> *const v2unt16;
    pub fn slaw_v2unt16_array_raw(N: int64, array_out: *mut *mut v2unt16) -> slaw;
    pub fn slaw_v2unt16_array_empty(N: int64) -> slaw;
    pub fn slaw_v2unt16_array_filled(N: int64, val: v2unt16) -> slaw;
    pub fn slaw_v2unt16_array(src: *const v2unt16, N: int64) -> slaw;
    pub fn slaw_v2unt16_array_emit(s: bslaw) -> *const v2unt16;
    pub fn slaw_v2unt16_array_emit_nth(s: bslaw, N: int64) -> *const v2unt16;
    pub fn slaw_v2unt16_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v2unt16_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v2unt16_array_concat_carray_f(s: slaw, src: *const v2unt16, N: int64) -> slaw;
    pub fn slaw_v2unt16_array_concat_carray(s: bslaw, src: *const v2unt16, N: int64) -> slaw;
    pub fn slaw_v3int32(val: v3int32) -> slaw;
    pub fn slaw_is_v3int32(s: bslaw) -> bool;
    pub fn slaw_is_v3int32_array(s: bslaw) -> bool;
    pub fn slaw_v3int32_emit_nocheck(s: bslaw) -> *const v3int32;
    pub fn slaw_v3int32_emit(s: bslaw) -> *const v3int32;
    pub fn slaw_v3int32_array_raw(N: int64, array_out: *mut *mut v3int32) -> slaw;
    pub fn slaw_v3int32_array_empty(N: int64) -> slaw;
    pub fn slaw_v3int32_array_filled(N: int64, val: v3int32) -> slaw;
    pub fn slaw_v3int32_array(src: *const v3int32, N: int64) -> slaw;
    pub fn slaw_v3int32_array_emit(s: bslaw) -> *const v3int32;
    pub fn slaw_v3int32_array_emit_nth(s: bslaw, N: int64) -> *const v3int32;
    pub fn slaw_v3int32_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v3int32_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v3int32_array_concat_carray_f(s: slaw, src: *const v3int32, N: int64) -> slaw;
    pub fn slaw_v3int32_array_concat_carray(s: bslaw, src: *const v3int32, N: int64) -> slaw;
    pub fn slaw_v3unt32(val: v3unt32) -> slaw;
    pub fn slaw_is_v3unt32(s: bslaw) -> bool;
    pub fn slaw_is_v3unt32_array(s: bslaw) -> bool;
    pub fn slaw_v3unt32_emit_nocheck(s: bslaw) -> *const v3unt32;
    pub fn slaw_v3unt32_emit(s: bslaw) -> *const v3unt32;
    pub fn slaw_v3unt32_array_raw(N: int64, array_out: *mut *mut v3unt32) -> slaw;
    pub fn slaw_v3unt32_array_empty(N: int64) -> slaw;
    pub fn slaw_v3unt32_array_filled(N: int64, val: v3unt32) -> slaw;
    pub fn slaw_v3unt32_array(src: *const v3unt32, N: int64) -> slaw;
    pub fn slaw_v3unt32_array_emit(s: bslaw) -> *const v3unt32;
    pub fn slaw_v3unt32_array_emit_nth(s: bslaw, N: int64) -> *const v3unt32;
    pub fn slaw_v3unt32_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v3unt32_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v3unt32_array_concat_carray_f(s: slaw, src: *const v3unt32, N: int64) -> slaw;
    pub fn slaw_v3unt32_array_concat_carray(s: bslaw, src: *const v3unt32, N: int64) -> slaw;
    pub fn slaw_v3int64(val: v3int64) -> slaw;
    pub fn slaw_is_v3int64(s: bslaw) -> bool;
    pub fn slaw_is_v3int64_array(s: bslaw) -> bool;
    pub fn slaw_v3int64_emit_nocheck(s: bslaw) -> *const v3int64;
    pub fn slaw_v3int64_emit(s: bslaw) -> *const v3int64;
    pub fn slaw_v3int64_array_raw(N: int64, array_out: *mut *mut v3int64) -> slaw;
    pub fn slaw_v3int64_array_empty(N: int64) -> slaw;
    pub fn slaw_v3int64_array_filled(N: int64, val: v3int64) -> slaw;
    pub fn slaw_v3int64_array(src: *const v3int64, N: int64) -> slaw;
    pub fn slaw_v3int64_array_emit(s: bslaw) -> *const v3int64;
    pub fn slaw_v3int64_array_emit_nth(s: bslaw, N: int64) -> *const v3int64;
    pub fn slaw_v3int64_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v3int64_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v3int64_array_concat_carray_f(s: slaw, src: *const v3int64, N: int64) -> slaw;
    pub fn slaw_v3int64_array_concat_carray(s: bslaw, src: *const v3int64, N: int64) -> slaw;
    pub fn slaw_v3unt64(val: v3unt64) -> slaw;
    pub fn slaw_is_v3unt64(s: bslaw) -> bool;
    pub fn slaw_is_v3unt64_array(s: bslaw) -> bool;
    pub fn slaw_v3unt64_emit_nocheck(s: bslaw) -> *const v3unt64;
    pub fn slaw_v3unt64_emit(s: bslaw) -> *const v3unt64;
    pub fn slaw_v3unt64_array_raw(N: int64, array_out: *mut *mut v3unt64) -> slaw;
    pub fn slaw_v3unt64_array_empty(N: int64) -> slaw;
    pub fn slaw_v3unt64_array_filled(N: int64, val: v3unt64) -> slaw;
    pub fn slaw_v3unt64_array(src: *const v3unt64, N: int64) -> slaw;
    pub fn slaw_v3unt64_array_emit(s: bslaw) -> *const v3unt64;
    pub fn slaw_v3unt64_array_emit_nth(s: bslaw, N: int64) -> *const v3unt64;
    pub fn slaw_v3unt64_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v3unt64_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v3unt64_array_concat_carray_f(s: slaw, src: *const v3unt64, N: int64) -> slaw;
    pub fn slaw_v3unt64_array_concat_carray(s: bslaw, src: *const v3unt64, N: int64) -> slaw;
    pub fn slaw_v3float32(val: v3float32) -> slaw;
    pub fn slaw_is_v3float32(s: bslaw) -> bool;
    pub fn slaw_is_v3float32_array(s: bslaw) -> bool;
    pub fn slaw_v3float32_emit_nocheck(s: bslaw) -> *const v3float32;
    pub fn slaw_v3float32_emit(s: bslaw) -> *const v3float32;
    pub fn slaw_v3float32_array_raw(N: int64, array_out: *mut *mut v3float32) -> slaw;
    pub fn slaw_v3float32_array_empty(N: int64) -> slaw;
    pub fn slaw_v3float32_array_filled(N: int64, val: v3float32) -> slaw;
    pub fn slaw_v3float32_array(src: *const v3float32, N: int64) -> slaw;
    pub fn slaw_v3float32_array_emit(s: bslaw) -> *const v3float32;
    pub fn slaw_v3float32_array_emit_nth(s: bslaw, N: int64) -> *const v3float32;
    pub fn slaw_v3float32_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v3float32_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v3float32_array_concat_carray_f(s: slaw, src: *const v3float32, N: int64) -> slaw;
    pub fn slaw_v3float32_array_concat_carray(s: bslaw, src: *const v3float32, N: int64) -> slaw;
    pub fn slaw_v3float64(val: v3float64) -> slaw;
    pub fn slaw_is_v3float64(s: bslaw) -> bool;
    pub fn slaw_is_v3float64_array(s: bslaw) -> bool;
    pub fn slaw_v3float64_emit_nocheck(s: bslaw) -> *const v3float64;
    pub fn slaw_v3float64_emit(s: bslaw) -> *const v3float64;
    pub fn slaw_v3float64_array_raw(N: int64, array_out: *mut *mut v3float64) -> slaw;
    pub fn slaw_v3float64_array_empty(N: int64) -> slaw;
    pub fn slaw_v3float64_array_filled(N: int64, val: v3float64) -> slaw;
    pub fn slaw_v3float64_array(src: *const v3float64, N: int64) -> slaw;
    pub fn slaw_v3float64_array_emit(s: bslaw) -> *const v3float64;
    pub fn slaw_v3float64_array_emit_nth(s: bslaw, N: int64) -> *const v3float64;
    pub fn slaw_v3float64_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v3float64_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v3float64_array_concat_carray_f(s: slaw, src: *const v3float64, N: int64) -> slaw;
    pub fn slaw_v3float64_array_concat_carray(s: bslaw, src: *const v3float64, N: int64) -> slaw;
    pub fn slaw_v3int8(val: v3int8) -> slaw;
    pub fn slaw_is_v3int8(s: bslaw) -> bool;
    pub fn slaw_is_v3int8_array(s: bslaw) -> bool;
    pub fn slaw_v3int8_emit_nocheck(s: bslaw) -> *const v3int8;
    pub fn slaw_v3int8_emit(s: bslaw) -> *const v3int8;
    pub fn slaw_v3int8_array_raw(N: int64, array_out: *mut *mut v3int8) -> slaw;
    pub fn slaw_v3int8_array_empty(N: int64) -> slaw;
    pub fn slaw_v3int8_array_filled(N: int64, val: v3int8) -> slaw;
    pub fn slaw_v3int8_array(src: *const v3int8, N: int64) -> slaw;
    pub fn slaw_v3int8_array_emit(s: bslaw) -> *const v3int8;
    pub fn slaw_v3int8_array_emit_nth(s: bslaw, N: int64) -> *const v3int8;
    pub fn slaw_v3int8_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v3int8_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v3int8_array_concat_carray_f(s: slaw, src: *const v3int8, N: int64) -> slaw;
    pub fn slaw_v3int8_array_concat_carray(s: bslaw, src: *const v3int8, N: int64) -> slaw;
    pub fn slaw_v3unt8(val: v3unt8) -> slaw;
    pub fn slaw_is_v3unt8(s: bslaw) -> bool;
    pub fn slaw_is_v3unt8_array(s: bslaw) -> bool;
    pub fn slaw_v3unt8_emit_nocheck(s: bslaw) -> *const v3unt8;
    pub fn slaw_v3unt8_emit(s: bslaw) -> *const v3unt8;
    pub fn slaw_v3unt8_array_raw(N: int64, array_out: *mut *mut v3unt8) -> slaw;
    pub fn slaw_v3unt8_array_empty(N: int64) -> slaw;
    pub fn slaw_v3unt8_array_filled(N: int64, val: v3unt8) -> slaw;
    pub fn slaw_v3unt8_array(src: *const v3unt8, N: int64) -> slaw;
    pub fn slaw_v3unt8_array_emit(s: bslaw) -> *const v3unt8;
    pub fn slaw_v3unt8_array_emit_nth(s: bslaw, N: int64) -> *const v3unt8;
    pub fn slaw_v3unt8_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v3unt8_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v3unt8_array_concat_carray_f(s: slaw, src: *const v3unt8, N: int64) -> slaw;
    pub fn slaw_v3unt8_array_concat_carray(s: bslaw, src: *const v3unt8, N: int64) -> slaw;
    pub fn slaw_v3int16(val: v3int16) -> slaw;
    pub fn slaw_is_v3int16(s: bslaw) -> bool;
    pub fn slaw_is_v3int16_array(s: bslaw) -> bool;
    pub fn slaw_v3int16_emit_nocheck(s: bslaw) -> *const v3int16;
    pub fn slaw_v3int16_emit(s: bslaw) -> *const v3int16;
    pub fn slaw_v3int16_array_raw(N: int64, array_out: *mut *mut v3int16) -> slaw;
    pub fn slaw_v3int16_array_empty(N: int64) -> slaw;
    pub fn slaw_v3int16_array_filled(N: int64, val: v3int16) -> slaw;
    pub fn slaw_v3int16_array(src: *const v3int16, N: int64) -> slaw;
    pub fn slaw_v3int16_array_emit(s: bslaw) -> *const v3int16;
    pub fn slaw_v3int16_array_emit_nth(s: bslaw, N: int64) -> *const v3int16;
    pub fn slaw_v3int16_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v3int16_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v3int16_array_concat_carray_f(s: slaw, src: *const v3int16, N: int64) -> slaw;
    pub fn slaw_v3int16_array_concat_carray(s: bslaw, src: *const v3int16, N: int64) -> slaw;
    pub fn slaw_v3unt16(val: v3unt16) -> slaw;
    pub fn slaw_is_v3unt16(s: bslaw) -> bool;
    pub fn slaw_is_v3unt16_array(s: bslaw) -> bool;
    pub fn slaw_v3unt16_emit_nocheck(s: bslaw) -> *const v3unt16;
    pub fn slaw_v3unt16_emit(s: bslaw) -> *const v3unt16;
    pub fn slaw_v3unt16_array_raw(N: int64, array_out: *mut *mut v3unt16) -> slaw;
    pub fn slaw_v3unt16_array_empty(N: int64) -> slaw;
    pub fn slaw_v3unt16_array_filled(N: int64, val: v3unt16) -> slaw;
    pub fn slaw_v3unt16_array(src: *const v3unt16, N: int64) -> slaw;
    pub fn slaw_v3unt16_array_emit(s: bslaw) -> *const v3unt16;
    pub fn slaw_v3unt16_array_emit_nth(s: bslaw, N: int64) -> *const v3unt16;
    pub fn slaw_v3unt16_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v3unt16_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v3unt16_array_concat_carray_f(s: slaw, src: *const v3unt16, N: int64) -> slaw;
    pub fn slaw_v3unt16_array_concat_carray(s: bslaw, src: *const v3unt16, N: int64) -> slaw;
    pub fn slaw_v4int32(val: v4int32) -> slaw;
    pub fn slaw_is_v4int32(s: bslaw) -> bool;
    pub fn slaw_is_v4int32_array(s: bslaw) -> bool;
    pub fn slaw_v4int32_emit_nocheck(s: bslaw) -> *const v4int32;
    pub fn slaw_v4int32_emit(s: bslaw) -> *const v4int32;
    pub fn slaw_v4int32_array_raw(N: int64, array_out: *mut *mut v4int32) -> slaw;
    pub fn slaw_v4int32_array_empty(N: int64) -> slaw;
    pub fn slaw_v4int32_array_filled(N: int64, val: v4int32) -> slaw;
    pub fn slaw_v4int32_array(src: *const v4int32, N: int64) -> slaw;
    pub fn slaw_v4int32_array_emit(s: bslaw) -> *const v4int32;
    pub fn slaw_v4int32_array_emit_nth(s: bslaw, N: int64) -> *const v4int32;
    pub fn slaw_v4int32_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v4int32_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v4int32_array_concat_carray_f(s: slaw, src: *const v4int32, N: int64) -> slaw;
    pub fn slaw_v4int32_array_concat_carray(s: bslaw, src: *const v4int32, N: int64) -> slaw;
    pub fn slaw_v4unt32(val: v4unt32) -> slaw;
    pub fn slaw_is_v4unt32(s: bslaw) -> bool;
    pub fn slaw_is_v4unt32_array(s: bslaw) -> bool;
    pub fn slaw_v4unt32_emit_nocheck(s: bslaw) -> *const v4unt32;
    pub fn slaw_v4unt32_emit(s: bslaw) -> *const v4unt32;
    pub fn slaw_v4unt32_array_raw(N: int64, array_out: *mut *mut v4unt32) -> slaw;
    pub fn slaw_v4unt32_array_empty(N: int64) -> slaw;
    pub fn slaw_v4unt32_array_filled(N: int64, val: v4unt32) -> slaw;
    pub fn slaw_v4unt32_array(src: *const v4unt32, N: int64) -> slaw;
    pub fn slaw_v4unt32_array_emit(s: bslaw) -> *const v4unt32;
    pub fn slaw_v4unt32_array_emit_nth(s: bslaw, N: int64) -> *const v4unt32;
    pub fn slaw_v4unt32_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v4unt32_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v4unt32_array_concat_carray_f(s: slaw, src: *const v4unt32, N: int64) -> slaw;
    pub fn slaw_v4unt32_array_concat_carray(s: bslaw, src: *const v4unt32, N: int64) -> slaw;
    pub fn slaw_v4int64(val: v4int64) -> slaw;
    pub fn slaw_is_v4int64(s: bslaw) -> bool;
    pub fn slaw_is_v4int64_array(s: bslaw) -> bool;
    pub fn slaw_v4int64_emit_nocheck(s: bslaw) -> *const v4int64;
    pub fn slaw_v4int64_emit(s: bslaw) -> *const v4int64;
    pub fn slaw_v4int64_array_raw(N: int64, array_out: *mut *mut v4int64) -> slaw;
    pub fn slaw_v4int64_array_empty(N: int64) -> slaw;
    pub fn slaw_v4int64_array_filled(N: int64, val: v4int64) -> slaw;
    pub fn slaw_v4int64_array(src: *const v4int64, N: int64) -> slaw;
    pub fn slaw_v4int64_array_emit(s: bslaw) -> *const v4int64;
    pub fn slaw_v4int64_array_emit_nth(s: bslaw, N: int64) -> *const v4int64;
    pub fn slaw_v4int64_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v4int64_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v4int64_array_concat_carray_f(s: slaw, src: *const v4int64, N: int64) -> slaw;
    pub fn slaw_v4int64_array_concat_carray(s: bslaw, src: *const v4int64, N: int64) -> slaw;
    pub fn slaw_v4unt64(val: v4unt64) -> slaw;
    pub fn slaw_is_v4unt64(s: bslaw) -> bool;
    pub fn slaw_is_v4unt64_array(s: bslaw) -> bool;
    pub fn slaw_v4unt64_emit_nocheck(s: bslaw) -> *const v4unt64;
    pub fn slaw_v4unt64_emit(s: bslaw) -> *const v4unt64;
    pub fn slaw_v4unt64_array_raw(N: int64, array_out: *mut *mut v4unt64) -> slaw;
    pub fn slaw_v4unt64_array_empty(N: int64) -> slaw;
    pub fn slaw_v4unt64_array_filled(N: int64, val: v4unt64) -> slaw;
    pub fn slaw_v4unt64_array(src: *const v4unt64, N: int64) -> slaw;
    pub fn slaw_v4unt64_array_emit(s: bslaw) -> *const v4unt64;
    pub fn slaw_v4unt64_array_emit_nth(s: bslaw, N: int64) -> *const v4unt64;
    pub fn slaw_v4unt64_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v4unt64_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v4unt64_array_concat_carray_f(s: slaw, src: *const v4unt64, N: int64) -> slaw;
    pub fn slaw_v4unt64_array_concat_carray(s: bslaw, src: *const v4unt64, N: int64) -> slaw;
    pub fn slaw_v4float32(val: v4float32) -> slaw;
    pub fn slaw_is_v4float32(s: bslaw) -> bool;
    pub fn slaw_is_v4float32_array(s: bslaw) -> bool;
    pub fn slaw_v4float32_emit_nocheck(s: bslaw) -> *const v4float32;
    pub fn slaw_v4float32_emit(s: bslaw) -> *const v4float32;
    pub fn slaw_v4float32_array_raw(N: int64, array_out: *mut *mut v4float32) -> slaw;
    pub fn slaw_v4float32_array_empty(N: int64) -> slaw;
    pub fn slaw_v4float32_array_filled(N: int64, val: v4float32) -> slaw;
    pub fn slaw_v4float32_array(src: *const v4float32, N: int64) -> slaw;
    pub fn slaw_v4float32_array_emit(s: bslaw) -> *const v4float32;
    pub fn slaw_v4float32_array_emit_nth(s: bslaw, N: int64) -> *const v4float32;
    pub fn slaw_v4float32_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v4float32_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v4float32_array_concat_carray_f(s: slaw, src: *const v4float32, N: int64) -> slaw;
    pub fn slaw_v4float32_array_concat_carray(s: bslaw, src: *const v4float32, N: int64) -> slaw;
    pub fn slaw_v4float64(val: v4float64) -> slaw;
    pub fn slaw_is_v4float64(s: bslaw) -> bool;
    pub fn slaw_is_v4float64_array(s: bslaw) -> bool;
    pub fn slaw_v4float64_emit_nocheck(s: bslaw) -> *const v4float64;
    pub fn slaw_v4float64_emit(s: bslaw) -> *const v4float64;
    pub fn slaw_v4float64_array_raw(N: int64, array_out: *mut *mut v4float64) -> slaw;
    pub fn slaw_v4float64_array_empty(N: int64) -> slaw;
    pub fn slaw_v4float64_array_filled(N: int64, val: v4float64) -> slaw;
    pub fn slaw_v4float64_array(src: *const v4float64, N: int64) -> slaw;
    pub fn slaw_v4float64_array_emit(s: bslaw) -> *const v4float64;
    pub fn slaw_v4float64_array_emit_nth(s: bslaw, N: int64) -> *const v4float64;
    pub fn slaw_v4float64_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v4float64_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v4float64_array_concat_carray_f(s: slaw, src: *const v4float64, N: int64) -> slaw;
    pub fn slaw_v4float64_array_concat_carray(s: bslaw, src: *const v4float64, N: int64) -> slaw;
    pub fn slaw_v4int8(val: v4int8) -> slaw;
    pub fn slaw_is_v4int8(s: bslaw) -> bool;
    pub fn slaw_is_v4int8_array(s: bslaw) -> bool;
    pub fn slaw_v4int8_emit_nocheck(s: bslaw) -> *const v4int8;
    pub fn slaw_v4int8_emit(s: bslaw) -> *const v4int8;
    pub fn slaw_v4int8_array_raw(N: int64, array_out: *mut *mut v4int8) -> slaw;
    pub fn slaw_v4int8_array_empty(N: int64) -> slaw;
    pub fn slaw_v4int8_array_filled(N: int64, val: v4int8) -> slaw;
    pub fn slaw_v4int8_array(src: *const v4int8, N: int64) -> slaw;
    pub fn slaw_v4int8_array_emit(s: bslaw) -> *const v4int8;
    pub fn slaw_v4int8_array_emit_nth(s: bslaw, N: int64) -> *const v4int8;
    pub fn slaw_v4int8_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v4int8_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v4int8_array_concat_carray_f(s: slaw, src: *const v4int8, N: int64) -> slaw;
    pub fn slaw_v4int8_array_concat_carray(s: bslaw, src: *const v4int8, N: int64) -> slaw;
    pub fn slaw_v4unt8(val: v4unt8) -> slaw;
    pub fn slaw_is_v4unt8(s: bslaw) -> bool;
    pub fn slaw_is_v4unt8_array(s: bslaw) -> bool;
    pub fn slaw_v4unt8_emit_nocheck(s: bslaw) -> *const v4unt8;
    pub fn slaw_v4unt8_emit(s: bslaw) -> *const v4unt8;
    pub fn slaw_v4unt8_array_raw(N: int64, array_out: *mut *mut v4unt8) -> slaw;
    pub fn slaw_v4unt8_array_empty(N: int64) -> slaw;
    pub fn slaw_v4unt8_array_filled(N: int64, val: v4unt8) -> slaw;
    pub fn slaw_v4unt8_array(src: *const v4unt8, N: int64) -> slaw;
    pub fn slaw_v4unt8_array_emit(s: bslaw) -> *const v4unt8;
    pub fn slaw_v4unt8_array_emit_nth(s: bslaw, N: int64) -> *const v4unt8;
    pub fn slaw_v4unt8_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v4unt8_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v4unt8_array_concat_carray_f(s: slaw, src: *const v4unt8, N: int64) -> slaw;
    pub fn slaw_v4unt8_array_concat_carray(s: bslaw, src: *const v4unt8, N: int64) -> slaw;
    pub fn slaw_v4int16(val: v4int16) -> slaw;
    pub fn slaw_is_v4int16(s: bslaw) -> bool;
    pub fn slaw_is_v4int16_array(s: bslaw) -> bool;
    pub fn slaw_v4int16_emit_nocheck(s: bslaw) -> *const v4int16;
    pub fn slaw_v4int16_emit(s: bslaw) -> *const v4int16;
    pub fn slaw_v4int16_array_raw(N: int64, array_out: *mut *mut v4int16) -> slaw;
    pub fn slaw_v4int16_array_empty(N: int64) -> slaw;
    pub fn slaw_v4int16_array_filled(N: int64, val: v4int16) -> slaw;
    pub fn slaw_v4int16_array(src: *const v4int16, N: int64) -> slaw;
    pub fn slaw_v4int16_array_emit(s: bslaw) -> *const v4int16;
    pub fn slaw_v4int16_array_emit_nth(s: bslaw, N: int64) -> *const v4int16;
    pub fn slaw_v4int16_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v4int16_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v4int16_array_concat_carray_f(s: slaw, src: *const v4int16, N: int64) -> slaw;
    pub fn slaw_v4int16_array_concat_carray(s: bslaw, src: *const v4int16, N: int64) -> slaw;
    pub fn slaw_v4unt16(val: v4unt16) -> slaw;
    pub fn slaw_is_v4unt16(s: bslaw) -> bool;
    pub fn slaw_is_v4unt16_array(s: bslaw) -> bool;
    pub fn slaw_v4unt16_emit_nocheck(s: bslaw) -> *const v4unt16;
    pub fn slaw_v4unt16_emit(s: bslaw) -> *const v4unt16;
    pub fn slaw_v4unt16_array_raw(N: int64, array_out: *mut *mut v4unt16) -> slaw;
    pub fn slaw_v4unt16_array_empty(N: int64) -> slaw;
    pub fn slaw_v4unt16_array_filled(N: int64, val: v4unt16) -> slaw;
    pub fn slaw_v4unt16_array(src: *const v4unt16, N: int64) -> slaw;
    pub fn slaw_v4unt16_array_emit(s: bslaw) -> *const v4unt16;
    pub fn slaw_v4unt16_array_emit_nth(s: bslaw, N: int64) -> *const v4unt16;
    pub fn slaw_v4unt16_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v4unt16_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v4unt16_array_concat_carray_f(s: slaw, src: *const v4unt16, N: int64) -> slaw;
    pub fn slaw_v4unt16_array_concat_carray(s: bslaw, src: *const v4unt16, N: int64) -> slaw;
    pub fn slaw_v2int32c(val: v2int32c) -> slaw;
    pub fn slaw_is_v2int32c(s: bslaw) -> bool;
    pub fn slaw_is_v2int32c_array(s: bslaw) -> bool;
    pub fn slaw_v2int32c_emit_nocheck(s: bslaw) -> *const v2int32c;
    pub fn slaw_v2int32c_emit(s: bslaw) -> *const v2int32c;
    pub fn slaw_v2int32c_array_raw(N: int64, array_out: *mut *mut v2int32c) -> slaw;
    pub fn slaw_v2int32c_array_empty(N: int64) -> slaw;
    pub fn slaw_v2int32c_array_filled(N: int64, val: v2int32c) -> slaw;
    pub fn slaw_v2int32c_array(src: *const v2int32c, N: int64) -> slaw;
    pub fn slaw_v2int32c_array_emit(s: bslaw) -> *const v2int32c;
    pub fn slaw_v2int32c_array_emit_nth(s: bslaw, N: int64) -> *const v2int32c;
    pub fn slaw_v2int32c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v2int32c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v2int32c_array_concat_carray_f(s: slaw, src: *const v2int32c, N: int64) -> slaw;
    pub fn slaw_v2int32c_array_concat_carray(s: bslaw, src: *const v2int32c, N: int64) -> slaw;
    pub fn slaw_v2unt32c(val: v2unt32c) -> slaw;
    pub fn slaw_is_v2unt32c(s: bslaw) -> bool;
    pub fn slaw_is_v2unt32c_array(s: bslaw) -> bool;
    pub fn slaw_v2unt32c_emit_nocheck(s: bslaw) -> *const v2unt32c;
    pub fn slaw_v2unt32c_emit(s: bslaw) -> *const v2unt32c;
    pub fn slaw_v2unt32c_array_raw(N: int64, array_out: *mut *mut v2unt32c) -> slaw;
    pub fn slaw_v2unt32c_array_empty(N: int64) -> slaw;
    pub fn slaw_v2unt32c_array_filled(N: int64, val: v2unt32c) -> slaw;
    pub fn slaw_v2unt32c_array(src: *const v2unt32c, N: int64) -> slaw;
    pub fn slaw_v2unt32c_array_emit(s: bslaw) -> *const v2unt32c;
    pub fn slaw_v2unt32c_array_emit_nth(s: bslaw, N: int64) -> *const v2unt32c;
    pub fn slaw_v2unt32c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v2unt32c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v2unt32c_array_concat_carray_f(s: slaw, src: *const v2unt32c, N: int64) -> slaw;
    pub fn slaw_v2unt32c_array_concat_carray(s: bslaw, src: *const v2unt32c, N: int64) -> slaw;
    pub fn slaw_v2int64c(val: v2int64c) -> slaw;
    pub fn slaw_is_v2int64c(s: bslaw) -> bool;
    pub fn slaw_is_v2int64c_array(s: bslaw) -> bool;
    pub fn slaw_v2int64c_emit_nocheck(s: bslaw) -> *const v2int64c;
    pub fn slaw_v2int64c_emit(s: bslaw) -> *const v2int64c;
    pub fn slaw_v2int64c_array_raw(N: int64, array_out: *mut *mut v2int64c) -> slaw;
    pub fn slaw_v2int64c_array_empty(N: int64) -> slaw;
    pub fn slaw_v2int64c_array_filled(N: int64, val: v2int64c) -> slaw;
    pub fn slaw_v2int64c_array(src: *const v2int64c, N: int64) -> slaw;
    pub fn slaw_v2int64c_array_emit(s: bslaw) -> *const v2int64c;
    pub fn slaw_v2int64c_array_emit_nth(s: bslaw, N: int64) -> *const v2int64c;
    pub fn slaw_v2int64c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v2int64c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v2int64c_array_concat_carray_f(s: slaw, src: *const v2int64c, N: int64) -> slaw;
    pub fn slaw_v2int64c_array_concat_carray(s: bslaw, src: *const v2int64c, N: int64) -> slaw;
    pub fn slaw_v2unt64c(val: v2unt64c) -> slaw;
    pub fn slaw_is_v2unt64c(s: bslaw) -> bool;
    pub fn slaw_is_v2unt64c_array(s: bslaw) -> bool;
    pub fn slaw_v2unt64c_emit_nocheck(s: bslaw) -> *const v2unt64c;
    pub fn slaw_v2unt64c_emit(s: bslaw) -> *const v2unt64c;
    pub fn slaw_v2unt64c_array_raw(N: int64, array_out: *mut *mut v2unt64c) -> slaw;
    pub fn slaw_v2unt64c_array_empty(N: int64) -> slaw;
    pub fn slaw_v2unt64c_array_filled(N: int64, val: v2unt64c) -> slaw;
    pub fn slaw_v2unt64c_array(src: *const v2unt64c, N: int64) -> slaw;
    pub fn slaw_v2unt64c_array_emit(s: bslaw) -> *const v2unt64c;
    pub fn slaw_v2unt64c_array_emit_nth(s: bslaw, N: int64) -> *const v2unt64c;
    pub fn slaw_v2unt64c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v2unt64c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v2unt64c_array_concat_carray_f(s: slaw, src: *const v2unt64c, N: int64) -> slaw;
    pub fn slaw_v2unt64c_array_concat_carray(s: bslaw, src: *const v2unt64c, N: int64) -> slaw;
    pub fn slaw_v2float32c(val: v2float32c) -> slaw;
    pub fn slaw_is_v2float32c(s: bslaw) -> bool;
    pub fn slaw_is_v2float32c_array(s: bslaw) -> bool;
    pub fn slaw_v2float32c_emit_nocheck(s: bslaw) -> *const v2float32c;
    pub fn slaw_v2float32c_emit(s: bslaw) -> *const v2float32c;
    pub fn slaw_v2float32c_array_raw(N: int64, array_out: *mut *mut v2float32c) -> slaw;
    pub fn slaw_v2float32c_array_empty(N: int64) -> slaw;
    pub fn slaw_v2float32c_array_filled(N: int64, val: v2float32c) -> slaw;
    pub fn slaw_v2float32c_array(src: *const v2float32c, N: int64) -> slaw;
    pub fn slaw_v2float32c_array_emit(s: bslaw) -> *const v2float32c;
    pub fn slaw_v2float32c_array_emit_nth(s: bslaw, N: int64) -> *const v2float32c;
    pub fn slaw_v2float32c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v2float32c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v2float32c_array_concat_carray_f(s: slaw, src: *const v2float32c, N: int64)
        -> slaw;
    pub fn slaw_v2float32c_array_concat_carray(s: bslaw, src: *const v2float32c, N: int64) -> slaw;
    pub fn slaw_v2float64c(val: v2float64c) -> slaw;
    pub fn slaw_is_v2float64c(s: bslaw) -> bool;
    pub fn slaw_is_v2float64c_array(s: bslaw) -> bool;
    pub fn slaw_v2float64c_emit_nocheck(s: bslaw) -> *const v2float64c;
    pub fn slaw_v2float64c_emit(s: bslaw) -> *const v2float64c;
    pub fn slaw_v2float64c_array_raw(N: int64, array_out: *mut *mut v2float64c) -> slaw;
    pub fn slaw_v2float64c_array_empty(N: int64) -> slaw;
    pub fn slaw_v2float64c_array_filled(N: int64, val: v2float64c) -> slaw;
    pub fn slaw_v2float64c_array(src: *const v2float64c, N: int64) -> slaw;
    pub fn slaw_v2float64c_array_emit(s: bslaw) -> *const v2float64c;
    pub fn slaw_v2float64c_array_emit_nth(s: bslaw, N: int64) -> *const v2float64c;
    pub fn slaw_v2float64c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v2float64c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v2float64c_array_concat_carray_f(s: slaw, src: *const v2float64c, N: int64)
        -> slaw;
    pub fn slaw_v2float64c_array_concat_carray(s: bslaw, src: *const v2float64c, N: int64) -> slaw;
    pub fn slaw_v2int8c(val: v2int8c) -> slaw;
    pub fn slaw_is_v2int8c(s: bslaw) -> bool;
    pub fn slaw_is_v2int8c_array(s: bslaw) -> bool;
    pub fn slaw_v2int8c_emit_nocheck(s: bslaw) -> *const v2int8c;
    pub fn slaw_v2int8c_emit(s: bslaw) -> *const v2int8c;
    pub fn slaw_v2int8c_array_raw(N: int64, array_out: *mut *mut v2int8c) -> slaw;
    pub fn slaw_v2int8c_array_empty(N: int64) -> slaw;
    pub fn slaw_v2int8c_array_filled(N: int64, val: v2int8c) -> slaw;
    pub fn slaw_v2int8c_array(src: *const v2int8c, N: int64) -> slaw;
    pub fn slaw_v2int8c_array_emit(s: bslaw) -> *const v2int8c;
    pub fn slaw_v2int8c_array_emit_nth(s: bslaw, N: int64) -> *const v2int8c;
    pub fn slaw_v2int8c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v2int8c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v2int8c_array_concat_carray_f(s: slaw, src: *const v2int8c, N: int64) -> slaw;
    pub fn slaw_v2int8c_array_concat_carray(s: bslaw, src: *const v2int8c, N: int64) -> slaw;
    pub fn slaw_v2unt8c(val: v2unt8c) -> slaw;
    pub fn slaw_is_v2unt8c(s: bslaw) -> bool;
    pub fn slaw_is_v2unt8c_array(s: bslaw) -> bool;
    pub fn slaw_v2unt8c_emit_nocheck(s: bslaw) -> *const v2unt8c;
    pub fn slaw_v2unt8c_emit(s: bslaw) -> *const v2unt8c;
    pub fn slaw_v2unt8c_array_raw(N: int64, array_out: *mut *mut v2unt8c) -> slaw;
    pub fn slaw_v2unt8c_array_empty(N: int64) -> slaw;
    pub fn slaw_v2unt8c_array_filled(N: int64, val: v2unt8c) -> slaw;
    pub fn slaw_v2unt8c_array(src: *const v2unt8c, N: int64) -> slaw;
    pub fn slaw_v2unt8c_array_emit(s: bslaw) -> *const v2unt8c;
    pub fn slaw_v2unt8c_array_emit_nth(s: bslaw, N: int64) -> *const v2unt8c;
    pub fn slaw_v2unt8c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v2unt8c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v2unt8c_array_concat_carray_f(s: slaw, src: *const v2unt8c, N: int64) -> slaw;
    pub fn slaw_v2unt8c_array_concat_carray(s: bslaw, src: *const v2unt8c, N: int64) -> slaw;
    pub fn slaw_v2int16c(val: v2int16c) -> slaw;
    pub fn slaw_is_v2int16c(s: bslaw) -> bool;
    pub fn slaw_is_v2int16c_array(s: bslaw) -> bool;
    pub fn slaw_v2int16c_emit_nocheck(s: bslaw) -> *const v2int16c;
    pub fn slaw_v2int16c_emit(s: bslaw) -> *const v2int16c;
    pub fn slaw_v2int16c_array_raw(N: int64, array_out: *mut *mut v2int16c) -> slaw;
    pub fn slaw_v2int16c_array_empty(N: int64) -> slaw;
    pub fn slaw_v2int16c_array_filled(N: int64, val: v2int16c) -> slaw;
    pub fn slaw_v2int16c_array(src: *const v2int16c, N: int64) -> slaw;
    pub fn slaw_v2int16c_array_emit(s: bslaw) -> *const v2int16c;
    pub fn slaw_v2int16c_array_emit_nth(s: bslaw, N: int64) -> *const v2int16c;
    pub fn slaw_v2int16c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v2int16c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v2int16c_array_concat_carray_f(s: slaw, src: *const v2int16c, N: int64) -> slaw;
    pub fn slaw_v2int16c_array_concat_carray(s: bslaw, src: *const v2int16c, N: int64) -> slaw;
    pub fn slaw_v2unt16c(val: v2unt16c) -> slaw;
    pub fn slaw_is_v2unt16c(s: bslaw) -> bool;
    pub fn slaw_is_v2unt16c_array(s: bslaw) -> bool;
    pub fn slaw_v2unt16c_emit_nocheck(s: bslaw) -> *const v2unt16c;
    pub fn slaw_v2unt16c_emit(s: bslaw) -> *const v2unt16c;
    pub fn slaw_v2unt16c_array_raw(N: int64, array_out: *mut *mut v2unt16c) -> slaw;
    pub fn slaw_v2unt16c_array_empty(N: int64) -> slaw;
    pub fn slaw_v2unt16c_array_filled(N: int64, val: v2unt16c) -> slaw;
    pub fn slaw_v2unt16c_array(src: *const v2unt16c, N: int64) -> slaw;
    pub fn slaw_v2unt16c_array_emit(s: bslaw) -> *const v2unt16c;
    pub fn slaw_v2unt16c_array_emit_nth(s: bslaw, N: int64) -> *const v2unt16c;
    pub fn slaw_v2unt16c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v2unt16c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v2unt16c_array_concat_carray_f(s: slaw, src: *const v2unt16c, N: int64) -> slaw;
    pub fn slaw_v2unt16c_array_concat_carray(s: bslaw, src: *const v2unt16c, N: int64) -> slaw;
    pub fn slaw_v3int32c(val: v3int32c) -> slaw;
    pub fn slaw_is_v3int32c(s: bslaw) -> bool;
    pub fn slaw_is_v3int32c_array(s: bslaw) -> bool;
    pub fn slaw_v3int32c_emit_nocheck(s: bslaw) -> *const v3int32c;
    pub fn slaw_v3int32c_emit(s: bslaw) -> *const v3int32c;
    pub fn slaw_v3int32c_array_raw(N: int64, array_out: *mut *mut v3int32c) -> slaw;
    pub fn slaw_v3int32c_array_empty(N: int64) -> slaw;
    pub fn slaw_v3int32c_array_filled(N: int64, val: v3int32c) -> slaw;
    pub fn slaw_v3int32c_array(src: *const v3int32c, N: int64) -> slaw;
    pub fn slaw_v3int32c_array_emit(s: bslaw) -> *const v3int32c;
    pub fn slaw_v3int32c_array_emit_nth(s: bslaw, N: int64) -> *const v3int32c;
    pub fn slaw_v3int32c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v3int32c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v3int32c_array_concat_carray_f(s: slaw, src: *const v3int32c, N: int64) -> slaw;
    pub fn slaw_v3int32c_array_concat_carray(s: bslaw, src: *const v3int32c, N: int64) -> slaw;
    pub fn slaw_v3unt32c(val: v3unt32c) -> slaw;
    pub fn slaw_is_v3unt32c(s: bslaw) -> bool;
    pub fn slaw_is_v3unt32c_array(s: bslaw) -> bool;
    pub fn slaw_v3unt32c_emit_nocheck(s: bslaw) -> *const v3unt32c;
    pub fn slaw_v3unt32c_emit(s: bslaw) -> *const v3unt32c;
    pub fn slaw_v3unt32c_array_raw(N: int64, array_out: *mut *mut v3unt32c) -> slaw;
    pub fn slaw_v3unt32c_array_empty(N: int64) -> slaw;
    pub fn slaw_v3unt32c_array_filled(N: int64, val: v3unt32c) -> slaw;
    pub fn slaw_v3unt32c_array(src: *const v3unt32c, N: int64) -> slaw;
    pub fn slaw_v3unt32c_array_emit(s: bslaw) -> *const v3unt32c;
    pub fn slaw_v3unt32c_array_emit_nth(s: bslaw, N: int64) -> *const v3unt32c;
    pub fn slaw_v3unt32c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v3unt32c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v3unt32c_array_concat_carray_f(s: slaw, src: *const v3unt32c, N: int64) -> slaw;
    pub fn slaw_v3unt32c_array_concat_carray(s: bslaw, src: *const v3unt32c, N: int64) -> slaw;
    pub fn slaw_v3int64c(val: v3int64c) -> slaw;
    pub fn slaw_is_v3int64c(s: bslaw) -> bool;
    pub fn slaw_is_v3int64c_array(s: bslaw) -> bool;
    pub fn slaw_v3int64c_emit_nocheck(s: bslaw) -> *const v3int64c;
    pub fn slaw_v3int64c_emit(s: bslaw) -> *const v3int64c;
    pub fn slaw_v3int64c_array_raw(N: int64, array_out: *mut *mut v3int64c) -> slaw;
    pub fn slaw_v3int64c_array_empty(N: int64) -> slaw;
    pub fn slaw_v3int64c_array_filled(N: int64, val: v3int64c) -> slaw;
    pub fn slaw_v3int64c_array(src: *const v3int64c, N: int64) -> slaw;
    pub fn slaw_v3int64c_array_emit(s: bslaw) -> *const v3int64c;
    pub fn slaw_v3int64c_array_emit_nth(s: bslaw, N: int64) -> *const v3int64c;
    pub fn slaw_v3int64c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v3int64c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v3int64c_array_concat_carray_f(s: slaw, src: *const v3int64c, N: int64) -> slaw;
    pub fn slaw_v3int64c_array_concat_carray(s: bslaw, src: *const v3int64c, N: int64) -> slaw;
    pub fn slaw_v3unt64c(val: v3unt64c) -> slaw;
    pub fn slaw_is_v3unt64c(s: bslaw) -> bool;
    pub fn slaw_is_v3unt64c_array(s: bslaw) -> bool;
    pub fn slaw_v3unt64c_emit_nocheck(s: bslaw) -> *const v3unt64c;
    pub fn slaw_v3unt64c_emit(s: bslaw) -> *const v3unt64c;
    pub fn slaw_v3unt64c_array_raw(N: int64, array_out: *mut *mut v3unt64c) -> slaw;
    pub fn slaw_v3unt64c_array_empty(N: int64) -> slaw;
    pub fn slaw_v3unt64c_array_filled(N: int64, val: v3unt64c) -> slaw;
    pub fn slaw_v3unt64c_array(src: *const v3unt64c, N: int64) -> slaw;
    pub fn slaw_v3unt64c_array_emit(s: bslaw) -> *const v3unt64c;
    pub fn slaw_v3unt64c_array_emit_nth(s: bslaw, N: int64) -> *const v3unt64c;
    pub fn slaw_v3unt64c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v3unt64c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v3unt64c_array_concat_carray_f(s: slaw, src: *const v3unt64c, N: int64) -> slaw;
    pub fn slaw_v3unt64c_array_concat_carray(s: bslaw, src: *const v3unt64c, N: int64) -> slaw;
    pub fn slaw_v3float32c(val: v3float32c) -> slaw;
    pub fn slaw_is_v3float32c(s: bslaw) -> bool;
    pub fn slaw_is_v3float32c_array(s: bslaw) -> bool;
    pub fn slaw_v3float32c_emit_nocheck(s: bslaw) -> *const v3float32c;
    pub fn slaw_v3float32c_emit(s: bslaw) -> *const v3float32c;
    pub fn slaw_v3float32c_array_raw(N: int64, array_out: *mut *mut v3float32c) -> slaw;
    pub fn slaw_v3float32c_array_empty(N: int64) -> slaw;
    pub fn slaw_v3float32c_array_filled(N: int64, val: v3float32c) -> slaw;
    pub fn slaw_v3float32c_array(src: *const v3float32c, N: int64) -> slaw;
    pub fn slaw_v3float32c_array_emit(s: bslaw) -> *const v3float32c;
    pub fn slaw_v3float32c_array_emit_nth(s: bslaw, N: int64) -> *const v3float32c;
    pub fn slaw_v3float32c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v3float32c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v3float32c_array_concat_carray_f(s: slaw, src: *const v3float32c, N: int64)
        -> slaw;
    pub fn slaw_v3float32c_array_concat_carray(s: bslaw, src: *const v3float32c, N: int64) -> slaw;
    pub fn slaw_v3float64c(val: v3float64c) -> slaw;
    pub fn slaw_is_v3float64c(s: bslaw) -> bool;
    pub fn slaw_is_v3float64c_array(s: bslaw) -> bool;
    pub fn slaw_v3float64c_emit_nocheck(s: bslaw) -> *const v3float64c;
    pub fn slaw_v3float64c_emit(s: bslaw) -> *const v3float64c;
    pub fn slaw_v3float64c_array_raw(N: int64, array_out: *mut *mut v3float64c) -> slaw;
    pub fn slaw_v3float64c_array_empty(N: int64) -> slaw;
    pub fn slaw_v3float64c_array_filled(N: int64, val: v3float64c) -> slaw;
    pub fn slaw_v3float64c_array(src: *const v3float64c, N: int64) -> slaw;
    pub fn slaw_v3float64c_array_emit(s: bslaw) -> *const v3float64c;
    pub fn slaw_v3float64c_array_emit_nth(s: bslaw, N: int64) -> *const v3float64c;
    pub fn slaw_v3float64c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v3float64c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v3float64c_array_concat_carray_f(s: slaw, src: *const v3float64c, N: int64)
        -> slaw;
    pub fn slaw_v3float64c_array_concat_carray(s: bslaw, src: *const v3float64c, N: int64) -> slaw;
    pub fn slaw_v3int8c(val: v3int8c) -> slaw;
    pub fn slaw_is_v3int8c(s: bslaw) -> bool;
    pub fn slaw_is_v3int8c_array(s: bslaw) -> bool;
    pub fn slaw_v3int8c_emit_nocheck(s: bslaw) -> *const v3int8c;
    pub fn slaw_v3int8c_emit(s: bslaw) -> *const v3int8c;
    pub fn slaw_v3int8c_array_raw(N: int64, array_out: *mut *mut v3int8c) -> slaw;
    pub fn slaw_v3int8c_array_empty(N: int64) -> slaw;
    pub fn slaw_v3int8c_array_filled(N: int64, val: v3int8c) -> slaw;
    pub fn slaw_v3int8c_array(src: *const v3int8c, N: int64) -> slaw;
    pub fn slaw_v3int8c_array_emit(s: bslaw) -> *const v3int8c;
    pub fn slaw_v3int8c_array_emit_nth(s: bslaw, N: int64) -> *const v3int8c;
    pub fn slaw_v3int8c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v3int8c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v3int8c_array_concat_carray_f(s: slaw, src: *const v3int8c, N: int64) -> slaw;
    pub fn slaw_v3int8c_array_concat_carray(s: bslaw, src: *const v3int8c, N: int64) -> slaw;
    pub fn slaw_v3unt8c(val: v3unt8c) -> slaw;
    pub fn slaw_is_v3unt8c(s: bslaw) -> bool;
    pub fn slaw_is_v3unt8c_array(s: bslaw) -> bool;
    pub fn slaw_v3unt8c_emit_nocheck(s: bslaw) -> *const v3unt8c;
    pub fn slaw_v3unt8c_emit(s: bslaw) -> *const v3unt8c;
    pub fn slaw_v3unt8c_array_raw(N: int64, array_out: *mut *mut v3unt8c) -> slaw;
    pub fn slaw_v3unt8c_array_empty(N: int64) -> slaw;
    pub fn slaw_v3unt8c_array_filled(N: int64, val: v3unt8c) -> slaw;
    pub fn slaw_v3unt8c_array(src: *const v3unt8c, N: int64) -> slaw;
    pub fn slaw_v3unt8c_array_emit(s: bslaw) -> *const v3unt8c;
    pub fn slaw_v3unt8c_array_emit_nth(s: bslaw, N: int64) -> *const v3unt8c;
    pub fn slaw_v3unt8c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v3unt8c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v3unt8c_array_concat_carray_f(s: slaw, src: *const v3unt8c, N: int64) -> slaw;
    pub fn slaw_v3unt8c_array_concat_carray(s: bslaw, src: *const v3unt8c, N: int64) -> slaw;
    pub fn slaw_v3int16c(val: v3int16c) -> slaw;
    pub fn slaw_is_v3int16c(s: bslaw) -> bool;
    pub fn slaw_is_v3int16c_array(s: bslaw) -> bool;
    pub fn slaw_v3int16c_emit_nocheck(s: bslaw) -> *const v3int16c;
    pub fn slaw_v3int16c_emit(s: bslaw) -> *const v3int16c;
    pub fn slaw_v3int16c_array_raw(N: int64, array_out: *mut *mut v3int16c) -> slaw;
    pub fn slaw_v3int16c_array_empty(N: int64) -> slaw;
    pub fn slaw_v3int16c_array_filled(N: int64, val: v3int16c) -> slaw;
    pub fn slaw_v3int16c_array(src: *const v3int16c, N: int64) -> slaw;
    pub fn slaw_v3int16c_array_emit(s: bslaw) -> *const v3int16c;
    pub fn slaw_v3int16c_array_emit_nth(s: bslaw, N: int64) -> *const v3int16c;
    pub fn slaw_v3int16c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v3int16c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v3int16c_array_concat_carray_f(s: slaw, src: *const v3int16c, N: int64) -> slaw;
    pub fn slaw_v3int16c_array_concat_carray(s: bslaw, src: *const v3int16c, N: int64) -> slaw;
    pub fn slaw_v3unt16c(val: v3unt16c) -> slaw;
    pub fn slaw_is_v3unt16c(s: bslaw) -> bool;
    pub fn slaw_is_v3unt16c_array(s: bslaw) -> bool;
    pub fn slaw_v3unt16c_emit_nocheck(s: bslaw) -> *const v3unt16c;
    pub fn slaw_v3unt16c_emit(s: bslaw) -> *const v3unt16c;
    pub fn slaw_v3unt16c_array_raw(N: int64, array_out: *mut *mut v3unt16c) -> slaw;
    pub fn slaw_v3unt16c_array_empty(N: int64) -> slaw;
    pub fn slaw_v3unt16c_array_filled(N: int64, val: v3unt16c) -> slaw;
    pub fn slaw_v3unt16c_array(src: *const v3unt16c, N: int64) -> slaw;
    pub fn slaw_v3unt16c_array_emit(s: bslaw) -> *const v3unt16c;
    pub fn slaw_v3unt16c_array_emit_nth(s: bslaw, N: int64) -> *const v3unt16c;
    pub fn slaw_v3unt16c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v3unt16c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v3unt16c_array_concat_carray_f(s: slaw, src: *const v3unt16c, N: int64) -> slaw;
    pub fn slaw_v3unt16c_array_concat_carray(s: bslaw, src: *const v3unt16c, N: int64) -> slaw;
    pub fn slaw_v4int32c(val: v4int32c) -> slaw;
    pub fn slaw_is_v4int32c(s: bslaw) -> bool;
    pub fn slaw_is_v4int32c_array(s: bslaw) -> bool;
    pub fn slaw_v4int32c_emit_nocheck(s: bslaw) -> *const v4int32c;
    pub fn slaw_v4int32c_emit(s: bslaw) -> *const v4int32c;
    pub fn slaw_v4int32c_array_raw(N: int64, array_out: *mut *mut v4int32c) -> slaw;
    pub fn slaw_v4int32c_array_empty(N: int64) -> slaw;
    pub fn slaw_v4int32c_array_filled(N: int64, val: v4int32c) -> slaw;
    pub fn slaw_v4int32c_array(src: *const v4int32c, N: int64) -> slaw;
    pub fn slaw_v4int32c_array_emit(s: bslaw) -> *const v4int32c;
    pub fn slaw_v4int32c_array_emit_nth(s: bslaw, N: int64) -> *const v4int32c;
    pub fn slaw_v4int32c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v4int32c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v4int32c_array_concat_carray_f(s: slaw, src: *const v4int32c, N: int64) -> slaw;
    pub fn slaw_v4int32c_array_concat_carray(s: bslaw, src: *const v4int32c, N: int64) -> slaw;
    pub fn slaw_v4unt32c(val: v4unt32c) -> slaw;
    pub fn slaw_is_v4unt32c(s: bslaw) -> bool;
    pub fn slaw_is_v4unt32c_array(s: bslaw) -> bool;
    pub fn slaw_v4unt32c_emit_nocheck(s: bslaw) -> *const v4unt32c;
    pub fn slaw_v4unt32c_emit(s: bslaw) -> *const v4unt32c;
    pub fn slaw_v4unt32c_array_raw(N: int64, array_out: *mut *mut v4unt32c) -> slaw;
    pub fn slaw_v4unt32c_array_empty(N: int64) -> slaw;
    pub fn slaw_v4unt32c_array_filled(N: int64, val: v4unt32c) -> slaw;
    pub fn slaw_v4unt32c_array(src: *const v4unt32c, N: int64) -> slaw;
    pub fn slaw_v4unt32c_array_emit(s: bslaw) -> *const v4unt32c;
    pub fn slaw_v4unt32c_array_emit_nth(s: bslaw, N: int64) -> *const v4unt32c;
    pub fn slaw_v4unt32c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v4unt32c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v4unt32c_array_concat_carray_f(s: slaw, src: *const v4unt32c, N: int64) -> slaw;
    pub fn slaw_v4unt32c_array_concat_carray(s: bslaw, src: *const v4unt32c, N: int64) -> slaw;
    pub fn slaw_v4int64c(val: v4int64c) -> slaw;
    pub fn slaw_is_v4int64c(s: bslaw) -> bool;
    pub fn slaw_is_v4int64c_array(s: bslaw) -> bool;
    pub fn slaw_v4int64c_emit_nocheck(s: bslaw) -> *const v4int64c;
    pub fn slaw_v4int64c_emit(s: bslaw) -> *const v4int64c;
    pub fn slaw_v4int64c_array_raw(N: int64, array_out: *mut *mut v4int64c) -> slaw;
    pub fn slaw_v4int64c_array_empty(N: int64) -> slaw;
    pub fn slaw_v4int64c_array_filled(N: int64, val: v4int64c) -> slaw;
    pub fn slaw_v4int64c_array(src: *const v4int64c, N: int64) -> slaw;
    pub fn slaw_v4int64c_array_emit(s: bslaw) -> *const v4int64c;
    pub fn slaw_v4int64c_array_emit_nth(s: bslaw, N: int64) -> *const v4int64c;
    pub fn slaw_v4int64c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v4int64c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v4int64c_array_concat_carray_f(s: slaw, src: *const v4int64c, N: int64) -> slaw;
    pub fn slaw_v4int64c_array_concat_carray(s: bslaw, src: *const v4int64c, N: int64) -> slaw;
    pub fn slaw_v4unt64c(val: v4unt64c) -> slaw;
    pub fn slaw_is_v4unt64c(s: bslaw) -> bool;
    pub fn slaw_is_v4unt64c_array(s: bslaw) -> bool;
    pub fn slaw_v4unt64c_emit_nocheck(s: bslaw) -> *const v4unt64c;
    pub fn slaw_v4unt64c_emit(s: bslaw) -> *const v4unt64c;
    pub fn slaw_v4unt64c_array_raw(N: int64, array_out: *mut *mut v4unt64c) -> slaw;
    pub fn slaw_v4unt64c_array_empty(N: int64) -> slaw;
    pub fn slaw_v4unt64c_array_filled(N: int64, val: v4unt64c) -> slaw;
    pub fn slaw_v4unt64c_array(src: *const v4unt64c, N: int64) -> slaw;
    pub fn slaw_v4unt64c_array_emit(s: bslaw) -> *const v4unt64c;
    pub fn slaw_v4unt64c_array_emit_nth(s: bslaw, N: int64) -> *const v4unt64c;
    pub fn slaw_v4unt64c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v4unt64c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v4unt64c_array_concat_carray_f(s: slaw, src: *const v4unt64c, N: int64) -> slaw;
    pub fn slaw_v4unt64c_array_concat_carray(s: bslaw, src: *const v4unt64c, N: int64) -> slaw;
    pub fn slaw_v4float32c(val: v4float32c) -> slaw;
    pub fn slaw_is_v4float32c(s: bslaw) -> bool;
    pub fn slaw_is_v4float32c_array(s: bslaw) -> bool;
    pub fn slaw_v4float32c_emit_nocheck(s: bslaw) -> *const v4float32c;
    pub fn slaw_v4float32c_emit(s: bslaw) -> *const v4float32c;
    pub fn slaw_v4float32c_array_raw(N: int64, array_out: *mut *mut v4float32c) -> slaw;
    pub fn slaw_v4float32c_array_empty(N: int64) -> slaw;
    pub fn slaw_v4float32c_array_filled(N: int64, val: v4float32c) -> slaw;
    pub fn slaw_v4float32c_array(src: *const v4float32c, N: int64) -> slaw;
    pub fn slaw_v4float32c_array_emit(s: bslaw) -> *const v4float32c;
    pub fn slaw_v4float32c_array_emit_nth(s: bslaw, N: int64) -> *const v4float32c;
    pub fn slaw_v4float32c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v4float32c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v4float32c_array_concat_carray_f(s: slaw, src: *const v4float32c, N: int64)
        -> slaw;
    pub fn slaw_v4float32c_array_concat_carray(s: bslaw, src: *const v4float32c, N: int64) -> slaw;
    pub fn slaw_v4float64c(val: v4float64c) -> slaw;
    pub fn slaw_is_v4float64c(s: bslaw) -> bool;
    pub fn slaw_is_v4float64c_array(s: bslaw) -> bool;
    pub fn slaw_v4float64c_emit_nocheck(s: bslaw) -> *const v4float64c;
    pub fn slaw_v4float64c_emit(s: bslaw) -> *const v4float64c;
    pub fn slaw_v4float64c_array_raw(N: int64, array_out: *mut *mut v4float64c) -> slaw;
    pub fn slaw_v4float64c_array_empty(N: int64) -> slaw;
    pub fn slaw_v4float64c_array_filled(N: int64, val: v4float64c) -> slaw;
    pub fn slaw_v4float64c_array(src: *const v4float64c, N: int64) -> slaw;
    pub fn slaw_v4float64c_array_emit(s: bslaw) -> *const v4float64c;
    pub fn slaw_v4float64c_array_emit_nth(s: bslaw, N: int64) -> *const v4float64c;
    pub fn slaw_v4float64c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v4float64c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v4float64c_array_concat_carray_f(s: slaw, src: *const v4float64c, N: int64)
        -> slaw;
    pub fn slaw_v4float64c_array_concat_carray(s: bslaw, src: *const v4float64c, N: int64) -> slaw;
    pub fn slaw_v4int8c(val: v4int8c) -> slaw;
    pub fn slaw_is_v4int8c(s: bslaw) -> bool;
    pub fn slaw_is_v4int8c_array(s: bslaw) -> bool;
    pub fn slaw_v4int8c_emit_nocheck(s: bslaw) -> *const v4int8c;
    pub fn slaw_v4int8c_emit(s: bslaw) -> *const v4int8c;
    pub fn slaw_v4int8c_array_raw(N: int64, array_out: *mut *mut v4int8c) -> slaw;
    pub fn slaw_v4int8c_array_empty(N: int64) -> slaw;
    pub fn slaw_v4int8c_array_filled(N: int64, val: v4int8c) -> slaw;
    pub fn slaw_v4int8c_array(src: *const v4int8c, N: int64) -> slaw;
    pub fn slaw_v4int8c_array_emit(s: bslaw) -> *const v4int8c;
    pub fn slaw_v4int8c_array_emit_nth(s: bslaw, N: int64) -> *const v4int8c;
    pub fn slaw_v4int8c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v4int8c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v4int8c_array_concat_carray_f(s: slaw, src: *const v4int8c, N: int64) -> slaw;
    pub fn slaw_v4int8c_array_concat_carray(s: bslaw, src: *const v4int8c, N: int64) -> slaw;
    pub fn slaw_v4unt8c(val: v4unt8c) -> slaw;
    pub fn slaw_is_v4unt8c(s: bslaw) -> bool;
    pub fn slaw_is_v4unt8c_array(s: bslaw) -> bool;
    pub fn slaw_v4unt8c_emit_nocheck(s: bslaw) -> *const v4unt8c;
    pub fn slaw_v4unt8c_emit(s: bslaw) -> *const v4unt8c;
    pub fn slaw_v4unt8c_array_raw(N: int64, array_out: *mut *mut v4unt8c) -> slaw;
    pub fn slaw_v4unt8c_array_empty(N: int64) -> slaw;
    pub fn slaw_v4unt8c_array_filled(N: int64, val: v4unt8c) -> slaw;
    pub fn slaw_v4unt8c_array(src: *const v4unt8c, N: int64) -> slaw;
    pub fn slaw_v4unt8c_array_emit(s: bslaw) -> *const v4unt8c;
    pub fn slaw_v4unt8c_array_emit_nth(s: bslaw, N: int64) -> *const v4unt8c;
    pub fn slaw_v4unt8c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v4unt8c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v4unt8c_array_concat_carray_f(s: slaw, src: *const v4unt8c, N: int64) -> slaw;
    pub fn slaw_v4unt8c_array_concat_carray(s: bslaw, src: *const v4unt8c, N: int64) -> slaw;
    pub fn slaw_v4int16c(val: v4int16c) -> slaw;
    pub fn slaw_is_v4int16c(s: bslaw) -> bool;
    pub fn slaw_is_v4int16c_array(s: bslaw) -> bool;
    pub fn slaw_v4int16c_emit_nocheck(s: bslaw) -> *const v4int16c;
    pub fn slaw_v4int16c_emit(s: bslaw) -> *const v4int16c;
    pub fn slaw_v4int16c_array_raw(N: int64, array_out: *mut *mut v4int16c) -> slaw;
    pub fn slaw_v4int16c_array_empty(N: int64) -> slaw;
    pub fn slaw_v4int16c_array_filled(N: int64, val: v4int16c) -> slaw;
    pub fn slaw_v4int16c_array(src: *const v4int16c, N: int64) -> slaw;
    pub fn slaw_v4int16c_array_emit(s: bslaw) -> *const v4int16c;
    pub fn slaw_v4int16c_array_emit_nth(s: bslaw, N: int64) -> *const v4int16c;
    pub fn slaw_v4int16c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v4int16c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v4int16c_array_concat_carray_f(s: slaw, src: *const v4int16c, N: int64) -> slaw;
    pub fn slaw_v4int16c_array_concat_carray(s: bslaw, src: *const v4int16c, N: int64) -> slaw;
    pub fn slaw_v4unt16c(val: v4unt16c) -> slaw;
    pub fn slaw_is_v4unt16c(s: bslaw) -> bool;
    pub fn slaw_is_v4unt16c_array(s: bslaw) -> bool;
    pub fn slaw_v4unt16c_emit_nocheck(s: bslaw) -> *const v4unt16c;
    pub fn slaw_v4unt16c_emit(s: bslaw) -> *const v4unt16c;
    pub fn slaw_v4unt16c_array_raw(N: int64, array_out: *mut *mut v4unt16c) -> slaw;
    pub fn slaw_v4unt16c_array_empty(N: int64) -> slaw;
    pub fn slaw_v4unt16c_array_filled(N: int64, val: v4unt16c) -> slaw;
    pub fn slaw_v4unt16c_array(src: *const v4unt16c, N: int64) -> slaw;
    pub fn slaw_v4unt16c_array_emit(s: bslaw) -> *const v4unt16c;
    pub fn slaw_v4unt16c_array_emit_nth(s: bslaw, N: int64) -> *const v4unt16c;
    pub fn slaw_v4unt16c_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_v4unt16c_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_v4unt16c_array_concat_carray_f(s: slaw, src: *const v4unt16c, N: int64) -> slaw;
    pub fn slaw_v4unt16c_array_concat_carray(s: bslaw, src: *const v4unt16c, N: int64) -> slaw;
    pub fn slaw_m2int32(val: m2int32) -> slaw;
    pub fn slaw_is_m2int32(s: bslaw) -> bool;
    pub fn slaw_is_m2int32_array(s: bslaw) -> bool;
    pub fn slaw_m2int32_emit_nocheck(s: bslaw) -> *const m2int32;
    pub fn slaw_m2int32_emit(s: bslaw) -> *const m2int32;
    pub fn slaw_m2int32_array_raw(N: int64, array_out: *mut *mut m2int32) -> slaw;
    pub fn slaw_m2int32_array_empty(N: int64) -> slaw;
    pub fn slaw_m2int32_array_filled(N: int64, val: m2int32) -> slaw;
    pub fn slaw_m2int32_array(src: *const m2int32, N: int64) -> slaw;
    pub fn slaw_m2int32_array_emit(s: bslaw) -> *const m2int32;
    pub fn slaw_m2int32_array_emit_nth(s: bslaw, N: int64) -> *const m2int32;
    pub fn slaw_m2int32_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m2int32_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m2int32_array_concat_carray_f(s: slaw, src: *const m2int32, N: int64) -> slaw;
    pub fn slaw_m2int32_array_concat_carray(s: bslaw, src: *const m2int32, N: int64) -> slaw;
    pub fn slaw_m2unt32(val: m2unt32) -> slaw;
    pub fn slaw_is_m2unt32(s: bslaw) -> bool;
    pub fn slaw_is_m2unt32_array(s: bslaw) -> bool;
    pub fn slaw_m2unt32_emit_nocheck(s: bslaw) -> *const m2unt32;
    pub fn slaw_m2unt32_emit(s: bslaw) -> *const m2unt32;
    pub fn slaw_m2unt32_array_raw(N: int64, array_out: *mut *mut m2unt32) -> slaw;
    pub fn slaw_m2unt32_array_empty(N: int64) -> slaw;
    pub fn slaw_m2unt32_array_filled(N: int64, val: m2unt32) -> slaw;
    pub fn slaw_m2unt32_array(src: *const m2unt32, N: int64) -> slaw;
    pub fn slaw_m2unt32_array_emit(s: bslaw) -> *const m2unt32;
    pub fn slaw_m2unt32_array_emit_nth(s: bslaw, N: int64) -> *const m2unt32;
    pub fn slaw_m2unt32_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m2unt32_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m2unt32_array_concat_carray_f(s: slaw, src: *const m2unt32, N: int64) -> slaw;
    pub fn slaw_m2unt32_array_concat_carray(s: bslaw, src: *const m2unt32, N: int64) -> slaw;
    pub fn slaw_m2int64(val: m2int64) -> slaw;
    pub fn slaw_is_m2int64(s: bslaw) -> bool;
    pub fn slaw_is_m2int64_array(s: bslaw) -> bool;
    pub fn slaw_m2int64_emit_nocheck(s: bslaw) -> *const m2int64;
    pub fn slaw_m2int64_emit(s: bslaw) -> *const m2int64;
    pub fn slaw_m2int64_array_raw(N: int64, array_out: *mut *mut m2int64) -> slaw;
    pub fn slaw_m2int64_array_empty(N: int64) -> slaw;
    pub fn slaw_m2int64_array_filled(N: int64, val: m2int64) -> slaw;
    pub fn slaw_m2int64_array(src: *const m2int64, N: int64) -> slaw;
    pub fn slaw_m2int64_array_emit(s: bslaw) -> *const m2int64;
    pub fn slaw_m2int64_array_emit_nth(s: bslaw, N: int64) -> *const m2int64;
    pub fn slaw_m2int64_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m2int64_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m2int64_array_concat_carray_f(s: slaw, src: *const m2int64, N: int64) -> slaw;
    pub fn slaw_m2int64_array_concat_carray(s: bslaw, src: *const m2int64, N: int64) -> slaw;
    pub fn slaw_m2unt64(val: m2unt64) -> slaw;
    pub fn slaw_is_m2unt64(s: bslaw) -> bool;
    pub fn slaw_is_m2unt64_array(s: bslaw) -> bool;
    pub fn slaw_m2unt64_emit_nocheck(s: bslaw) -> *const m2unt64;
    pub fn slaw_m2unt64_emit(s: bslaw) -> *const m2unt64;
    pub fn slaw_m2unt64_array_raw(N: int64, array_out: *mut *mut m2unt64) -> slaw;
    pub fn slaw_m2unt64_array_empty(N: int64) -> slaw;
    pub fn slaw_m2unt64_array_filled(N: int64, val: m2unt64) -> slaw;
    pub fn slaw_m2unt64_array(src: *const m2unt64, N: int64) -> slaw;
    pub fn slaw_m2unt64_array_emit(s: bslaw) -> *const m2unt64;
    pub fn slaw_m2unt64_array_emit_nth(s: bslaw, N: int64) -> *const m2unt64;
    pub fn slaw_m2unt64_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m2unt64_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m2unt64_array_concat_carray_f(s: slaw, src: *const m2unt64, N: int64) -> slaw;
    pub fn slaw_m2unt64_array_concat_carray(s: bslaw, src: *const m2unt64, N: int64) -> slaw;
    pub fn slaw_m2float32(val: m2float32) -> slaw;
    pub fn slaw_is_m2float32(s: bslaw) -> bool;
    pub fn slaw_is_m2float32_array(s: bslaw) -> bool;
    pub fn slaw_m2float32_emit_nocheck(s: bslaw) -> *const m2float32;
    pub fn slaw_m2float32_emit(s: bslaw) -> *const m2float32;
    pub fn slaw_m2float32_array_raw(N: int64, array_out: *mut *mut m2float32) -> slaw;
    pub fn slaw_m2float32_array_empty(N: int64) -> slaw;
    pub fn slaw_m2float32_array_filled(N: int64, val: m2float32) -> slaw;
    pub fn slaw_m2float32_array(src: *const m2float32, N: int64) -> slaw;
    pub fn slaw_m2float32_array_emit(s: bslaw) -> *const m2float32;
    pub fn slaw_m2float32_array_emit_nth(s: bslaw, N: int64) -> *const m2float32;
    pub fn slaw_m2float32_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m2float32_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m2float32_array_concat_carray_f(s: slaw, src: *const m2float32, N: int64) -> slaw;
    pub fn slaw_m2float32_array_concat_carray(s: bslaw, src: *const m2float32, N: int64) -> slaw;
    pub fn slaw_m2float64(val: m2float64) -> slaw;
    pub fn slaw_is_m2float64(s: bslaw) -> bool;
    pub fn slaw_is_m2float64_array(s: bslaw) -> bool;
    pub fn slaw_m2float64_emit_nocheck(s: bslaw) -> *const m2float64;
    pub fn slaw_m2float64_emit(s: bslaw) -> *const m2float64;
    pub fn slaw_m2float64_array_raw(N: int64, array_out: *mut *mut m2float64) -> slaw;
    pub fn slaw_m2float64_array_empty(N: int64) -> slaw;
    pub fn slaw_m2float64_array_filled(N: int64, val: m2float64) -> slaw;
    pub fn slaw_m2float64_array(src: *const m2float64, N: int64) -> slaw;
    pub fn slaw_m2float64_array_emit(s: bslaw) -> *const m2float64;
    pub fn slaw_m2float64_array_emit_nth(s: bslaw, N: int64) -> *const m2float64;
    pub fn slaw_m2float64_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m2float64_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m2float64_array_concat_carray_f(s: slaw, src: *const m2float64, N: int64) -> slaw;
    pub fn slaw_m2float64_array_concat_carray(s: bslaw, src: *const m2float64, N: int64) -> slaw;
    pub fn slaw_m2int8(val: m2int8) -> slaw;
    pub fn slaw_is_m2int8(s: bslaw) -> bool;
    pub fn slaw_is_m2int8_array(s: bslaw) -> bool;
    pub fn slaw_m2int8_emit_nocheck(s: bslaw) -> *const m2int8;
    pub fn slaw_m2int8_emit(s: bslaw) -> *const m2int8;
    pub fn slaw_m2int8_array_raw(N: int64, array_out: *mut *mut m2int8) -> slaw;
    pub fn slaw_m2int8_array_empty(N: int64) -> slaw;
    pub fn slaw_m2int8_array_filled(N: int64, val: m2int8) -> slaw;
    pub fn slaw_m2int8_array(src: *const m2int8, N: int64) -> slaw;
    pub fn slaw_m2int8_array_emit(s: bslaw) -> *const m2int8;
    pub fn slaw_m2int8_array_emit_nth(s: bslaw, N: int64) -> *const m2int8;
    pub fn slaw_m2int8_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m2int8_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m2int8_array_concat_carray_f(s: slaw, src: *const m2int8, N: int64) -> slaw;
    pub fn slaw_m2int8_array_concat_carray(s: bslaw, src: *const m2int8, N: int64) -> slaw;
    pub fn slaw_m2unt8(val: m2unt8) -> slaw;
    pub fn slaw_is_m2unt8(s: bslaw) -> bool;
    pub fn slaw_is_m2unt8_array(s: bslaw) -> bool;
    pub fn slaw_m2unt8_emit_nocheck(s: bslaw) -> *const m2unt8;
    pub fn slaw_m2unt8_emit(s: bslaw) -> *const m2unt8;
    pub fn slaw_m2unt8_array_raw(N: int64, array_out: *mut *mut m2unt8) -> slaw;
    pub fn slaw_m2unt8_array_empty(N: int64) -> slaw;
    pub fn slaw_m2unt8_array_filled(N: int64, val: m2unt8) -> slaw;
    pub fn slaw_m2unt8_array(src: *const m2unt8, N: int64) -> slaw;
    pub fn slaw_m2unt8_array_emit(s: bslaw) -> *const m2unt8;
    pub fn slaw_m2unt8_array_emit_nth(s: bslaw, N: int64) -> *const m2unt8;
    pub fn slaw_m2unt8_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m2unt8_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m2unt8_array_concat_carray_f(s: slaw, src: *const m2unt8, N: int64) -> slaw;
    pub fn slaw_m2unt8_array_concat_carray(s: bslaw, src: *const m2unt8, N: int64) -> slaw;
    pub fn slaw_m2int16(val: m2int16) -> slaw;
    pub fn slaw_is_m2int16(s: bslaw) -> bool;
    pub fn slaw_is_m2int16_array(s: bslaw) -> bool;
    pub fn slaw_m2int16_emit_nocheck(s: bslaw) -> *const m2int16;
    pub fn slaw_m2int16_emit(s: bslaw) -> *const m2int16;
    pub fn slaw_m2int16_array_raw(N: int64, array_out: *mut *mut m2int16) -> slaw;
    pub fn slaw_m2int16_array_empty(N: int64) -> slaw;
    pub fn slaw_m2int16_array_filled(N: int64, val: m2int16) -> slaw;
    pub fn slaw_m2int16_array(src: *const m2int16, N: int64) -> slaw;
    pub fn slaw_m2int16_array_emit(s: bslaw) -> *const m2int16;
    pub fn slaw_m2int16_array_emit_nth(s: bslaw, N: int64) -> *const m2int16;
    pub fn slaw_m2int16_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m2int16_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m2int16_array_concat_carray_f(s: slaw, src: *const m2int16, N: int64) -> slaw;
    pub fn slaw_m2int16_array_concat_carray(s: bslaw, src: *const m2int16, N: int64) -> slaw;
    pub fn slaw_m2unt16(val: m2unt16) -> slaw;
    pub fn slaw_is_m2unt16(s: bslaw) -> bool;
    pub fn slaw_is_m2unt16_array(s: bslaw) -> bool;
    pub fn slaw_m2unt16_emit_nocheck(s: bslaw) -> *const m2unt16;
    pub fn slaw_m2unt16_emit(s: bslaw) -> *const m2unt16;
    pub fn slaw_m2unt16_array_raw(N: int64, array_out: *mut *mut m2unt16) -> slaw;
    pub fn slaw_m2unt16_array_empty(N: int64) -> slaw;
    pub fn slaw_m2unt16_array_filled(N: int64, val: m2unt16) -> slaw;
    pub fn slaw_m2unt16_array(src: *const m2unt16, N: int64) -> slaw;
    pub fn slaw_m2unt16_array_emit(s: bslaw) -> *const m2unt16;
    pub fn slaw_m2unt16_array_emit_nth(s: bslaw, N: int64) -> *const m2unt16;
    pub fn slaw_m2unt16_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m2unt16_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m2unt16_array_concat_carray_f(s: slaw, src: *const m2unt16, N: int64) -> slaw;
    pub fn slaw_m2unt16_array_concat_carray(s: bslaw, src: *const m2unt16, N: int64) -> slaw;
    pub fn slaw_m3int32(val: m3int32) -> slaw;
    pub fn slaw_is_m3int32(s: bslaw) -> bool;
    pub fn slaw_is_m3int32_array(s: bslaw) -> bool;
    pub fn slaw_m3int32_emit_nocheck(s: bslaw) -> *const m3int32;
    pub fn slaw_m3int32_emit(s: bslaw) -> *const m3int32;
    pub fn slaw_m3int32_array_raw(N: int64, array_out: *mut *mut m3int32) -> slaw;
    pub fn slaw_m3int32_array_empty(N: int64) -> slaw;
    pub fn slaw_m3int32_array_filled(N: int64, val: m3int32) -> slaw;
    pub fn slaw_m3int32_array(src: *const m3int32, N: int64) -> slaw;
    pub fn slaw_m3int32_array_emit(s: bslaw) -> *const m3int32;
    pub fn slaw_m3int32_array_emit_nth(s: bslaw, N: int64) -> *const m3int32;
    pub fn slaw_m3int32_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m3int32_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m3int32_array_concat_carray_f(s: slaw, src: *const m3int32, N: int64) -> slaw;
    pub fn slaw_m3int32_array_concat_carray(s: bslaw, src: *const m3int32, N: int64) -> slaw;
    pub fn slaw_m3unt32(val: m3unt32) -> slaw;
    pub fn slaw_is_m3unt32(s: bslaw) -> bool;
    pub fn slaw_is_m3unt32_array(s: bslaw) -> bool;
    pub fn slaw_m3unt32_emit_nocheck(s: bslaw) -> *const m3unt32;
    pub fn slaw_m3unt32_emit(s: bslaw) -> *const m3unt32;
    pub fn slaw_m3unt32_array_raw(N: int64, array_out: *mut *mut m3unt32) -> slaw;
    pub fn slaw_m3unt32_array_empty(N: int64) -> slaw;
    pub fn slaw_m3unt32_array_filled(N: int64, val: m3unt32) -> slaw;
    pub fn slaw_m3unt32_array(src: *const m3unt32, N: int64) -> slaw;
    pub fn slaw_m3unt32_array_emit(s: bslaw) -> *const m3unt32;
    pub fn slaw_m3unt32_array_emit_nth(s: bslaw, N: int64) -> *const m3unt32;
    pub fn slaw_m3unt32_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m3unt32_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m3unt32_array_concat_carray_f(s: slaw, src: *const m3unt32, N: int64) -> slaw;
    pub fn slaw_m3unt32_array_concat_carray(s: bslaw, src: *const m3unt32, N: int64) -> slaw;
    pub fn slaw_m3int64(val: m3int64) -> slaw;
    pub fn slaw_is_m3int64(s: bslaw) -> bool;
    pub fn slaw_is_m3int64_array(s: bslaw) -> bool;
    pub fn slaw_m3int64_emit_nocheck(s: bslaw) -> *const m3int64;
    pub fn slaw_m3int64_emit(s: bslaw) -> *const m3int64;
    pub fn slaw_m3int64_array_raw(N: int64, array_out: *mut *mut m3int64) -> slaw;
    pub fn slaw_m3int64_array_empty(N: int64) -> slaw;
    pub fn slaw_m3int64_array_filled(N: int64, val: m3int64) -> slaw;
    pub fn slaw_m3int64_array(src: *const m3int64, N: int64) -> slaw;
    pub fn slaw_m3int64_array_emit(s: bslaw) -> *const m3int64;
    pub fn slaw_m3int64_array_emit_nth(s: bslaw, N: int64) -> *const m3int64;
    pub fn slaw_m3int64_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m3int64_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m3int64_array_concat_carray_f(s: slaw, src: *const m3int64, N: int64) -> slaw;
    pub fn slaw_m3int64_array_concat_carray(s: bslaw, src: *const m3int64, N: int64) -> slaw;
    pub fn slaw_m3unt64(val: m3unt64) -> slaw;
    pub fn slaw_is_m3unt64(s: bslaw) -> bool;
    pub fn slaw_is_m3unt64_array(s: bslaw) -> bool;
    pub fn slaw_m3unt64_emit_nocheck(s: bslaw) -> *const m3unt64;
    pub fn slaw_m3unt64_emit(s: bslaw) -> *const m3unt64;
    pub fn slaw_m3unt64_array_raw(N: int64, array_out: *mut *mut m3unt64) -> slaw;
    pub fn slaw_m3unt64_array_empty(N: int64) -> slaw;
    pub fn slaw_m3unt64_array_filled(N: int64, val: m3unt64) -> slaw;
    pub fn slaw_m3unt64_array(src: *const m3unt64, N: int64) -> slaw;
    pub fn slaw_m3unt64_array_emit(s: bslaw) -> *const m3unt64;
    pub fn slaw_m3unt64_array_emit_nth(s: bslaw, N: int64) -> *const m3unt64;
    pub fn slaw_m3unt64_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m3unt64_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m3unt64_array_concat_carray_f(s: slaw, src: *const m3unt64, N: int64) -> slaw;
    pub fn slaw_m3unt64_array_concat_carray(s: bslaw, src: *const m3unt64, N: int64) -> slaw;
    pub fn slaw_m3float32(val: m3float32) -> slaw;
    pub fn slaw_is_m3float32(s: bslaw) -> bool;
    pub fn slaw_is_m3float32_array(s: bslaw) -> bool;
    pub fn slaw_m3float32_emit_nocheck(s: bslaw) -> *const m3float32;
    pub fn slaw_m3float32_emit(s: bslaw) -> *const m3float32;
    pub fn slaw_m3float32_array_raw(N: int64, array_out: *mut *mut m3float32) -> slaw;
    pub fn slaw_m3float32_array_empty(N: int64) -> slaw;
    pub fn slaw_m3float32_array_filled(N: int64, val: m3float32) -> slaw;
    pub fn slaw_m3float32_array(src: *const m3float32, N: int64) -> slaw;
    pub fn slaw_m3float32_array_emit(s: bslaw) -> *const m3float32;
    pub fn slaw_m3float32_array_emit_nth(s: bslaw, N: int64) -> *const m3float32;
    pub fn slaw_m3float32_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m3float32_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m3float32_array_concat_carray_f(s: slaw, src: *const m3float32, N: int64) -> slaw;
    pub fn slaw_m3float32_array_concat_carray(s: bslaw, src: *const m3float32, N: int64) -> slaw;
    pub fn slaw_m3float64(val: m3float64) -> slaw;
    pub fn slaw_is_m3float64(s: bslaw) -> bool;
    pub fn slaw_is_m3float64_array(s: bslaw) -> bool;
    pub fn slaw_m3float64_emit_nocheck(s: bslaw) -> *const m3float64;
    pub fn slaw_m3float64_emit(s: bslaw) -> *const m3float64;
    pub fn slaw_m3float64_array_raw(N: int64, array_out: *mut *mut m3float64) -> slaw;
    pub fn slaw_m3float64_array_empty(N: int64) -> slaw;
    pub fn slaw_m3float64_array_filled(N: int64, val: m3float64) -> slaw;
    pub fn slaw_m3float64_array(src: *const m3float64, N: int64) -> slaw;
    pub fn slaw_m3float64_array_emit(s: bslaw) -> *const m3float64;
    pub fn slaw_m3float64_array_emit_nth(s: bslaw, N: int64) -> *const m3float64;
    pub fn slaw_m3float64_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m3float64_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m3float64_array_concat_carray_f(s: slaw, src: *const m3float64, N: int64) -> slaw;
    pub fn slaw_m3float64_array_concat_carray(s: bslaw, src: *const m3float64, N: int64) -> slaw;
    pub fn slaw_m3int8(val: m3int8) -> slaw;
    pub fn slaw_is_m3int8(s: bslaw) -> bool;
    pub fn slaw_is_m3int8_array(s: bslaw) -> bool;
    pub fn slaw_m3int8_emit_nocheck(s: bslaw) -> *const m3int8;
    pub fn slaw_m3int8_emit(s: bslaw) -> *const m3int8;
    pub fn slaw_m3int8_array_raw(N: int64, array_out: *mut *mut m3int8) -> slaw;
    pub fn slaw_m3int8_array_empty(N: int64) -> slaw;
    pub fn slaw_m3int8_array_filled(N: int64, val: m3int8) -> slaw;
    pub fn slaw_m3int8_array(src: *const m3int8, N: int64) -> slaw;
    pub fn slaw_m3int8_array_emit(s: bslaw) -> *const m3int8;
    pub fn slaw_m3int8_array_emit_nth(s: bslaw, N: int64) -> *const m3int8;
    pub fn slaw_m3int8_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m3int8_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m3int8_array_concat_carray_f(s: slaw, src: *const m3int8, N: int64) -> slaw;
    pub fn slaw_m3int8_array_concat_carray(s: bslaw, src: *const m3int8, N: int64) -> slaw;
    pub fn slaw_m3unt8(val: m3unt8) -> slaw;
    pub fn slaw_is_m3unt8(s: bslaw) -> bool;
    pub fn slaw_is_m3unt8_array(s: bslaw) -> bool;
    pub fn slaw_m3unt8_emit_nocheck(s: bslaw) -> *const m3unt8;
    pub fn slaw_m3unt8_emit(s: bslaw) -> *const m3unt8;
    pub fn slaw_m3unt8_array_raw(N: int64, array_out: *mut *mut m3unt8) -> slaw;
    pub fn slaw_m3unt8_array_empty(N: int64) -> slaw;
    pub fn slaw_m3unt8_array_filled(N: int64, val: m3unt8) -> slaw;
    pub fn slaw_m3unt8_array(src: *const m3unt8, N: int64) -> slaw;
    pub fn slaw_m3unt8_array_emit(s: bslaw) -> *const m3unt8;
    pub fn slaw_m3unt8_array_emit_nth(s: bslaw, N: int64) -> *const m3unt8;
    pub fn slaw_m3unt8_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m3unt8_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m3unt8_array_concat_carray_f(s: slaw, src: *const m3unt8, N: int64) -> slaw;
    pub fn slaw_m3unt8_array_concat_carray(s: bslaw, src: *const m3unt8, N: int64) -> slaw;
    pub fn slaw_m3int16(val: m3int16) -> slaw;
    pub fn slaw_is_m3int16(s: bslaw) -> bool;
    pub fn slaw_is_m3int16_array(s: bslaw) -> bool;
    pub fn slaw_m3int16_emit_nocheck(s: bslaw) -> *const m3int16;
    pub fn slaw_m3int16_emit(s: bslaw) -> *const m3int16;
    pub fn slaw_m3int16_array_raw(N: int64, array_out: *mut *mut m3int16) -> slaw;
    pub fn slaw_m3int16_array_empty(N: int64) -> slaw;
    pub fn slaw_m3int16_array_filled(N: int64, val: m3int16) -> slaw;
    pub fn slaw_m3int16_array(src: *const m3int16, N: int64) -> slaw;
    pub fn slaw_m3int16_array_emit(s: bslaw) -> *const m3int16;
    pub fn slaw_m3int16_array_emit_nth(s: bslaw, N: int64) -> *const m3int16;
    pub fn slaw_m3int16_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m3int16_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m3int16_array_concat_carray_f(s: slaw, src: *const m3int16, N: int64) -> slaw;
    pub fn slaw_m3int16_array_concat_carray(s: bslaw, src: *const m3int16, N: int64) -> slaw;
    pub fn slaw_m3unt16(val: m3unt16) -> slaw;
    pub fn slaw_is_m3unt16(s: bslaw) -> bool;
    pub fn slaw_is_m3unt16_array(s: bslaw) -> bool;
    pub fn slaw_m3unt16_emit_nocheck(s: bslaw) -> *const m3unt16;
    pub fn slaw_m3unt16_emit(s: bslaw) -> *const m3unt16;
    pub fn slaw_m3unt16_array_raw(N: int64, array_out: *mut *mut m3unt16) -> slaw;
    pub fn slaw_m3unt16_array_empty(N: int64) -> slaw;
    pub fn slaw_m3unt16_array_filled(N: int64, val: m3unt16) -> slaw;
    pub fn slaw_m3unt16_array(src: *const m3unt16, N: int64) -> slaw;
    pub fn slaw_m3unt16_array_emit(s: bslaw) -> *const m3unt16;
    pub fn slaw_m3unt16_array_emit_nth(s: bslaw, N: int64) -> *const m3unt16;
    pub fn slaw_m3unt16_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m3unt16_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m3unt16_array_concat_carray_f(s: slaw, src: *const m3unt16, N: int64) -> slaw;
    pub fn slaw_m3unt16_array_concat_carray(s: bslaw, src: *const m3unt16, N: int64) -> slaw;
    pub fn slaw_m4int32(val: m4int32) -> slaw;
    pub fn slaw_is_m4int32(s: bslaw) -> bool;
    pub fn slaw_is_m4int32_array(s: bslaw) -> bool;
    pub fn slaw_m4int32_emit_nocheck(s: bslaw) -> *const m4int32;
    pub fn slaw_m4int32_emit(s: bslaw) -> *const m4int32;
    pub fn slaw_m4int32_array_raw(N: int64, array_out: *mut *mut m4int32) -> slaw;
    pub fn slaw_m4int32_array_empty(N: int64) -> slaw;
    pub fn slaw_m4int32_array_filled(N: int64, val: m4int32) -> slaw;
    pub fn slaw_m4int32_array(src: *const m4int32, N: int64) -> slaw;
    pub fn slaw_m4int32_array_emit(s: bslaw) -> *const m4int32;
    pub fn slaw_m4int32_array_emit_nth(s: bslaw, N: int64) -> *const m4int32;
    pub fn slaw_m4int32_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m4int32_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m4int32_array_concat_carray_f(s: slaw, src: *const m4int32, N: int64) -> slaw;
    pub fn slaw_m4int32_array_concat_carray(s: bslaw, src: *const m4int32, N: int64) -> slaw;
    pub fn slaw_m4unt32(val: m4unt32) -> slaw;
    pub fn slaw_is_m4unt32(s: bslaw) -> bool;
    pub fn slaw_is_m4unt32_array(s: bslaw) -> bool;
    pub fn slaw_m4unt32_emit_nocheck(s: bslaw) -> *const m4unt32;
    pub fn slaw_m4unt32_emit(s: bslaw) -> *const m4unt32;
    pub fn slaw_m4unt32_array_raw(N: int64, array_out: *mut *mut m4unt32) -> slaw;
    pub fn slaw_m4unt32_array_empty(N: int64) -> slaw;
    pub fn slaw_m4unt32_array_filled(N: int64, val: m4unt32) -> slaw;
    pub fn slaw_m4unt32_array(src: *const m4unt32, N: int64) -> slaw;
    pub fn slaw_m4unt32_array_emit(s: bslaw) -> *const m4unt32;
    pub fn slaw_m4unt32_array_emit_nth(s: bslaw, N: int64) -> *const m4unt32;
    pub fn slaw_m4unt32_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m4unt32_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m4unt32_array_concat_carray_f(s: slaw, src: *const m4unt32, N: int64) -> slaw;
    pub fn slaw_m4unt32_array_concat_carray(s: bslaw, src: *const m4unt32, N: int64) -> slaw;
    pub fn slaw_m4int64(val: m4int64) -> slaw;
    pub fn slaw_is_m4int64(s: bslaw) -> bool;
    pub fn slaw_is_m4int64_array(s: bslaw) -> bool;
    pub fn slaw_m4int64_emit_nocheck(s: bslaw) -> *const m4int64;
    pub fn slaw_m4int64_emit(s: bslaw) -> *const m4int64;
    pub fn slaw_m4int64_array_raw(N: int64, array_out: *mut *mut m4int64) -> slaw;
    pub fn slaw_m4int64_array_empty(N: int64) -> slaw;
    pub fn slaw_m4int64_array_filled(N: int64, val: m4int64) -> slaw;
    pub fn slaw_m4int64_array(src: *const m4int64, N: int64) -> slaw;
    pub fn slaw_m4int64_array_emit(s: bslaw) -> *const m4int64;
    pub fn slaw_m4int64_array_emit_nth(s: bslaw, N: int64) -> *const m4int64;
    pub fn slaw_m4int64_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m4int64_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m4int64_array_concat_carray_f(s: slaw, src: *const m4int64, N: int64) -> slaw;
    pub fn slaw_m4int64_array_concat_carray(s: bslaw, src: *const m4int64, N: int64) -> slaw;
    pub fn slaw_m4unt64(val: m4unt64) -> slaw;
    pub fn slaw_is_m4unt64(s: bslaw) -> bool;
    pub fn slaw_is_m4unt64_array(s: bslaw) -> bool;
    pub fn slaw_m4unt64_emit_nocheck(s: bslaw) -> *const m4unt64;
    pub fn slaw_m4unt64_emit(s: bslaw) -> *const m4unt64;
    pub fn slaw_m4unt64_array_raw(N: int64, array_out: *mut *mut m4unt64) -> slaw;
    pub fn slaw_m4unt64_array_empty(N: int64) -> slaw;
    pub fn slaw_m4unt64_array_filled(N: int64, val: m4unt64) -> slaw;
    pub fn slaw_m4unt64_array(src: *const m4unt64, N: int64) -> slaw;
    pub fn slaw_m4unt64_array_emit(s: bslaw) -> *const m4unt64;
    pub fn slaw_m4unt64_array_emit_nth(s: bslaw, N: int64) -> *const m4unt64;
    pub fn slaw_m4unt64_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m4unt64_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m4unt64_array_concat_carray_f(s: slaw, src: *const m4unt64, N: int64) -> slaw;
    pub fn slaw_m4unt64_array_concat_carray(s: bslaw, src: *const m4unt64, N: int64) -> slaw;
    pub fn slaw_m4float32(val: m4float32) -> slaw;
    pub fn slaw_is_m4float32(s: bslaw) -> bool;
    pub fn slaw_is_m4float32_array(s: bslaw) -> bool;
    pub fn slaw_m4float32_emit_nocheck(s: bslaw) -> *const m4float32;
    pub fn slaw_m4float32_emit(s: bslaw) -> *const m4float32;
    pub fn slaw_m4float32_array_raw(N: int64, array_out: *mut *mut m4float32) -> slaw;
    pub fn slaw_m4float32_array_empty(N: int64) -> slaw;
    pub fn slaw_m4float32_array_filled(N: int64, val: m4float32) -> slaw;
    pub fn slaw_m4float32_array(src: *const m4float32, N: int64) -> slaw;
    pub fn slaw_m4float32_array_emit(s: bslaw) -> *const m4float32;
    pub fn slaw_m4float32_array_emit_nth(s: bslaw, N: int64) -> *const m4float32;
    pub fn slaw_m4float32_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m4float32_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m4float32_array_concat_carray_f(s: slaw, src: *const m4float32, N: int64) -> slaw;
    pub fn slaw_m4float32_array_concat_carray(s: bslaw, src: *const m4float32, N: int64) -> slaw;
    pub fn slaw_m4float64(val: m4float64) -> slaw;
    pub fn slaw_is_m4float64(s: bslaw) -> bool;
    pub fn slaw_is_m4float64_array(s: bslaw) -> bool;
    pub fn slaw_m4float64_emit_nocheck(s: bslaw) -> *const m4float64;
    pub fn slaw_m4float64_emit(s: bslaw) -> *const m4float64;
    pub fn slaw_m4float64_array_raw(N: int64, array_out: *mut *mut m4float64) -> slaw;
    pub fn slaw_m4float64_array_empty(N: int64) -> slaw;
    pub fn slaw_m4float64_array_filled(N: int64, val: m4float64) -> slaw;
    pub fn slaw_m4float64_array(src: *const m4float64, N: int64) -> slaw;
    pub fn slaw_m4float64_array_emit(s: bslaw) -> *const m4float64;
    pub fn slaw_m4float64_array_emit_nth(s: bslaw, N: int64) -> *const m4float64;
    pub fn slaw_m4float64_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m4float64_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m4float64_array_concat_carray_f(s: slaw, src: *const m4float64, N: int64) -> slaw;
    pub fn slaw_m4float64_array_concat_carray(s: bslaw, src: *const m4float64, N: int64) -> slaw;
    pub fn slaw_m4int8(val: m4int8) -> slaw;
    pub fn slaw_is_m4int8(s: bslaw) -> bool;
    pub fn slaw_is_m4int8_array(s: bslaw) -> bool;
    pub fn slaw_m4int8_emit_nocheck(s: bslaw) -> *const m4int8;
    pub fn slaw_m4int8_emit(s: bslaw) -> *const m4int8;
    pub fn slaw_m4int8_array_raw(N: int64, array_out: *mut *mut m4int8) -> slaw;
    pub fn slaw_m4int8_array_empty(N: int64) -> slaw;
    pub fn slaw_m4int8_array_filled(N: int64, val: m4int8) -> slaw;
    pub fn slaw_m4int8_array(src: *const m4int8, N: int64) -> slaw;
    pub fn slaw_m4int8_array_emit(s: bslaw) -> *const m4int8;
    pub fn slaw_m4int8_array_emit_nth(s: bslaw, N: int64) -> *const m4int8;
    pub fn slaw_m4int8_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m4int8_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m4int8_array_concat_carray_f(s: slaw, src: *const m4int8, N: int64) -> slaw;
    pub fn slaw_m4int8_array_concat_carray(s: bslaw, src: *const m4int8, N: int64) -> slaw;
    pub fn slaw_m4unt8(val: m4unt8) -> slaw;
    pub fn slaw_is_m4unt8(s: bslaw) -> bool;
    pub fn slaw_is_m4unt8_array(s: bslaw) -> bool;
    pub fn slaw_m4unt8_emit_nocheck(s: bslaw) -> *const m4unt8;
    pub fn slaw_m4unt8_emit(s: bslaw) -> *const m4unt8;
    pub fn slaw_m4unt8_array_raw(N: int64, array_out: *mut *mut m4unt8) -> slaw;
    pub fn slaw_m4unt8_array_empty(N: int64) -> slaw;
    pub fn slaw_m4unt8_array_filled(N: int64, val: m4unt8) -> slaw;
    pub fn slaw_m4unt8_array(src: *const m4unt8, N: int64) -> slaw;
    pub fn slaw_m4unt8_array_emit(s: bslaw) -> *const m4unt8;
    pub fn slaw_m4unt8_array_emit_nth(s: bslaw, N: int64) -> *const m4unt8;
    pub fn slaw_m4unt8_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m4unt8_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m4unt8_array_concat_carray_f(s: slaw, src: *const m4unt8, N: int64) -> slaw;
    pub fn slaw_m4unt8_array_concat_carray(s: bslaw, src: *const m4unt8, N: int64) -> slaw;
    pub fn slaw_m4int16(val: m4int16) -> slaw;
    pub fn slaw_is_m4int16(s: bslaw) -> bool;
    pub fn slaw_is_m4int16_array(s: bslaw) -> bool;
    pub fn slaw_m4int16_emit_nocheck(s: bslaw) -> *const m4int16;
    pub fn slaw_m4int16_emit(s: bslaw) -> *const m4int16;
    pub fn slaw_m4int16_array_raw(N: int64, array_out: *mut *mut m4int16) -> slaw;
    pub fn slaw_m4int16_array_empty(N: int64) -> slaw;
    pub fn slaw_m4int16_array_filled(N: int64, val: m4int16) -> slaw;
    pub fn slaw_m4int16_array(src: *const m4int16, N: int64) -> slaw;
    pub fn slaw_m4int16_array_emit(s: bslaw) -> *const m4int16;
    pub fn slaw_m4int16_array_emit_nth(s: bslaw, N: int64) -> *const m4int16;
    pub fn slaw_m4int16_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m4int16_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m4int16_array_concat_carray_f(s: slaw, src: *const m4int16, N: int64) -> slaw;
    pub fn slaw_m4int16_array_concat_carray(s: bslaw, src: *const m4int16, N: int64) -> slaw;
    pub fn slaw_m4unt16(val: m4unt16) -> slaw;
    pub fn slaw_is_m4unt16(s: bslaw) -> bool;
    pub fn slaw_is_m4unt16_array(s: bslaw) -> bool;
    pub fn slaw_m4unt16_emit_nocheck(s: bslaw) -> *const m4unt16;
    pub fn slaw_m4unt16_emit(s: bslaw) -> *const m4unt16;
    pub fn slaw_m4unt16_array_raw(N: int64, array_out: *mut *mut m4unt16) -> slaw;
    pub fn slaw_m4unt16_array_empty(N: int64) -> slaw;
    pub fn slaw_m4unt16_array_filled(N: int64, val: m4unt16) -> slaw;
    pub fn slaw_m4unt16_array(src: *const m4unt16, N: int64) -> slaw;
    pub fn slaw_m4unt16_array_emit(s: bslaw) -> *const m4unt16;
    pub fn slaw_m4unt16_array_emit_nth(s: bslaw, N: int64) -> *const m4unt16;
    pub fn slaw_m4unt16_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m4unt16_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m4unt16_array_concat_carray_f(s: slaw, src: *const m4unt16, N: int64) -> slaw;
    pub fn slaw_m4unt16_array_concat_carray(s: bslaw, src: *const m4unt16, N: int64) -> slaw;
    pub fn slaw_m5int32(val: m5int32) -> slaw;
    pub fn slaw_is_m5int32(s: bslaw) -> bool;
    pub fn slaw_is_m5int32_array(s: bslaw) -> bool;
    pub fn slaw_m5int32_emit_nocheck(s: bslaw) -> *const m5int32;
    pub fn slaw_m5int32_emit(s: bslaw) -> *const m5int32;
    pub fn slaw_m5int32_array_raw(N: int64, array_out: *mut *mut m5int32) -> slaw;
    pub fn slaw_m5int32_array_empty(N: int64) -> slaw;
    pub fn slaw_m5int32_array_filled(N: int64, val: m5int32) -> slaw;
    pub fn slaw_m5int32_array(src: *const m5int32, N: int64) -> slaw;
    pub fn slaw_m5int32_array_emit(s: bslaw) -> *const m5int32;
    pub fn slaw_m5int32_array_emit_nth(s: bslaw, N: int64) -> *const m5int32;
    pub fn slaw_m5int32_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m5int32_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m5int32_array_concat_carray_f(s: slaw, src: *const m5int32, N: int64) -> slaw;
    pub fn slaw_m5int32_array_concat_carray(s: bslaw, src: *const m5int32, N: int64) -> slaw;
    pub fn slaw_m5unt32(val: m5unt32) -> slaw;
    pub fn slaw_is_m5unt32(s: bslaw) -> bool;
    pub fn slaw_is_m5unt32_array(s: bslaw) -> bool;
    pub fn slaw_m5unt32_emit_nocheck(s: bslaw) -> *const m5unt32;
    pub fn slaw_m5unt32_emit(s: bslaw) -> *const m5unt32;
    pub fn slaw_m5unt32_array_raw(N: int64, array_out: *mut *mut m5unt32) -> slaw;
    pub fn slaw_m5unt32_array_empty(N: int64) -> slaw;
    pub fn slaw_m5unt32_array_filled(N: int64, val: m5unt32) -> slaw;
    pub fn slaw_m5unt32_array(src: *const m5unt32, N: int64) -> slaw;
    pub fn slaw_m5unt32_array_emit(s: bslaw) -> *const m5unt32;
    pub fn slaw_m5unt32_array_emit_nth(s: bslaw, N: int64) -> *const m5unt32;
    pub fn slaw_m5unt32_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m5unt32_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m5unt32_array_concat_carray_f(s: slaw, src: *const m5unt32, N: int64) -> slaw;
    pub fn slaw_m5unt32_array_concat_carray(s: bslaw, src: *const m5unt32, N: int64) -> slaw;
    pub fn slaw_m5int64(val: m5int64) -> slaw;
    pub fn slaw_is_m5int64(s: bslaw) -> bool;
    pub fn slaw_is_m5int64_array(s: bslaw) -> bool;
    pub fn slaw_m5int64_emit_nocheck(s: bslaw) -> *const m5int64;
    pub fn slaw_m5int64_emit(s: bslaw) -> *const m5int64;
    pub fn slaw_m5int64_array_raw(N: int64, array_out: *mut *mut m5int64) -> slaw;
    pub fn slaw_m5int64_array_empty(N: int64) -> slaw;
    pub fn slaw_m5int64_array_filled(N: int64, val: m5int64) -> slaw;
    pub fn slaw_m5int64_array(src: *const m5int64, N: int64) -> slaw;
    pub fn slaw_m5int64_array_emit(s: bslaw) -> *const m5int64;
    pub fn slaw_m5int64_array_emit_nth(s: bslaw, N: int64) -> *const m5int64;
    pub fn slaw_m5int64_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m5int64_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m5int64_array_concat_carray_f(s: slaw, src: *const m5int64, N: int64) -> slaw;
    pub fn slaw_m5int64_array_concat_carray(s: bslaw, src: *const m5int64, N: int64) -> slaw;
    pub fn slaw_m5unt64(val: m5unt64) -> slaw;
    pub fn slaw_is_m5unt64(s: bslaw) -> bool;
    pub fn slaw_is_m5unt64_array(s: bslaw) -> bool;
    pub fn slaw_m5unt64_emit_nocheck(s: bslaw) -> *const m5unt64;
    pub fn slaw_m5unt64_emit(s: bslaw) -> *const m5unt64;
    pub fn slaw_m5unt64_array_raw(N: int64, array_out: *mut *mut m5unt64) -> slaw;
    pub fn slaw_m5unt64_array_empty(N: int64) -> slaw;
    pub fn slaw_m5unt64_array_filled(N: int64, val: m5unt64) -> slaw;
    pub fn slaw_m5unt64_array(src: *const m5unt64, N: int64) -> slaw;
    pub fn slaw_m5unt64_array_emit(s: bslaw) -> *const m5unt64;
    pub fn slaw_m5unt64_array_emit_nth(s: bslaw, N: int64) -> *const m5unt64;
    pub fn slaw_m5unt64_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m5unt64_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m5unt64_array_concat_carray_f(s: slaw, src: *const m5unt64, N: int64) -> slaw;
    pub fn slaw_m5unt64_array_concat_carray(s: bslaw, src: *const m5unt64, N: int64) -> slaw;
    pub fn slaw_m5float32(val: m5float32) -> slaw;
    pub fn slaw_is_m5float32(s: bslaw) -> bool;
    pub fn slaw_is_m5float32_array(s: bslaw) -> bool;
    pub fn slaw_m5float32_emit_nocheck(s: bslaw) -> *const m5float32;
    pub fn slaw_m5float32_emit(s: bslaw) -> *const m5float32;
    pub fn slaw_m5float32_array_raw(N: int64, array_out: *mut *mut m5float32) -> slaw;
    pub fn slaw_m5float32_array_empty(N: int64) -> slaw;
    pub fn slaw_m5float32_array_filled(N: int64, val: m5float32) -> slaw;
    pub fn slaw_m5float32_array(src: *const m5float32, N: int64) -> slaw;
    pub fn slaw_m5float32_array_emit(s: bslaw) -> *const m5float32;
    pub fn slaw_m5float32_array_emit_nth(s: bslaw, N: int64) -> *const m5float32;
    pub fn slaw_m5float32_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m5float32_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m5float32_array_concat_carray_f(s: slaw, src: *const m5float32, N: int64) -> slaw;
    pub fn slaw_m5float32_array_concat_carray(s: bslaw, src: *const m5float32, N: int64) -> slaw;
    pub fn slaw_m5float64(val: m5float64) -> slaw;
    pub fn slaw_is_m5float64(s: bslaw) -> bool;
    pub fn slaw_is_m5float64_array(s: bslaw) -> bool;
    pub fn slaw_m5float64_emit_nocheck(s: bslaw) -> *const m5float64;
    pub fn slaw_m5float64_emit(s: bslaw) -> *const m5float64;
    pub fn slaw_m5float64_array_raw(N: int64, array_out: *mut *mut m5float64) -> slaw;
    pub fn slaw_m5float64_array_empty(N: int64) -> slaw;
    pub fn slaw_m5float64_array_filled(N: int64, val: m5float64) -> slaw;
    pub fn slaw_m5float64_array(src: *const m5float64, N: int64) -> slaw;
    pub fn slaw_m5float64_array_emit(s: bslaw) -> *const m5float64;
    pub fn slaw_m5float64_array_emit_nth(s: bslaw, N: int64) -> *const m5float64;
    pub fn slaw_m5float64_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m5float64_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m5float64_array_concat_carray_f(s: slaw, src: *const m5float64, N: int64) -> slaw;
    pub fn slaw_m5float64_array_concat_carray(s: bslaw, src: *const m5float64, N: int64) -> slaw;
    pub fn slaw_m5int8(val: m5int8) -> slaw;
    pub fn slaw_is_m5int8(s: bslaw) -> bool;
    pub fn slaw_is_m5int8_array(s: bslaw) -> bool;
    pub fn slaw_m5int8_emit_nocheck(s: bslaw) -> *const m5int8;
    pub fn slaw_m5int8_emit(s: bslaw) -> *const m5int8;
    pub fn slaw_m5int8_array_raw(N: int64, array_out: *mut *mut m5int8) -> slaw;
    pub fn slaw_m5int8_array_empty(N: int64) -> slaw;
    pub fn slaw_m5int8_array_filled(N: int64, val: m5int8) -> slaw;
    pub fn slaw_m5int8_array(src: *const m5int8, N: int64) -> slaw;
    pub fn slaw_m5int8_array_emit(s: bslaw) -> *const m5int8;
    pub fn slaw_m5int8_array_emit_nth(s: bslaw, N: int64) -> *const m5int8;
    pub fn slaw_m5int8_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m5int8_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m5int8_array_concat_carray_f(s: slaw, src: *const m5int8, N: int64) -> slaw;
    pub fn slaw_m5int8_array_concat_carray(s: bslaw, src: *const m5int8, N: int64) -> slaw;
    pub fn slaw_m5unt8(val: m5unt8) -> slaw;
    pub fn slaw_is_m5unt8(s: bslaw) -> bool;
    pub fn slaw_is_m5unt8_array(s: bslaw) -> bool;
    pub fn slaw_m5unt8_emit_nocheck(s: bslaw) -> *const m5unt8;
    pub fn slaw_m5unt8_emit(s: bslaw) -> *const m5unt8;
    pub fn slaw_m5unt8_array_raw(N: int64, array_out: *mut *mut m5unt8) -> slaw;
    pub fn slaw_m5unt8_array_empty(N: int64) -> slaw;
    pub fn slaw_m5unt8_array_filled(N: int64, val: m5unt8) -> slaw;
    pub fn slaw_m5unt8_array(src: *const m5unt8, N: int64) -> slaw;
    pub fn slaw_m5unt8_array_emit(s: bslaw) -> *const m5unt8;
    pub fn slaw_m5unt8_array_emit_nth(s: bslaw, N: int64) -> *const m5unt8;
    pub fn slaw_m5unt8_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m5unt8_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m5unt8_array_concat_carray_f(s: slaw, src: *const m5unt8, N: int64) -> slaw;
    pub fn slaw_m5unt8_array_concat_carray(s: bslaw, src: *const m5unt8, N: int64) -> slaw;
    pub fn slaw_m5int16(val: m5int16) -> slaw;
    pub fn slaw_is_m5int16(s: bslaw) -> bool;
    pub fn slaw_is_m5int16_array(s: bslaw) -> bool;
    pub fn slaw_m5int16_emit_nocheck(s: bslaw) -> *const m5int16;
    pub fn slaw_m5int16_emit(s: bslaw) -> *const m5int16;
    pub fn slaw_m5int16_array_raw(N: int64, array_out: *mut *mut m5int16) -> slaw;
    pub fn slaw_m5int16_array_empty(N: int64) -> slaw;
    pub fn slaw_m5int16_array_filled(N: int64, val: m5int16) -> slaw;
    pub fn slaw_m5int16_array(src: *const m5int16, N: int64) -> slaw;
    pub fn slaw_m5int16_array_emit(s: bslaw) -> *const m5int16;
    pub fn slaw_m5int16_array_emit_nth(s: bslaw, N: int64) -> *const m5int16;
    pub fn slaw_m5int16_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m5int16_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m5int16_array_concat_carray_f(s: slaw, src: *const m5int16, N: int64) -> slaw;
    pub fn slaw_m5int16_array_concat_carray(s: bslaw, src: *const m5int16, N: int64) -> slaw;
    pub fn slaw_m5unt16(val: m5unt16) -> slaw;
    pub fn slaw_is_m5unt16(s: bslaw) -> bool;
    pub fn slaw_is_m5unt16_array(s: bslaw) -> bool;
    pub fn slaw_m5unt16_emit_nocheck(s: bslaw) -> *const m5unt16;
    pub fn slaw_m5unt16_emit(s: bslaw) -> *const m5unt16;
    pub fn slaw_m5unt16_array_raw(N: int64, array_out: *mut *mut m5unt16) -> slaw;
    pub fn slaw_m5unt16_array_empty(N: int64) -> slaw;
    pub fn slaw_m5unt16_array_filled(N: int64, val: m5unt16) -> slaw;
    pub fn slaw_m5unt16_array(src: *const m5unt16, N: int64) -> slaw;
    pub fn slaw_m5unt16_array_emit(s: bslaw) -> *const m5unt16;
    pub fn slaw_m5unt16_array_emit_nth(s: bslaw, N: int64) -> *const m5unt16;
    pub fn slaw_m5unt16_arrays_concat_f(s1: slaw, ...) -> slaw;
    pub fn slaw_m5unt16_arrays_concat(s1: bslaw, ...) -> slaw;
    pub fn slaw_m5unt16_array_concat_carray_f(s: slaw, src: *const m5unt16, N: int64) -> slaw;
    pub fn slaw_m5unt16_array_concat_carray(s: bslaw, src: *const m5unt16, N: int64) -> slaw;
    pub fn slaw_is_numeric(s: bslaw) -> bool;
    pub fn slaw_is_numeric_8(s: bslaw) -> bool;
    pub fn slaw_is_numeric_16(s: bslaw) -> bool;
    pub fn slaw_is_numeric_32(s: bslaw) -> bool;
    pub fn slaw_is_numeric_64(s: bslaw) -> bool;
    pub fn slaw_is_numeric_int(s: bslaw) -> bool;
    pub fn slaw_is_numeric_unt(s: bslaw) -> bool;
    pub fn slaw_is_numeric_float(s: bslaw) -> bool;
    pub fn slaw_is_numeric_complex(s: bslaw) -> bool;
    pub fn slaw_is_numeric_vector(s: bslaw) -> bool;
    pub fn slaw_is_numeric_multivector(s: bslaw) -> bool;
    pub fn slaw_is_numeric_array(s: bslaw) -> bool;
    pub fn slaw_numeric_array_count(s: bslaw) -> int64;
    pub fn slaw_numeric_array_emit(s: bslaw) -> *const ::std::os::raw::c_void;
    pub fn slaw_numeric_vector_dimension(s: bslaw) -> ::std::os::raw::c_int;
    pub fn slaw_numeric_unit_bsize(s: bslaw) -> ::std::os::raw::c_int;
    pub fn slaw_spew_overview(s: bslaw, whither: *mut FILE, prolo: *const ::std::os::raw::c_char);
    pub fn slaw_spew_overview_to_stderr(s: bslaw);
    pub fn slaw_spew_overview_to_string(s: bslaw) -> slaw;
    pub fn slaw_input_open_binary(
        filename: *const ::std::os::raw::c_char,
        f: *mut slaw_input,
    ) -> ob_retort;
    pub fn slaw_input_open_binary_x(file: *mut FILE, f: *mut slaw_input) -> ob_retort;
    pub fn slaw_input_open_binary_z(file: *mut FILE, f: *mut slaw_input) -> ob_retort;
    pub fn slaw_input_open_text(
        filename: *const ::std::os::raw::c_char,
        f: *mut slaw_input,
    ) -> ob_retort;
    pub fn slaw_input_open_text_x(file: *mut FILE, f: *mut slaw_input) -> ob_retort;
    pub fn slaw_input_open_text_z(file: *mut FILE, f: *mut slaw_input) -> ob_retort;
    pub fn slaw_input_open_binary_fdx(fd: ::std::os::raw::c_int, f: *mut slaw_input) -> ob_retort;
    pub fn slaw_input_open_binary_fdz(fd: ::std::os::raw::c_int, f: *mut slaw_input) -> ob_retort;
    pub fn slaw_input_open_text_fdx(fd: ::std::os::raw::c_int, f: *mut slaw_input) -> ob_retort;
    pub fn slaw_input_open_text_fdz(fd: ::std::os::raw::c_int, f: *mut slaw_input) -> ob_retort;
    pub fn slaw_input_open(
        filename: *const ::std::os::raw::c_char,
        f: *mut slaw_input,
    ) -> ob_retort;
    pub fn slaw_input_read(f: slaw_input, s: *mut slaw) -> ob_retort;
    pub fn slaw_input_close(f: slaw_input) -> ob_retort;
    pub fn slaw_output_open_binary(
        filename: *const ::std::os::raw::c_char,
        f: *mut slaw_output,
    ) -> ob_retort;
    pub fn slaw_output_open_binary_x(file: *mut FILE, f: *mut slaw_output) -> ob_retort;
    pub fn slaw_output_open_binary_z(file: *mut FILE, f: *mut slaw_output) -> ob_retort;
    pub fn slaw_output_open_text(
        filename: *const ::std::os::raw::c_char,
        f: *mut slaw_output,
    ) -> ob_retort;
    pub fn slaw_output_open_text_x(file: *mut FILE, f: *mut slaw_output) -> ob_retort;
    pub fn slaw_output_open_text_z(file: *mut FILE, f: *mut slaw_output) -> ob_retort;
    pub fn slaw_output_write(f: slaw_output, s: bslaw) -> ob_retort;
    pub fn slaw_output_close(f: slaw_output) -> ob_retort;
    pub fn slaw_read_from_binary_file(
        filename: *const ::std::os::raw::c_char,
        s: *mut slaw,
    ) -> ob_retort;
    pub fn slaw_read_from_text_file(
        filename: *const ::std::os::raw::c_char,
        s: *mut slaw,
    ) -> ob_retort;
    pub fn slaw_read_from_file(filename: *const ::std::os::raw::c_char, s: *mut slaw) -> ob_retort;
    pub fn slaw_from_string(str_: *const ::std::os::raw::c_char, s: *mut slaw) -> ob_retort;
    pub fn slaw_to_string(s: bslaw, str_: *mut slaw) -> ob_retort;
    pub fn slaw_write_to_binary_file(
        filename: *const ::std::os::raw::c_char,
        s: bslaw,
    ) -> ob_retort;
    pub fn slaw_write_to_text_file(filename: *const ::std::os::raw::c_char, s: bslaw) -> ob_retort;
    pub fn slaw_output_open_text_options(
        filename: *const ::std::os::raw::c_char,
        f: *mut slaw_output,
        options: bslaw,
    ) -> ob_retort;
    pub fn slaw_output_open_text_options_f(
        filename: *const ::std::os::raw::c_char,
        f: *mut slaw_output,
        options: slaw,
    ) -> ob_retort;
    pub fn slaw_output_open_text_options_x(
        file: *mut FILE,
        f: *mut slaw_output,
        options: bslaw,
    ) -> ob_retort;
    pub fn slaw_output_open_text_options_z(
        file: *mut FILE,
        f: *mut slaw_output,
        options: bslaw,
    ) -> ob_retort;
    pub fn slaw_to_string_options(s: bslaw, str_: *mut slaw, options: bslaw) -> ob_retort;
    pub fn slaw_to_string_options_f(s: bslaw, str_: *mut slaw, options: slaw) -> ob_retort;
    pub fn slaw_input_open_binary_handler(h: slaw_read_handler, f: *mut slaw_input) -> ob_retort;
    pub fn slaw_input_open_text_handler(h: slaw_read_handler, f: *mut slaw_input) -> ob_retort;
    pub fn slaw_output_open_binary_handler(
        h: slaw_write_handler,
        options: bslaw,
        f: *mut slaw_output,
    ) -> ob_retort;
    pub fn slaw_output_open_text_handler(
        h: slaw_write_handler,
        options: bslaw,
        f: *mut slaw_output,
    ) -> ob_retort;
}
